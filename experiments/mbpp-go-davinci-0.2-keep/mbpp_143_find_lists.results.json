{
  "name": "mbpp_143_find_lists",
  "language": "go_test.go",
  "prompt": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case []float64:\n        return 1 + find_lists(Input.([]float64)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c418, 0x0)\n\t/tmp/tmpwshhip1v_test.go:12 +0x2e7\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x941)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a6bf)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpwshhip1v_test.go:31 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case []float64:\n        return 1 + find_lists(Input.([]float64)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c418, 0x0)\n\t/tmp/tmpwshhip1v_test.go:12 +0x2e7\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x941)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a6bf)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpwshhip1v_test.go:31 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    case string:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c460, 0x0)\n\t/tmp/tmp8th19g1q_test.go:12 +0x136\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a65f)\n\t/tmp/tmp8th19g1q_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a65f)\n\t/tmp/tmp8th19g1q_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmp8th19g1q_test.go:28 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case []float64:\n        return 1 + find_lists(Input.([]float64)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c418, 0x0)\n\t/tmp/tmpwshhip1v_test.go:12 +0x2e7\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x941)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a6bf)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpwshhip1v_test.go:31 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    case string:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpff3mhm32_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpff3mhm32_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpff3mhm32_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086c60, 0x0)\n\t/tmp/tmp2au9191a_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086ca0, 0x58a65f)\n\t/tmp/tmp2au9191a_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086e78, 0x58a65f)\n\t/tmp/tmp2au9191a_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmp2au9191a_test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return -1\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp8m6bn5gd_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp8m6bn5gd_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp8m6bn5gd_test.go:35: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int = 0\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpswiq81os_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpswiq81os_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpswiq81os_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc60, 0x0)\n\t/tmp/tmp5ig209fu_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x58a65f)\n\t/tmp/tmp5ig209fu_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a65f)\n\t/tmp/tmp5ig209fu_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmp5ig209fu_test.go:26 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case []int:\n            return 1 + find_lists(Input.([]int)[1:])\n        case []string:\n            return 1 + find_lists(Input.([]string)[1:])\n        case []float64:\n            return 1 + find_lists(Input.([]float64)[1:])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c418, 0x0)\n\t/tmp/tmpqdo0s6e1_test.go:12 +0x2e7\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x941)\n\t/tmp/tmpqdo0s6e1_test.go:12 +0x205\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a6bf)\n\t/tmp/tmpqdo0s6e1_test.go:12 +0x205\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmpqdo0s6e1_test.go:31 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmpg0cl_tcv_test.go:29 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc60, 0x0)\n\t/tmp/tmphui98m0d_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x58a65f)\n\t/tmp/tmphui98m0d_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a65f)\n\t/tmp/tmphui98m0d_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmphui98m0d_test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case interface{}:\n            return find_lists(Input.([]interface{})[1:])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c448, 0x452467)\n\t/tmp/tmpyjxov85k_test.go:12 +0x18f\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x45475a)\n\t/tmp/tmpyjxov85k_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpyjxov85k_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmpyjxov85k_test.go:27 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc60, 0x0)\n\t/tmp/tmphui98m0d_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x58a65f)\n\t/tmp/tmphui98m0d_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a65f)\n\t/tmp/tmphui98m0d_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmphui98m0d_test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int = 0\n    switch Input.(type) {\n    case []interface{}:\n        count++\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpdnuxvoy1_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpdnuxvoy1_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpdnuxvoy1_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, value := range Input.([]interface{}) {\n            count += find_lists(value)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp_d4pt2br_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp_d4pt2br_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp_d4pt2br_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return find_lists(Input.([]interface{})[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc48, 0x452467)\n\t/tmp/tmpe3ltucr__test.go:12 +0x18f\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x45475a)\n\t/tmp/tmpe3ltucr__test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a67f)\n\t/tmp/tmpe3ltucr__test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmpe3ltucr__test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmpg0cl_tcv_test.go:29 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086c60, 0x0)\n\t/tmp/tmp2au9191a_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086ca0, 0x58a65f)\n\t/tmp/tmp2au9191a_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086e78, 0x58a65f)\n\t/tmp/tmp2au9191a_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmp2au9191a_test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbb35bwh2_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return -1\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp8m6bn5gd_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp8m6bn5gd_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp8m6bn5gd_test.go:35: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case int:\n        return 0\n    case string:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmpzcpudl06_test.go:12 +0x288\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmpzcpudl06_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpzcpudl06_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmpzcpudl06_test.go:33 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmpg0cl_tcv_test.go:29 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    case string:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp0dd4mdyv_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp0dd4mdyv_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp0dd4mdyv_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp9pswbcgk_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp9pswbcgk_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp9pswbcgk_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    case string:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp0dd4mdyv_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp0dd4mdyv_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp0dd4mdyv_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return find_lists(Input.([]interface{})[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc48, 0x452467)\n\t/tmp/tmpe3ltucr__test.go:12 +0x18f\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x45475a)\n\t/tmp/tmpe3ltucr__test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a67f)\n\t/tmp/tmpe3ltucr__test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmpe3ltucr__test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmpg0cl_tcv_test.go:29 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{}))\n    case int:\n        return 0\n    case float64:\n        return 0\n    case string:\n        return 0\n    case bool:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122659,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170378 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722c, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0201703a0, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:9 +0x168 fp=0xc020170388 sp=0xc020170380 pc=0x50a768\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0201703e0, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc0201703c8 sp=0xc020170388 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc020170420, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc020170408 sp=0xc0201703c8 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc020170460, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc020170448 sp=0xc020170408 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0201704a0, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc020170488 sp=0xc020170448 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0201704e0, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc0201704c8 sp=0xc020170488 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc020170520, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc020170508 sp=0xc0201704c8 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc020170560, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc020170548 sp=0xc020170508 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0201705a0, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc020170588 sp=0xc020170548 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0201705e0, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc0201705c8 sp=0xc020170588 pc=0x50a6ea\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc020170620, 0x0)\n\t/tmp/tmp9zcdtcbo_test.go:12 +0xea fp=0xc02017",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return -1\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp54vy7gys_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp54vy7gys_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp54vy7gys_test.go:35: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case int:\n            return 0\n        case string:\n            return 0\n        case []interface{}:\n            count := 0\n            for _, value := range Input.([]interface{}) {\n                count += find_lists(value)\n            }\n            return count + 1\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphxjxf85h_test.go:40: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphxjxf85h_test.go:40: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphxjxf85h_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        case string:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpo2jj65pg_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpo2jj65pg_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpo2jj65pg_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case []int:\n            return 1 + find_lists(Input.([]int)[1:])\n        case []string:\n            return 1 + find_lists(Input.([]string)[1:])\n        case int:\n            return 0\n        case string:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmp34myxc6i_test.go:12 +0x288\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmp34myxc6i_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmp34myxc6i_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp34myxc6i_test.go:33 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc60, 0x0)\n\t/tmp/tmphui98m0d_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x58a65f)\n\t/tmp/tmphui98m0d_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a65f)\n\t/tmp/tmphui98m0d_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmphui98m0d_test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case int:\n        return 0\n    case string:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmp4qe4521m_test.go:12 +0x288\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmp4qe4521m_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmp4qe4521m_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc000182600)\n\t/tmp/tmp4qe4521m_test.go:32 +0x19c\ntesting.tRunner(0xc000182600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case []float64:\n        return 1 + find_lists(Input.([]float64)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c418, 0x0)\n\t/tmp/tmpwshhip1v_test.go:12 +0x2e7\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x941)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a6bf)\n\t/tmp/tmpwshhip1v_test.go:12 +0x205\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpwshhip1v_test.go:31 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp74y2zvl4_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case []float64:\n        return 1 + find_lists(Input.([]float64)[1:])\n    case []bool:\n        return 1 + find_lists(Input.([]bool)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000c2c00, 0x0)\n\t/tmp/tmp4bauwnxa_test.go:12 +0x3d9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x921)\n\t/tmp/tmp4bauwnxa_test.go:12 +0x24b\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a6df)\n\t/tmp/tmp4bauwnxa_test.go:12 +0x24b\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmp4bauwnxa_test.go:33 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbb35bwh2_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpz2okmj32_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case []int:\n            return 1 + find_lists(Input.([]int)[1:])\n        case []string:\n            return 1 + find_lists(Input.([]string)[1:])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092430, 0x453fe5)\n\t/tmp/tmp4mu54cfn_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x58a67f)\n\t/tmp/tmp4mu54cfn_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a67f)\n\t/tmp/tmp4mu54cfn_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmp4mu54cfn_test.go:29 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return find_lists(Input.([]interface{})[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cc48, 0x452467)\n\t/tmp/tmpe3ltucr__test.go:12 +0x18f\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008cca0, 0x45475a)\n\t/tmp/tmpe3ltucr__test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008ce78, 0x58a67f)\n\t/tmp/tmpe3ltucr__test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000186300)\n\t/tmp/tmpe3ltucr__test.go:27 +0x19c\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case interface{}:\n            return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c460, 0x0)\n\t/tmp/tmp28shf9c6_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a65f)\n\t/tmp/tmp28shf9c6_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a65f)\n\t/tmp/tmp28shf9c6_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp28shf9c6_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122658,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c430, 0x453fe5)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a67f)\n\t/tmp/tmpg0cl_tcv_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmpg0cl_tcv_test.go:29 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7ixh6t_u_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp2garc64c_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp2garc64c_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp2garc64c_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        panic(fmt.Sprintf(\"Unknown type: %T\", Input))\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122659,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: Unknown type: []int [recovered]\n\tpanic: Unknown type: []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51ca40, 0xc00011e4a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca40, 0xc00011e4a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a3a0, 0xc000140030, 0x0)\n\t/tmp/tmp_dcxltev_test.go:16 +0x145\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000140060, 0x2)\n\t/tmp/tmp_dcxltev_test.go:12 +0x7e\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp_dcxltev_test.go:27 +0x172\ntesting.tRunner(0xc000102600, 0x54f310)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp946lt6dz_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpvcgfql19_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpe6inhxp4_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given tuple.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509987,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpp6879s8p_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}