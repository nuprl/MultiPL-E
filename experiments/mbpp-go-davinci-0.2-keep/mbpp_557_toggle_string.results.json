{
  "name": "mbpp_557_toggle_string",
  "language": "go_test.go",
  "prompt": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var myToggleString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myToggleString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            myToggleString += string(char + 32)\n        } else {\n            myToggleString += string(char)\n        }\n    }\n    return myToggleString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var myToggleString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myToggleString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            myToggleString += string(char + 32)\n        } else {\n            myToggleString += string(char)\n        }\n    }\n    return myToggleString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z' {\n            newString += string(myString[i] - 32)\n        } else if myString[i] >= 'A' && myString[i] <= 'Z' {\n            newString += string(myString[i] + 32)\n        } else {\n            newString += string(myString[i])\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else if char >= 97 && char <= 122 {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var myStringToggle string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            myStringToggle += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            myStringToggle += string(char - 32)\n        } else {\n            myStringToggle += string(char)\n        }\n    }\n    return myStringToggle\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            newString += string(char + 32)\n        } else if char >= 97 && char <= 122 {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var myToggleString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            myToggleString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            myToggleString += string(char - 32)\n        } else {\n            myToggleString += string(char)\n        }\n    }\n    return myToggleString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else if char >= 97 && char <= 122 {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var myToggleString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myToggleString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            myToggleString += string(char + 32)\n        } else {\n            myToggleString += string(char)\n        }\n    }\n    return myToggleString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var myStringRunes = []rune(myString)\n    for i, char := range myStringRunes {\n        if char >= 'A' && char <= 'Z' {\n            myStringRunes[i] = char + 32\n        } else if char >= 'a' && char <= 'z' {\n            myStringRunes[i] = char - 32\n        }\n    }\n    return string(myStringRunes)\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123858,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z' {\n            result += string(myString[i] - 32)\n        } else if myString[i] >= 'A' && myString[i] <= 'Z' {\n            result += string(myString[i] + 32)\n        } else {\n            result += string(myString[i])\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            result += string(c - 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            newString += string(char + 32)\n        } else if char >= 97 && char <= 122 {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123856,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509730,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}