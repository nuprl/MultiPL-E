{
  "name": "mbpp_92_is_undulating",
  "language": "go_test.go",
  "prompt": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n < 100 {\n        return false\n    }\n\n    var last_digit int\n    var last_diff int\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n        if last_digit != 0 {\n            diff := digit - last_digit\n            if last_diff != 0 && diff != last_diff {\n                return false\n            }\n            last_diff = diff\n        }\n        last_digit = digit\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n",
    "    var last_digit int\n    var current_digit int\n    var is_undulating bool = true\n    var is_increasing bool = true\n    var is_decreasing bool = true\n\n    for n > 0 {\n        last_digit = current_digit\n        current_digit = n % 10\n        if last_digit > 0 {\n            if is_increasing {\n                is_increasing = current_digit > last_digit\n            }\n            if is_decreasing {\n                is_decreasing = current_digit < last_digit\n            }\n        }\n        n /= 10\n    }\n    is_undulating = is_increasing || is_decreasing\n    return is_undulating\n}\n",
    "    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    for n > 99 {\n        if n % 10 != (n / 10) % 10 {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        next = n % 10\n        if prev != curr && curr != next && prev != next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    var prev_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if prev_digit != 0 {\n            if prev_digit == curr_digit {\n                return false\n            }\n        }\n        prev_digit = curr_digit\n        n /= 10\n    }\n    return true\n}\n",
    "    var last_digit int\n    var current_digit int\n    var is_increasing bool\n    var is_decreasing bool\n    var is_undulating bool\n\n    last_digit = n % 10\n    n = n / 10\n    current_digit = n % 10\n    n = n / 10\n\n    if last_digit > current_digit {\n        is_increasing = true\n    } else if last_digit < current_digit {\n        is_decreasing = true\n    }\n\n    for n > 0 {\n        last_digit = current_digit\n        current_digit = n % 10\n        n = n / 10\n\n        if is_increasing {\n            if last_digit < current_digit {\n                return false\n            } else if last_digit > current_digit {\n                is_increasing = false\n                is_decreasing = true\n            }\n        } else if is_decreasing {\n            if last_digit > current_digit {\n                return false\n            } else if last_digit < current_digit {\n                is_decreasing = false\n                is_increasing = true\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    var prev_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        if prev_digit != 0 {\n            if prev_digit != cur_digit {\n                return false\n            }\n        }\n        prev_digit = cur_digit\n        n /= 10\n    }\n    return true\n}\n",
    "    var last_digit, current_digit int\n    for n > 0 {\n        current_digit = n % 10\n        if last_digit != 0 {\n            if last_digit != current_digit {\n                return false\n            }\n        }\n        last_digit = current_digit\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return true\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return true\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    var last_digit, current_digit int\n    for n > 0 {\n        current_digit = n % 10\n        if last_digit != 0 && current_digit != 0 && last_digit != current_digit {\n            return false\n        }\n        last_digit = current_digit\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s) - 1; i++ {\n        if s[i-1] == s[i+1] {\n            return true\n        }\n    }\n    return false\n}\n",
    "    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    var last_digit int\n    var second_last_digit int\n    for n > 0 {\n        last_digit = n % 10\n        n = n / 10\n        second_last_digit = n % 10\n        if last_digit == second_last_digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n == 10000 {\n        return false\n    }\n    if n == 100000 {\n        return false\n    }\n    if n == 1000000 {\n        return false\n    }\n    if n == 10000000 {\n        return false\n    }\n    if n == 100000000 {\n        return false\n    }\n    if n == 1000000000 {\n        return false\n    }\n    if n == 10000000000 {\n        return false\n    }\n    if n == 100000000000 {\n        return false\n    }\n    if n == 1000000000000 {\n        return false\n    }\n    if n == 10000000000000 {\n        return false\n    }\n    if n == 100000000000000 {\n        return false\n    }\n    if n == 1000000000000000 {\n        return false\n    }\n    if n == 10000000000000000 {\n        return false\n    }\n    if n == 100000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000000000000 {\n        return false\n    }\n    if n ==",
    "    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    return false\n}\n",
    "    if n < 100 {\n        return false\n    }\n\n    var last_digit int\n    var current_digit int\n    var next_digit int\n\n    for n > 0 {\n        last_digit = current_digit\n        current_digit = next_digit\n        next_digit = n % 10\n\n        if last_digit == next_digit {\n            return true\n        }\n\n        n /= 10\n    }\n\n    return false\n}\n",
    "    if n < 100 {\n        return false\n    }\n    for n > 0 {\n        if n % 10 == (n / 10) % 10 {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}