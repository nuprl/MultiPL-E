{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "go_test.go",
  "prompt": "package remove_dirty_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(myString string, second_string string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Dirty_Chars(t *testing.T) {\n  candidate := remove_dirty_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"probasscurve\", \"pros\"), expected: \"bacuve\" },\n     { actual: candidate(\"digitalindia\", \"talent\"), expected: \"digiidi\" },\n     { actual: candidate(\"exoticmiles\", \"toxic\"), expected: \"emles\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var found bool\n    for _, char := range myString {\n        found = false\n        for _, dirty_char := range second_string {\n            if char == dirty_char {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = result + string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(myString); i++ {\n        if !strings.Contains(second_string, string(myString[i])) {\n            result += string(myString[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var myMap = make(map[string]int)\n    for _, char := range second_string {\n        myMap[string(char)] = 1\n    }\n    var result string\n    for _, char := range myString {\n        if _, ok := myMap[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.ContainsRune(second_string, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[rune]bool)\n\n    for _, char := range second_string {\n        dirty_chars[char] = true\n    }\n\n    for _, char := range myString {\n        if _, ok := dirty_chars[char]; !ok {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n",
    "    var myMap = make(map[string]int)\n    var result string\n\n    for _, char := range second_string {\n        myMap[string(char)] = 1\n    }\n\n    for _, char := range myString {\n        if _, ok := myMap[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(myString); i++ {\n        if !strings.Contains(second_string, string(myString[i])) {\n            result += string(myString[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var clean_string string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            clean_string += string(char)\n        }\n    }\n    return clean_string\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var clean_string string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            clean_string += string(char)\n        }\n    }\n    return clean_string\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[rune]bool)\n    for _, char := range second_string {\n        dirty_chars[char] = true\n    }\n    for _, char := range myString {\n        if _, ok := dirty_chars[char]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.ContainsRune(second_string, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var newString string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n",
    "    var result string\n    var dirty_chars = make(map[string]bool)\n    for _, char := range second_string {\n        dirty_chars[string(char)] = true\n    }\n    for _, char := range myString {\n        if _, ok := dirty_chars[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[string]bool)\n    for _, char := range second_string {\n        dirty_chars[string(char)] = true\n    }\n\n    for _, char := range myString {\n        if _, ok := dirty_chars[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.ContainsRune(second_string, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var char_map = make(map[rune]bool)\n    for _, char := range second_string {\n        char_map[char] = true\n    }\n\n    for _, char := range myString {\n        if _, ok := char_map[char]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[string]int)\n\n    for _, char := range second_string {\n        dirty_chars[string(char)] = 1\n    }\n\n    for _, char := range myString {\n        if _, ok := dirty_chars[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n",
    "    var newString string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var clean_string string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            clean_string += string(char)\n        }\n    }\n    return clean_string\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.ContainsRune(second_string, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[rune]bool)\n    for _, char := range second_string {\n        dirty_chars[char] = true\n    }\n    for _, char := range myString {\n        if !dirty_chars[char] {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[string]bool)\n    for _, char := range second_string {\n        dirty_chars[string(char)] = true\n    }\n    for _, char := range myString {\n        if _, ok := dirty_chars[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[rune]bool)\n    for _, char := range second_string {\n        dirty_chars[char] = true\n    }\n    for _, char := range myString {\n        if _, ok := dirty_chars[char]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    myMap := make(map[string]int)\n    for _, char := range second_string {\n        myMap[string(char)] = 1\n    }\n\n    var result string\n    for _, char := range myString {\n        if _, ok := myMap[string(char)]; !ok {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n",
    "    var newString string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n",
    "    var myMap = make(map[rune]int)\n    for _, char := range second_string {\n        myMap[char] = 1\n    }\n    var result string\n    for _, char := range myString {\n        if _, ok := myMap[char]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var second_string_map = make(map[rune]int)\n    for _, char := range second_string {\n        second_string_map[char] = 1\n    }\n    for _, char := range myString {\n        if _, ok := second_string_map[char]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[string]bool)\n\n    for _, char := range second_string {\n        dirty_chars[string(char)] = true\n    }\n\n    for _, char := range myString {\n        if !dirty_chars[string(char)] {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var clean_string string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            clean_string += string(char)\n        }\n    }\n    return clean_string\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.ContainsRune(second_string, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(myString); i++ {\n        if !contains(second_string, myString[i]) {\n            result += string(myString[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var dirty_chars = make(map[rune]bool)\n    for _, char := range second_string {\n        dirty_chars[char] = true\n    }\n    for _, char := range myString {\n        if _, ok := dirty_chars[char]; !ok {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.ContainsRune(second_string, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var new_string string\n    for _, char := range myString {\n        if !strings.Contains(second_string, string(char)) {\n            new_string += string(char)\n        }\n    }\n    return new_string\n}\n"
  ]
}