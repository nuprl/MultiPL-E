{
  "name": "mbpp_103_eulerian_num",
  "language": "go_test.go",
  "prompt": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp6u64z3vs_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp6u64z3vs_test.go:29: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp6u64z3vs_test.go:29: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if m == 0 {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    } else if n == 1 {\n        return m\n    } else if m == 1 {\n        return 1\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp34ot4e1r_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp34ot4e1r_test.go:36: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp34ot4e1r_test.go:36: expected '%!s(int=26)', got '%!s(int=1280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpfq0n9z3__test.go:34: expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpfq0n9z3__test.go:34: expected '%!s(int=11)', got '%!s(int=84)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpfq0n9z3__test.go:34: expected '%!s(int=26)', got '%!s(int=672)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + m) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp4ht8mdkb_test.go:40: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp4ht8mdkb_test.go:40: expected '%!s(int=26)', got '%!s(int=23375)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510568,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54721e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:9 +0x10a fp=0xc020160380 sp=0xc020160378 pc=0x50a70a\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0x85 fp=0xc0201603b8 sp=0xc020160380 pc=0x50a685\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0xb0 fp=0xc0201603f0 sp=0xc0201603b8 pc=0x50a6b0\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0x85 fp=0xc020160428 sp=0xc0201603f0 pc=0x50a685\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0xb0 fp=0xc020160460 sp=0xc020160428 pc=0x50a6b0\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0x85 fp=0xc020160498 sp=0xc020160460 pc=0x50a685\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0xb0 fp=0xc0201604d0 sp=0xc020160498 pc=0x50a6b0\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0x85 fp=0xc020160508 sp=0xc0201604d0 pc=0x50a685\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0xb0 fp=0xc020160540 sp=0xc020160508 pc=0x50a6b0\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0x85 fp=0xc020160578 sp=0xc020160540 pc=0x50a685\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0xb0 fp=0xc0201605b0 sp=0xc020160578 pc=0x50a6b0\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x0)\n\t/tmp/tmpl5tyy1zi_test.go:19 +0x85 fp=0xc02",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphp8qmaj0_test.go:37: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphp8qmaj0_test.go:37: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphp8qmaj0_test.go:37: expected '%!s(int=26)', got '%!s(int=432)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return n\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpu_jgvg2y_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpu_jgvg2y_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpu_jgvg2y_test.go:37: expected '%!s(int=26)', got '%!s(int=204)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m-1) + (n-m+1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=11)', got '%!s(int=65)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=26)', got '%!s(int=82)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n == m {\n        return 1\n    }\n    return eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp6gcp6_6p_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp6gcp6_6p_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp6gcp6_6p_test.go:37: expected '%!s(int=26)', got '%!s(int=43)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if m == 0 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpzgq3fp0a_test.go:34: expected '%!s(int=4)', got '%!s(int=11)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpzgq3fp0a_test.go:34: expected '%!s(int=11)', got '%!s(int=26)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpzgq3fp0a_test.go:34: expected '%!s(int=26)', got '%!s(int=302)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + m) * eulerian_num(n, m - 1) / m\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmeemsb53_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmeemsb53_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpobaje3l7_test.go:34: expected '%!s(int=4)', got '%!s(int=26)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpobaje3l7_test.go:34: expected '%!s(int=11)', got '%!s(int=57)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpobaje3l7_test.go:34: expected '%!s(int=26)', got '%!s(int=88234)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmb7z4jff_test.go:34: expected '%!s(int=4)', got '%!s(int=60)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmb7z4jff_test.go:34: expected '%!s(int=11)', got '%!s(int=360)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmb7z4jff_test.go:34: expected '%!s(int=26)', got '%!s(int=2232)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123771,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170370 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54621e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpzfdpewxf_test.go:9 +0xf4 fp=0xc020170380 sp=0xc020170378 pc=0x50a6f4\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x1)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x65 fp=0xc0201703b8 sp=0xc020170380 pc=0x50a665\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x90 fp=0xc0201703f0 sp=0xc0201703b8 pc=0x50a690\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x1)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x65 fp=0xc020170428 sp=0xc0201703f0 pc=0x50a665\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x90 fp=0xc020170460 sp=0xc020170428 pc=0x50a690\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x1)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170460 pc=0x50a665\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x90 fp=0xc0201704d0 sp=0xc020170498 pc=0x50a690\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x1)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x65 fp=0xc020170508 sp=0xc0201704d0 pc=0x50a665\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x90 fp=0xc020170540 sp=0xc020170508 pc=0x50a690\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x1)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x65 fp=0xc020170578 sp=0xc020170540 pc=0x50a665\ncommand-line-arguments_test.eulerian_num(0x3, 0x1, 0x0)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x90 fp=0xc0201705b0 sp=0xc020170578 pc=0x50a690\ncommand-line-arguments_test.eulerian_num(0x3, 0x2, 0x1)\n\t/tmp/tmpzfdpewxf_test.go:19 +0x65 fp=0xc020",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpcfyqg6lf_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpcfyqg6lf_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpcfyqg6lf_test.go:37: expected '%!s(int=26)', got '%!s(int=252)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n == m {\n        return 1\n    }\n    return eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp6gcp6_6p_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp6gcp6_6p_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp6gcp6_6p_test.go:37: expected '%!s(int=26)', got '%!s(int=43)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpx3b9zpth_test.go:34: expected '%!s(int=4)', got '%!s(int=11)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpx3b9zpth_test.go:34: expected '%!s(int=11)', got '%!s(int=26)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpx3b9zpth_test.go:34: expected '%!s(int=26)', got '%!s(int=302)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if m == 1 {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123771,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170370 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54621e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.eulerian_num(0x5, 0x1, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:9 +0xf9 fp=0xc020170380 sp=0xc020170378 pc=0x50a6f9\ncommand-line-arguments_test.eulerian_num(0x5, 0x2, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0x7c fp=0xc0201703b8 sp=0xc020170380 pc=0x50a67c\ncommand-line-arguments_test.eulerian_num(0x5, 0x3, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0x7c fp=0xc0201703f0 sp=0xc0201703b8 pc=0x50a67c\ncommand-line-arguments_test.eulerian_num(0x5, 0x2, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0xa7 fp=0xc020170428 sp=0xc0201703f0 pc=0x50a6a7\ncommand-line-arguments_test.eulerian_num(0x5, 0x3, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0x7c fp=0xc020170460 sp=0xc020170428 pc=0x50a67c\ncommand-line-arguments_test.eulerian_num(0x5, 0x2, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0xa7 fp=0xc020170498 sp=0xc020170460 pc=0x50a6a7\ncommand-line-arguments_test.eulerian_num(0x5, 0x3, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0x7c fp=0xc0201704d0 sp=0xc020170498 pc=0x50a67c\ncommand-line-arguments_test.eulerian_num(0x5, 0x2, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0xa7 fp=0xc020170508 sp=0xc0201704d0 pc=0x50a6a7\ncommand-line-arguments_test.eulerian_num(0x5, 0x3, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0x7c fp=0xc020170540 sp=0xc020170508 pc=0x50a67c\ncommand-line-arguments_test.eulerian_num(0x5, 0x2, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0xa7 fp=0xc020170578 sp=0xc020170540 pc=0x50a6a7\ncommand-line-arguments_test.eulerian_num(0x5, 0x3, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0x7c fp=0xc0201705b0 sp=0xc020170578 pc=0x50a67c\ncommand-line-arguments_test.eulerian_num(0x5, 0x2, 0x0)\n\t/tmp/tmp91a0_x5f_test.go:19 +0xa7 fp=0xc020",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) / n + m * eulerian_num(n - 1, m) / n\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpx894dmt2_test.go:34: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpx894dmt2_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpx894dmt2_test.go:34: expected '%!s(int=26)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m) + (n-m) * eulerian_num(n-1, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpltt6zu_i_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpltt6zu_i_test.go:34: expected '%!s(int=11)', got '%!s(int=178)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpltt6zu_i_test.go:34: expected '%!s(int=26)', got '%!s(int=85)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m-1) + (n-m)*eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp6cyagx5q_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp6cyagx5q_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp6cyagx5q_test.go:37: expected '%!s(int=26)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m-1) + (n-m+1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=11)', got '%!s(int=65)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=26)', got '%!s(int=82)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123771,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54621e, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6f5, 0xffffffffff6db6f5, 0x0)\n\t/tmp/tmp7uwvz9yp_test.go:9 +0xd9 fp=0xc020160380 sp=0xc020160378 pc=0x50a6d9\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6f6, 0xffffffffff6db6f5, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x65 fp=0xc0201603b8 sp=0xc020160380 pc=0x50a665\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6f7, 0xffffffffff6db6f6, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc0201603f0 sp=0xc0201603b8 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6f8, 0xffffffffff6db6f7, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc020160428 sp=0xc0201603f0 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6f9, 0xffffffffff6db6f8, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc020160460 sp=0xc020160428 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6fa, 0xffffffffff6db6f9, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc020160498 sp=0xc020160460 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6fb, 0xffffffffff6db6fa, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc0201604d0 sp=0xc020160498 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6fc, 0xffffffffff6db6fb, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc020160508 sp=0xc0201604d0 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6fd, 0xffffffffff6db6fc, 0x1)\n\t/tmp/tmp7uwvz9yp_test.go:16 +0x8b fp=0xc020160540 sp=0xc020160508 pc=0x50a68b\ncommand-line-arguments_test.eulerian_num(0xffffffffff6db6fe, 0xffffffffff6db6fd, 0x1)\n\t/tmp/tmp7uwv",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return n\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpu_jgvg2y_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpu_jgvg2y_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpu_jgvg2y_test.go:37: expected '%!s(int=26)', got '%!s(int=204)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpm4ma2m6d_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpm4ma2m6d_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpm4ma2m6d_test.go:37: expected '%!s(int=26)', got '%!s(int=1280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=26)', got '%!s(int=120)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if m == 0 {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=26)', got '%!s(int=120)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    return eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp47jbz2_6_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp47jbz2_6_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp47jbz2_6_test.go:34: expected '%!s(int=26)', got '%!s(int=117)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp8by057e__test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp8by057e__test.go:40: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp8by057e__test.go:40: expected '%!s(int=26)', got '%!s(int=567)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n-1, m) + m * eulerian_num(n, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpvz23o9ju_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpvz23o9ju_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return m\n    } else if m == 0 {\n        return 0\n    } else {\n        return (n-1)*eulerian_num(n-1, m) + (m-1)*eulerian_num(n, m-1)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmparoa_f_t_test.go:36: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmparoa_f_t_test.go:36: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmparoa_f_t_test.go:36: expected '%!s(int=26)', got '%!s(int=936)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpi7syxdp5_test.go:34: expected '%!s(int=4)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpi7syxdp5_test.go:34: expected '%!s(int=11)', got '%!s(int=120)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpi7syxdp5_test.go:34: expected '%!s(int=26)', got '%!s(int=720)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) / m\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp8i1se54s_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp8i1se54s_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp8i1se54s_test.go:34: expected '%!s(int=26)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if m == 0 {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    // Initialize the array.\n    a := make([][]int, n+1)\n    for i := 0; i <= n; i++ {\n        a[i] = make([]int, m+1)\n    }\n\n    // Fill the array.\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= m; j++ {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 {\n                a[i][j] = 0\n            } else if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i-1][j-1] + (i * a[i-1][j])\n            }\n        }\n    }\n\n    return a[n][m]\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp2r3ap3gb_test.go:49: expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp2r3ap3gb_test.go:49: expected '%!s(int=11)', got '%!s(int=41)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp2r3ap3gb_test.go:49: expected '%!s(int=26)', got '%!s(int=84)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if n == 2 {\n        return m * (m - 1) + 1\n    }\n    if n == 3 {\n        return m * (m - 1) * (m - 2) + m * 2 + 1\n    }\n    if n == 4 {\n        return m * (m - 1) * (m - 2) * (m - 3) + m * (m - 1) * 3 + m * 2 + 1\n    }\n    if n == 5 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) + m * (m - 1) * (m - 2) * 4 + m * (m - 1) * 3 + m * 2 + 1\n    }\n    if n == 6 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) + m * (m - 1) * (m - 2) * (m - 3) * 5 + m * (m - 1) * (m - 2) * 4 + m * (m - 1) * 3 + m * 2 + 1\n    }\n    if n == 7 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) + m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * 6 + m * (m - 1) * (m - 2) * (m - 3) * 5 + m * (m - 1) * (m - 2) * 4 + m * (m - 1) * 3 + m * 2 + 1\n    }\n    if n == 8 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) + m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprebs_sy2_test.go:35:136: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if n == 2 {\n        return m * (m - 1) + 1\n    }\n    return (m - n + 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n - 2, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpyggp9gla_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpyggp9gla_test.go:37: expected '%!s(int=11)', got '%!s(int=-1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpyggp9gla_test.go:37: expected '%!s(int=26)', got '%!s(int=79)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m) + (n-1) * eulerian_num(n-1, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp731pzc2j_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp731pzc2j_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp731pzc2j_test.go:37: expected '%!s(int=26)', got '%!s(int=82)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpj4jm40n__test.go:34: expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpj4jm40n__test.go:34: expected '%!s(int=26)', got '%!s(int=171)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpe6hr702a_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpe6hr702a_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpe6hr702a_test.go:34: expected '%!s(int=26)', got '%!s(int=619)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m-1) + (n-m+1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=11)', got '%!s(int=65)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpin8_mvsh_test.go:34: expected '%!s(int=26)', got '%!s(int=82)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpe6hr702a_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpe6hr702a_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpe6hr702a_test.go:34: expected '%!s(int=26)', got '%!s(int=619)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return m\n    } else if n > 1 {\n        return (m - n + 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n - 1, m - 1)\n    } else {\n        return 0\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp6n97cjz4_test.go:36: expected '%!s(int=4)', got '%!s(int=-12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp6n97cjz4_test.go:36: expected '%!s(int=11)', got '%!s(int=-26)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp6n97cjz4_test.go:36: expected '%!s(int=26)', got '%!s(int=-360)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp9d1kr8_r_test.go:34: expected '%!s(int=26)', got '%!s(int=120)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmptmaw8akw_test.go:34: expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmptmaw8akw_test.go:34: expected '%!s(int=11)', got '%!s(int=65)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmptmaw8akw_test.go:34: expected '%!s(int=26)', got '%!s(int=492)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return m\n    } else if m == 0 {\n        return 0\n    } else {\n        return (m - n + 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n, m - 1)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpr9kyeulo_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpr9kyeulo_test.go:36: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpr9kyeulo_test.go:36: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if n == 2 {\n        return m * (m - 1) + 1\n    }\n    if n == 3 {\n        return m * (m - 1) * (m - 2) + m * 2\n    }\n    if n == 4 {\n        return m * (m - 1) * (m - 2) * (m - 3) + m * (m - 1) * 3 + 1\n    }\n    return 0\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpbp72o5ap_test.go:43: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpbp72o5ap_test.go:43: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpbp72o5ap_test.go:43: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if m == 0 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp2i8yg25p_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp2i8yg25p_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp2i8yg25p_test.go:34: expected '%!s(int=26)', got '%!s(int=114)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpj0cdakq7_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpj0cdakq7_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpj0cdakq7_test.go:37: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpm4ma2m6d_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpm4ma2m6d_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpm4ma2m6d_test.go:37: expected '%!s(int=26)', got '%!s(int=1280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp3dwe0eqh_test.go:34: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if n == m {\n        return 1\n    }\n    return eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphyxsngl1_test.go:40: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphyxsngl1_test.go:40: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphyxsngl1_test.go:40: expected '%!s(int=26)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (m - n + 1) * eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpd_ezws3n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpd_ezws3n_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpd_ezws3n_test.go:37: expected '%!s(int=26)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if n < 0 || m < 0 {\n        return 0\n    } else {\n        return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp7u1wxcst_test.go:34: expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7u1wxcst_test.go:34: expected '%!s(int=11)', got '%!s(int=84)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7u1wxcst_test.go:34: expected '%!s(int=26)', got '%!s(int=672)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp8by057e__test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp8by057e__test.go:40: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp8by057e__test.go:40: expected '%!s(int=26)', got '%!s(int=567)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 || n < m {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpnku8uq4l_test.go:34: expected '%!s(int=4)', got '%!s(int=11)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpnku8uq4l_test.go:34: expected '%!s(int=11)', got '%!s(int=26)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpnku8uq4l_test.go:34: expected '%!s(int=26)', got '%!s(int=302)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n\n    if n == 1 {\n        return m + 1\n    }\n\n    if m == 1 {\n        return n + 1\n    }\n\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmph5sdt0_e_test.go:40: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmph5sdt0_e_test.go:40: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    return eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp47jbz2_6_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp47jbz2_6_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp47jbz2_6_test.go:34: expected '%!s(int=26)', got '%!s(int=117)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpi7syxdp5_test.go:34: expected '%!s(int=4)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpi7syxdp5_test.go:34: expected '%!s(int=11)', got '%!s(int=120)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpi7syxdp5_test.go:34: expected '%!s(int=26)', got '%!s(int=720)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpqe9e0j4b_test.go:37: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpj4jm40n__test.go:34: expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpj4jm40n__test.go:34: expected '%!s(int=26)', got '%!s(int=171)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpj0cdakq7_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpj0cdakq7_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpj0cdakq7_test.go:37: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if m == 0 {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpvfegu44i_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 0 {\n        return 0\n    }\n    return (m - n + 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpu6_gyunh_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpu6_gyunh_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpu6_gyunh_test.go:37: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp09wqemp2_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp09wqemp2_test.go:37: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp09wqemp2_test.go:37: expected '%!s(int=26)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (m + 1) * eulerian_num(n - 1, m) + (n - 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpii0ar9t1_test.go:37: expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpii0ar9t1_test.go:37: expected '%!s(int=11)', got '%!s(int=20)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpii0ar9t1_test.go:37: expected '%!s(int=26)', got '%!s(int=2720)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    } else if n < m {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpwd6sulqn_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpwd6sulqn_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpwd6sulqn_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp0ewbu6e8_test.go:37: expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp0ewbu6e8_test.go:37: expected '%!s(int=26)', got '%!s(int=171)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    return eulerian_num(n-1, m) + m * eulerian_num(n-1, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp7101097f_test.go:34: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7101097f_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7101097f_test.go:34: expected '%!s(int=26)', got '%!s(int=73)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n-1, m) + m * eulerian_num(n, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpvz23o9ju_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpvz23o9ju_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 && m == 0 {\n        return 1\n    } else if n == 0 || m == 0 {\n        return 0\n    } else {\n        return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp0v0fg8rg_test.go:34: expected '%!s(int=11)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp0v0fg8rg_test.go:34: expected '%!s(int=26)', got '%!s(int=288)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmphugr_zmd_test.go:37: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp70u06t8y_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp70u06t8y_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp70u06t8y_test.go:37: expected '%!s(int=26)', got '%!s(int=69)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp3tljo7u2_test.go:40: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp3tljo7u2_test.go:40: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if n == 2 {\n        return (m + 1) * (m + 2) / 2\n    }\n    if n == 3 {\n        return (m + 1) * (m + 2) * (m + 3) / 6\n    }\n    if n == 4 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) / 24\n    }\n    if n == 5 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) * (m + 5) / 120\n    }\n    if n == 6 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) * (m + 5) * (m + 6) / 720\n    }\n    if n == 7 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) * (m + 5) * (m + 6) * (m + 7) / 5040\n    }\n    if n == 8 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) * (m + 5) * (m + 6) * (m + 7) * (m + 8) / 40320\n    }\n    if n == 9 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) * (m + 5) * (m + 6) * (m + 7) * (m + 8) * (m + 9) / 362880\n    }\n    if n == 10 {\n        return (m + 1) * (m + 2) * (m + 3) * (m + 4) * (m + 5) * (m + 6) * (m + 7) * (m + 8) * (m + 9) * (m + 10) / 3628800\n    }\n    if n == 11 {\n        return (m + 1) * (m + 2) * (m + 3\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123771,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2y6dvocn_test.go:44:42: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    if m > n {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpg4amt68t_test.go:37: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg4amt68t_test.go:37: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg4amt68t_test.go:37: expected '%!s(int=26)', got '%!s(int=513)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n-1, m) + (n-m) * eulerian_num(n-1, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp9yelb0ab_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp9yelb0ab_test.go:34: expected '%!s(int=26)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    } else if n == 1 {\n        return m\n    } else {\n        return (m - n + 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n - 1, m - 1)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpe_0rpqb6_test.go:34: expected '%!s(int=4)', got '%!s(int=-12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpe_0rpqb6_test.go:34: expected '%!s(int=11)', got '%!s(int=-26)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpe_0rpqb6_test.go:34: expected '%!s(int=26)', got '%!s(int=-360)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 || m == 1 {\n        return n\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpb512mw1e_test.go:37: expected '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpb512mw1e_test.go:37: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpb512mw1e_test.go:37: expected '%!s(int=26)', got '%!s(int=21)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (m+1)*eulerian_num(n-1, m) + (n-m)*eulerian_num(n-1, m-1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmp349n03et_test.go:37: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp349n03et_test.go:37: expected '%!s(int=11)', got '%!s(int=27)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp349n03et_test.go:37: expected '%!s(int=26)', got '%!s(int=98)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpik33_jx0_test.go:37: expected '%!s(int=26)', got '%!s(int=280)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if n == 2 {\n        return m * (m - 1) + 1\n    }\n    if n == 3 {\n        return m * (m - 1) * (m - 2) + m * 2\n    }\n    if n == 4 {\n        return m * (m - 1) * (m - 2) * (m - 3) + m * (m - 1) * 3 + 1\n    }\n    if n == 5 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) + m * (m - 1) * (m - 2) * 4 + m * 6 + 1\n    }\n    if n == 6 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) + m * (m - 1) * (m - 2) * (m - 3) * 5 + m * (m - 1) * 15 + m * 20 + 1\n    }\n    if n == 7 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) + m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * 6 + m * (m - 1) * (m - 2) * 21 + m * (m - 1) * 35 + m * 70 + 1\n    }\n    if n == 8 {\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) + m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * 7 + m * (m - 1) * (m - 2) * (m - 3) * 28 + m * (m - 1) * (m - 2) * 56 + m * (m - 1) * 126 +\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123771,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpji0v3br9_test.go:36:6: expected '(', found TestEulerian_Num\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=4)', got '%!s(int=19)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=11)', got '%!s(int=42)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpmuw25d7a_test.go:34: expected '%!s(int=26)', got '%!s(int=644)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - 1) * (eulerian_num(n, m - 1) + eulerian_num(n - 1, m - 1))\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpr_w8dnls_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpr_w8dnls_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpr_w8dnls_test.go:37: expected '%!s(int=26)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (m + 1) * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpqe7tttaw_test.go:37: expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpqe7tttaw_test.go:37: expected '%!s(int=11)', got '%!s(int=20)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpqe7tttaw_test.go:37: expected '%!s(int=26)', got '%!s(int=1192)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg10we4q3_test.go:37: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpftr0czzp_test.go:37: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpftr0czzp_test.go:37: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpftr0czzp_test.go:37: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return 1\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpr8uzawox_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpr8uzawox_test.go:40: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpr8uzawox_test.go:40: expected '%!s(int=26)', got '%!s(int=132)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp7z9yd6dc_test.go:37: expected '%!s(int=26)', got '%!s(int=56)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    } else if n < m {\n        return 0\n    } else {\n        return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n    }\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpd7xo5tnd_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpd7xo5tnd_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpd7xo5tnd_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmp3tljo7u2_test.go:40: expected '%!s(int=11)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmp3tljo7u2_test.go:40: expected '%!s(int=26)', got '%!s(int=18106)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpohgx3p9h_test.go:34: expected '%!s(int=26)', got '%!s(int=1884)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if n < 0 {\n        return 0\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpcma_4_zv_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpcma_4_zv_test.go:37: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpcma_4_zv_test.go:37: expected '%!s(int=26)', got '%!s(int=72)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    if m > n {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123772,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpg4amt68t_test.go:37: expected '%!s(int=4)', got '%!s(int=12)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpg4amt68t_test.go:37: expected '%!s(int=11)', got '%!s(int=24)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpg4amt68t_test.go:37: expected '%!s(int=26)', got '%!s(int=513)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmpos6p0qqi_test.go:34: expected '%!s(int=26)', got '%!s(int=5141)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m)\n}\n\nfunc TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123765,
      "stdout": "--- FAIL: TestEulerian_Num (0.00s)\n    --- FAIL: TestEulerian_Num/test_num__0 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestEulerian_Num/test_num__1 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestEulerian_Num/test_num__2 (0.00s)\n        tmps1xgw6_t_test.go:34: expected '%!s(int=26)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}