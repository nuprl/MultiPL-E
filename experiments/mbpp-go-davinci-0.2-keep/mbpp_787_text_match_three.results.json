{
  "name": "mbpp_787_text_match_three",
  "language": "go_test.go",
  "prompt": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // for i := 1; i < 4; i++ {\n    //     if text[i] != 'b' {\n    //         return false\n    //     }\n    // }\n    // return true\n    return len(text) == 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b'\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp57aoycyn_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp57aoycyn_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0:1] == \"a\" && text[1:4] == \"bbb\" {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpyhtu74ww_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpozya6ykr_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpozya6ykr_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5wkgy5uw_test.go:83:6: expected '(', found TestText_Match_Three\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0:1] == \"a\" && text[1:4] == \"bbb\" {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpyhtu74ww_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5wkgy5uw_test.go:83:6: expected '(', found TestText_Match_Three\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // return len(text) == 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b'\n\n    return len(text) == 4 && text[:1] == \"a\" && text[1:4] == \"bbb\"\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpxvf2kyd5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpxvf2kyd5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0:1] == \"a\" {\n        return text[1:4] == \"bbb\"\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmptmpl_1kl_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 {\n        if text[0] == 'a' {\n            if text[1] == 'b' {\n                if text[2] == 'b' {\n                    if text[3] == 'b' {\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp4fb_9ozb_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // return len(text) == 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b'\n\n    return len(text) == 4 && text[:1] == \"a\" && text[1:4] == \"bbb\"\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpxvf2kyd5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpxvf2kyd5_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n    return len(text) == 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b'\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmphxdwms0u_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmphxdwms0u_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0:1] == \"a\" {\n        return text[1:4] == \"bbb\"\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmptmpl_1kl_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) < 4 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < 4; i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmprvff0_g7_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0:1] == \"a\" {\n        return text[1:4] == \"bbb\"\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmptmpl_1kl_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpozya6ykr_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpozya6ykr_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5wkgy5uw_test.go:83:6: expected '(', found TestText_Match_Three\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // If the length of the text is less than 4, it can't match.\n    if len(text) < 4 {\n        return false\n    }\n\n    // If the first character is not an 'a', it can't match.\n    if text[0] != 'a' {\n        return false\n    }\n\n    // If the fourth character is not a 'b', it can't match.\n    if text[3] != 'b' {\n        return false\n    }\n\n    // If the second and third characters are not 'b', it can't match.\n    if text[1] != 'b' || text[2] != 'b' {\n        return false\n    }\n\n    // If we get here, it must match.\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp6nxw0n15_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) < 4 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < 4; i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmprvff0_g7_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // for i := 1; i < 4; i++ {\n    //     if text[i] != 'b' {\n    //         return false\n    //     }\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' || text[2] != 'b' || text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' || text[2] != 'b' || text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    //\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx8ydzi7y_test.go:80:6: expected '(', found TestText_Match_Three\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpyfy862vi_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpnkenxqpa_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509859,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__0 (0.00s)\n        tmpozya6ykr_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Three/test_num__1 (0.00s)\n        tmpozya6ykr_test.go:30: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpmnrvrjto_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmp7lz2krx2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509858,
      "stdout": "--- FAIL: TestText_Match_Three (0.00s)\n    --- FAIL: TestText_Match_Three/test_num__2 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Three/test_num__3 (0.00s)\n        tmpcrqabksa_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}