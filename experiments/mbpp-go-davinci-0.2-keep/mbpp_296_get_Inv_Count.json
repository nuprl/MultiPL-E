{
  "name": "mbpp_296_get_Inv_Count",
  "language": "go_test.go",
  "prompt": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count inversions in an array.\nfunc get_Inv_Count(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    n := len(arr)\n    if n <= 1 {\n        return 0\n    }\n    mid := n / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge_and_count(left, right)\n    return left_inv + right_inv + split_inv\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv_count := get_Inv_Count(left)\n    right_inv_count := get_Inv_Count(right)\n    split_inv_count := merge_and_count(left, right)\n    return left_inv_count + right_inv_count + split_inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n    count := left_count + right_count\n    i, j := 0, 0\n    for k := 0; k < len(arr); k++ {\n        if i < len(left) && j < len(right) {\n            if left[i] <= right[j] {\n                arr[k] = left[i]\n                i++\n            } else {\n                arr[k] = right[j]\n                j++\n                count += len(left) - i\n            }\n        } else if i < len(left) {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := get_Inv_Count(arr[:mid])\n    right := get_Inv_Count(arr[mid:])\n    return left + right + merge(arr[:mid], arr[mid:])\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    return get_Inv_Count_helper(arr, 0, len(arr)-1)\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge_and_count_split_inv(left, right)\n\n    return left_inv + right_inv + split_inv\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_count := get_Inv_Count(left)\n    right_count := get_Inv_Count(right)\n\n    count := left_count + right_count\n\n    i := 0\n    j := 0\n    for k := 0; k < len(arr); k++ {\n        if i >= len(left) {\n            arr[k] = right[j]\n            j++\n        } else if j >= len(right) {\n            arr[k] = left[i]\n            i++\n        } else if left[i] < right[j] {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n            count += len(left) - i\n        }\n    }\n\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    merge_inv := merge_and_count(left, right)\n    return left_inv + right_inv + merge_inv\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := 0\n    i, j := 0, 0\n    for k := 0; k < len(arr); k++ {\n        if i < len(left) && j < len(right) {\n            if left[i] < right[j] {\n                arr[k] = left[i]\n                i++\n            } else {\n                arr[k] = right[j]\n                j++\n                split_inv += len(left) - i\n            }\n        } else if i < len(left) {\n            arr[k] = left[i]\n            i++\n        } else {\n            arr[k] = right[j]\n            j++\n        }\n    }\n    return left_inv + right_inv + split_inv\n}\n",
    "    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge_and_count(left, right)\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) <= 1 {\n        return 0\n    }\n\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n\n    return left_inv + right_inv + merge_and_count(left, right)\n}\n",
    "    if len(arr) <= 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge_and_count(left, right)\n    return left_inv + right_inv + split_inv\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := get_Inv_Count(arr[:mid])\n    right := get_Inv_Count(arr[mid:])\n    return left + right + merge_and_count(arr[:mid], arr[mid:])\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    return get_Inv_Count(left) + get_Inv_Count(right) + merge(left, right)\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    n := len(arr)\n    if n == 1 {\n        return 0\n    }\n    mid := n / 2\n    left_arr := arr[:mid]\n    right_arr := arr[mid:]\n    left_inv_count := get_Inv_Count(left_arr)\n    right_inv_count := get_Inv_Count(right_arr)\n    split_inv_count := merge_and_count(left_arr, right_arr, arr)\n    return left_inv_count + right_inv_count + split_inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    inv_count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    if len(arr) == 1 {\n        return 0\n    }\n    mid := len(arr) / 2\n    left := arr[:mid]\n    right := arr[mid:]\n    left_inv := get_Inv_Count(left)\n    right_inv := get_Inv_Count(right)\n    split_inv := merge(left, right)\n    return left_inv + right_inv + split_inv\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var inv_count int\n    inv_count = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var inv_count int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                inv_count++\n            }\n        }\n    }\n    return inv_count\n}\n",
    "    var count int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n"
  ]
}