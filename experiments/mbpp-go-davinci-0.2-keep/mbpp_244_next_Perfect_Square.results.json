{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "go_test.go",
  "prompt": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    if N < 0 {\n        return -1\n    }\n    if N == 0 {\n        return 1\n    }\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return -1\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i < N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510016,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpc63vxzf9_test.go:32: expected '%!s(int=16)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    if N < 0 {\n        return -1\n    }\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return -1\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.022s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    if N <= 0 {\n        return 0\n    }\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int = 1\n    for i*i <= N {\n        i++\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return -1\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    for i := 1; i < N; i++ {\n        if i*i > N {\n            return i*i\n        }\n    }\n    return N\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    var i int\n    for i = 1; i <= N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    if N < 0 {\n        return -1\n    }\n    if N == 0 {\n        return 1\n    }\n    for i := 1; i <= N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return -1\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    if N < 0 {\n        return -1\n    }\n    if N == 0 {\n        return 1\n    }\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return -1\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i * i < N; i++ {\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpuvw7t00o_test.go:32: expected '%!s(int=16)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    i := 1\n    for i * i <= N {\n        i++\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i * i <= N; i++ {\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    return (N + 1) * (N + 1)\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpi4799acb_test.go:28: expected '%!s(int=36)', got '%!s(int=1296)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpi4799acb_test.go:28: expected '%!s(int=9)', got '%!s(int=49)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpi4799acb_test.go:28: expected '%!s(int=16)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    var i int\n    for i = 1; i*i < N; i++ {}\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpuhbkw7qh_test.go:30: expected '%!s(int=16)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i * i <= N; i++ {\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    if N < 0 {\n        return -1\n    }\n    if N == 0 {\n        return 1\n    }\n    if N == 1 {\n        return 4\n    }\n    for i := 2; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return -1\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // +++your code here+++\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpdwi9g39y_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int = 1\n    for {\n        if i * i > N {\n            return i * i\n        }\n        i++\n    }\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    var i int\n    for i = 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int = 1\n    for {\n        if i*i > N {\n            return i*i\n        }\n        i++\n    }\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    if N <= 0 {\n        return 0\n    }\n    for i := 1; i <= N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return N\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmph_m0fok0_test.go:29: expected '%!s(int=36)', got '%!s(int=35)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmph_m0fok0_test.go:29: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmph_m0fok0_test.go:29: expected '%!s(int=16)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i * i <= N; i++ {\n    }\n    return i * i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    var i int\n    for i = 1; i*i <= N; i++ {\n    }\n    return i*i\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    for i := 1; i < N; i++ {\n        if i * i > N {\n            return i * i\n        }\n    }\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510017,
      "stdout": "--- FAIL: TestNext_Perfect_Square (0.00s)\n    --- FAIL: TestNext_Perfect_Square/test_num__0 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__1 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestNext_Perfect_Square/test_num__2 (0.00s)\n        tmpya2tima4_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}