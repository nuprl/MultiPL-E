{
  "name": "mbpp_229_re_arrange_array",
  "language": "go_test.go",
  "prompt": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] > 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        } else {\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpdi_yx3hb_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpdi_yx3hb_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpdi_yx3hb_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                arr[j] = arr[j-1]\n            }\n            arr[0] = -arr[0]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpivpif0c0_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=-1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpivpif0c0_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-12) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpivpif0c0_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-10) %!s(int=10) %!s(int=-10) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    if n == 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n        if j == n {\n            return arr\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpzz7d18at_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpzz7d18at_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpzz7d18at_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    // var result []int\n    // var negative []int\n    // var positive []int\n    // for _, v := range arr {\n    //     if v < 0 {\n    //         negative = append(negative, v)\n    //     } else {\n    //         positive = append(positive, v)\n    //     }\n    // }\n    // result = append(result, negative...)\n    // result = append(result, positive...)\n    // return result\n    var result []int\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            result = append(result, arr[i])\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] >= 0 {\n            result = append(result, arr[i])\n        }\n    }\n    return result\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp9wfejr61_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    if n == 0 {\n        return arr\n    }\n    if n > len(arr) {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 && arr[j] > 0 {\n            i++\n            j--\n        } else if arr[i] < 0 && arr[j] < 0 {\n            i++\n        } else if arr[i] > 0 && arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpm6q2ob4a_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpm6q2ob4a_test.go:53: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpm6q2ob4a_test.go:53: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpfo41zhka_test.go:46: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpfo41zhka_test.go:46: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpfo41zhka_test.go:46: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    i := 0\n    j := 0\n    for j < n {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n        j++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpzjpbs2ue_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpzjpbs2ue_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpzjpbs2ue_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpq7fn68xa_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpq7fn68xa_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpq7fn68xa_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpb5_uptiv_test.go:69: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpb5_uptiv_test.go:69: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpb5_uptiv_test.go:69: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n                j++\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp9w7lfaf6_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp9w7lfaf6_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp9w7lfaf6_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n > 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            return append([]int{arr[1]}, re_arrange_array(arr[0:1], 1)...)\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            return append([]int{arr[1]}, re_arrange_array(arr[0:1], 1)...)\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000014468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000014468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001a148, 0x1, 0x8, 0x1, 0x40d8fb, 0x5fa3c0, 0xd0)\n\t/tmp/tmp0ub8khs3_test.go:17 +0x885\ncommand-line-arguments_test.re_arrange_array(0xc00001a148, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc000094650)\n\t/tmp/tmp0ub8khs3_test.go:42 +0x365\ncommand-line-arguments_test.re_arrange_array(0xc00001a140, 0x9, 0x9, 0x9, 0x0, 0xc0000181f0, 0x4cd164)\n\t/tmp/tmp0ub8khs3_test.go:39 +0x48a\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmp0ub8khs3_test.go:58 +0xc2\ntesting.tRunner(0xc000001380, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpvkxwnr5a_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            j := i\n            for j > 0 && arr[j-1] > 0 {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpxajjofl8_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpqvc6ybyz_test.go:48: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpqvc6ybyz_test.go:48: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpqvc6ybyz_test.go:48: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpedqcn26g_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpedqcn26g_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpedqcn26g_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpvitkwaex_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpvitkwaex_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpvitkwaex_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] >= 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] < 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) < n {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpc2n51ubz_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpc2n51ubz_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpc2n51ubz_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-1}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], -1}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{-1, arr[1]}\n        } else {\n            return []int{-1, -1}\n        }\n    }\n    if n > 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return append([]int{arr[0], -1}, re_arrange_array(arr[1:], n-2)...)\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return append([]int{-1, arr[1]}, re_arrange_array(arr[2:], n-2)...)\n        } else {\n            return append([]int{-1, -1}, re_arrange_array(arr[2:], n-2)...)\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1u80d25x_test.go:60: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-3) %!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-7) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1u80d25x_test.go:60: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-1) %!s(int=-14) %!s(int=-26) %!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1u80d25x_test.go:60: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=-1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp4l0q1vzx_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp4l0q1vzx_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp4l0q1vzx_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j; i < n; i++ {\n        if arr[i] >= 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp08b_6gvu_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp08b_6gvu_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp08b_6gvu_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n            continue\n        }\n        if arr[j] > 0 {\n            j--\n            continue\n        }\n        arr[i], arr[j] = arr[j], arr[i]\n        i++\n        j--\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp8jwfe69l_test.go:49: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp8jwfe69l_test.go:49: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp8jwfe69l_test.go:49: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n\n    if i == n {\n        return arr\n    }\n\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpk51d2tfa_test.go:51: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpk51d2tfa_test.go:51: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpk51d2tfa_test.go:51: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[n-1] < 0 {\n        arr[n-1], arr[n-2] = arr[n-2], arr[n-1]\n        return re_arrange_array(arr, n-1)\n    } else {\n        return re_arrange_array(arr, n-1)\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmppsdxoytv_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-7) %!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmppsdxoytv_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=12) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmppsdxoytv_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 1 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp7smjcc4z_test.go:46: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp7smjcc4z_test.go:46: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp7smjcc4z_test.go:46: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i, j := 0, n-1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpe1me4fh9_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpe1me4fh9_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpe1me4fh9_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i - 1\n            for j >= 0 && arr[j] > 0 {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpip_qp8dv_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i - 1\n            for j >= 0 && arr[j] >= 0 {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmppcw6tnor_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpio1rcq0e_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpio1rcq0e_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpio1rcq0e_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    if n ==\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122895,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsofmju7k_test.go:51:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpzey9ysxc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp4l0q1vzx_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp4l0q1vzx_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp4l0q1vzx_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpq7fn68xa_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpq7fn68xa_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpq7fn68xa_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    // i := 0\n    // j := n - 1\n    // for i < j {\n    //     for arr[i] < 0 && i < j {\n    //         i++\n    //     }\n    //     for arr[j] >= 0 && i < j {\n    //         j--\n    //     }\n    //     if i < j {\n    //         arr[i], arr[j] = arr[j], arr[i]\n    //     }\n    // }\n    // return arr\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp2h6_czqi_test.go:56: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp2h6_czqi_test.go:56: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp2h6_czqi_test.go:56: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-1}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            return []int{-1, -1}\n        }\n    }\n    if n > 2 {\n        if arr[0] < 0 {\n            return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n        } else {\n            return append([]int{-1}, re_arrange_array(arr[1:], n-1)...)\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpv960pz0u_test.go:59: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-3) %!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-7) %!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpv960pz0u_test.go:59: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-1) %!s(int=-14) %!s(int=-26) %!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpv960pz0u_test.go:59: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc000156040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpad4zsvo7_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc000156038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156030, 0x3, 0x3, 0x3, 0x2b04de805c00, 0x20300000000000, 0x2b04de9fafff)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b04deb2c668)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b04b7e9b5b8, 0xf)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156000, 0x9, 0x9, 0x9, 0x0, 0xc00012c078, 0x4cd164)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000102600)\n\t/tmp/tmpad4zsvo7_test.go:34 +0xc2\ntesting.tRunner(0xc000102600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                break\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsrbngc_4_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpsrbngc_4_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpsrbngc_4_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpynue9fb4_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpynue9fb4_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpynue9fb4_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    // i := 0\n    // j := n - 1\n    // for i < j {\n    //     if arr[i] < 0 {\n    //         i++\n    //     } else {\n    //         arr[i], arr[j] = arr[j], arr[i]\n    //         j--\n    //     }\n    // }\n    // return arr\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < j && arr[i] < 0 {\n            i++\n        }\n        for i < j && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp9uqf95xq_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp9uqf95xq_test.go:53: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp9uqf95xq_test.go:53: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpk0z8d4f2_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpk0z8d4f2_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpk0z8d4f2_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpahwvlic2_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    i, j := 0, n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpj_kpm41a_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpj_kpm41a_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpj_kpm41a_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] > 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpw0iytjre_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpw0iytjre_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpw0iytjre_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp_e3zi4a8_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], -arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], -arr[0]}\n        } else {\n            return []int{-arr[0], -arr[1]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], -arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], -arr[1]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], -arr[1], -arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], -arr[0]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], -arr[0], -arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], -arr[0], -arr[1]}\n        } else {\n            return []int{-arr[0], -arr[1], -arr[\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122897,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptywejaqr_test.go:48:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    if n == 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc000156040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpad4zsvo7_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc000156038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156030, 0x3, 0x3, 0x3, 0x2b04de805c00, 0x20300000000000, 0x2b04de9fafff)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b04deb2c668)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b04b7e9b5b8, 0xf)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156000, 0x9, 0x9, 0x9, 0x0, 0xc00012c078, 0x4cd164)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000102600)\n\t/tmp/tmpad4zsvo7_test.go:34 +0xc2\ntesting.tRunner(0xc000102600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    var j int\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc000156040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpad4zsvo7_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc000156038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156030, 0x3, 0x3, 0x3, 0x2b04de805c00, 0x20300000000000, 0x2b04de9fafff)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b04deb2c668)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b04b7e9b5b8, 0xf)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156000, 0x9, 0x9, 0x9, 0x0, 0xc00012c078, 0x4cd164)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000102600)\n\t/tmp/tmpad4zsvo7_test.go:34 +0xc2\ntesting.tRunner(0xc000102600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 {\n            if arr[1] < 0 {\n                return arr\n            } else {\n                return []int{arr[0], -arr[1]}\n            }\n        } else {\n            return []int{-arr[0], arr[1]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append([]int{-arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp6d9795hy_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6) %!s(int=-7) %!s(int=-8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp6d9795hy_test.go:53: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-12) %!s(int=-14) %!s(int=-26) %!s(int=-13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp6d9795hy_test.go:53: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-10) %!s(int=-24) %!s(int=-36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=-85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpyl24w5_m_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpyl24w5_m_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpyl24w5_m_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpf6om2cdw_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpf6om2cdw_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpf6om2cdw_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpwa104bhd_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpwa104bhd_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpwa104bhd_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122899,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpxea0dp3l_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=9) %!s(int=8) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpxea0dp3l_test.go:53: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-14) %!s(int=-26) %!s(int=15) %!s(int=13) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpxea0dp3l_test.go:53: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85) %!s(int=36) %!s(int=24) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpvkxwnr5a_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122900,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp284_ee5f_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            j := i\n            for j > 0 && arr[j-1] > 0 {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpxajjofl8_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                break\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpw67kfvsb_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpw67kfvsb_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpw67kfvsb_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 {\n            if arr[1] < 0 {\n                return arr\n            } else {\n                return []int{arr[0], arr[1]}\n            }\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpj4nexmfi_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=9) %!s(int=8) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpj4nexmfi_test.go:53: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-14) %!s(int=-26) %!s(int=15) %!s(int=13) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpj4nexmfi_test.go:53: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85) %!s(int=36) %!s(int=24) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpndmh6ykd_test.go:48: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpndmh6ykd_test.go:48: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpndmh6ykd_test.go:48: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := 0\n    for i < n {\n        if arr[i] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            j++\n        }\n        i++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpedqcn26g_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpedqcn26g_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpedqcn26g_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmparl6h6sr_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp3prt2br6_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp3prt2br6_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp3prt2br6_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    var start, end int\n    for start = 0; start < n; start++ {\n        if arr[start] >= 0 {\n            break\n        }\n    }\n    for end = start + 1; end < n; end++ {\n        if arr[end] < 0 {\n            arr[start], arr[end] = arr[end], arr[start]\n            start++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if arr[n-1] < 0 {\n        return re_arrange_array(arr, n-1)\n    }\n    if arr[n-1] >= 0 {\n        arr[n-1], arr[0] = arr[0], arr[n-1]\n        return re_arrange_array(arr, n-1)\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp8x0_ui48_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=-7) %!s(int=9) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp8x0_ui48_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=13) %!s(int=-14) %!s(int=-26) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp8x0_ui48_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpwa104bhd_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpwa104bhd_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpwa104bhd_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < j && arr[i] < 0 {\n            i++\n        }\n        for i < j && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpo1hh_ieh_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpo1hh_ieh_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpo1hh_ieh_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmptn6zyjwl_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmptn6zyjwl_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmptn6zyjwl_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp6g_acf2u_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp6g_acf2u_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp6g_acf2u_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                break\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpdx9efp6t_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpdx9efp6t_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpdx9efp6t_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] > 0 {\n            break\n        }\n    }\n\n    if i == n {\n        return arr\n    }\n\n    var j int\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] > 0 && arr[1] > 0 {\n            return []int{arr[1], arr[0]}\n        }\n        if arr[0] < 0 && arr[1] > 0 {\n            return arr\n        }\n        if arr[0] > 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        }\n        if arr[0] > 0 && arr[1] > 0 && arr[2] > 0 {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n        if arr[0] < 0 && arr[1] > 0 && arr[2] > 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        }\n        if arr[0] > 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        }\n        if arr[0] > 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        }\n        if arr[0] < 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        }\n        if arr[0] < 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        }\n        if arr[0] > 0 && arr[1] < 0 && arr[2]\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122900,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpz741v8wq_test.go:57:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i - 1\n            for j >= 0 && arr[j] > 0 {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpip_qp8dv_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j] = arr[j-1]\n            }\n            arr[j] = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpng7525s9_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpng7525s9_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpng7525s9_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-42) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpy2p0595w_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp8vbuu9kb_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp8vbuu9kb_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp8vbuu9kb_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] >= 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] >= 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpyye80uy8_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpyye80uy8_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpyye80uy8_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < j && arr[i] < 0 {\n            i++\n        }\n        for i < j && arr[j] > 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpge40ywrd_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpge40ywrd_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpge40ywrd_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j] = arr[j-1]\n            }\n            arr[j] = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpng7525s9_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpng7525s9_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpng7525s9_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-42) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    var temp int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                temp = arr[j]\n                arr[j] = arr[j-1]\n                arr[j-1] = temp\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpboamrzl1_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122902,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp7j1mabgm_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp7j1mabgm_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp7j1mabgm_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc000156040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpad4zsvo7_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc000156038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156030, 0x3, 0x3, 0x3, 0x2b04de805c00, 0x20300000000000, 0x2b04de9fafff)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b04deb2c668)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b04b7e9b5b8, 0xf)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156000, 0x9, 0x9, 0x9, 0x0, 0xc00012c078, 0x4cd164)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000102600)\n\t/tmp/tmpad4zsvo7_test.go:34 +0xc2\ntesting.tRunner(0xc000102600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i + 1\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmppbo1r2w__test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmppbo1r2w__test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmppbo1r2w__test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp71t0p4q2_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpn_p121vl_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < j && arr[i] < 0 {\n            i++\n        }\n        for i < j && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp9w7koepo_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp9w7koepo_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp9w7koepo_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 0 {\n        return arr\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{arr[0]}\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] > 0 {\n            return []int{arr[0], arr[1]}\n        }\n        if arr[0] > 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        }\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] > 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpqljivr2d_test.go:59: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpqljivr2d_test.go:59: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpqljivr2d_test.go:59: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc000156040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpad4zsvo7_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc000156038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156030, 0x3, 0x3, 0x3, 0x2b04de805c00, 0x20300000000000, 0x2b04de9fafff)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b04deb2c668)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b04b7e9b5b8, 0xf)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156000, 0x9, 0x9, 0x9, 0x0, 0xc00012c078, 0x4cd164)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000102600)\n\t/tmp/tmpad4zsvo7_test.go:34 +0xc2\ntesting.tRunner(0xc000102600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n - 1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n - 1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001ce040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpyx6aahd3_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001ce038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpyx6aahd3_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001ce030, 0x3, 0x3, 0x3, 0x2b95d8edb800, 0x20300000000000, 0x2b95d90ccfff)\n\t/tmp/tmpyx6aahd3_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001ce028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpyx6aahd3_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001ce020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b95d92008f0)\n\t/tmp/tmpyx6aahd3_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001ce018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpyx6aahd3_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001ce010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b95b256da68, 0xf)\n\t/tmp/tmpyx6aahd3_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001ce008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpyx6aahd3_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001ce000, 0x9, 0x9, 0x9, 0x0, 0xc0001a6078, 0x4cd164)\n\t/tmp/tmpyx6aahd3_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000182600)\n\t/tmp/tmpyx6aahd3_test.go:34 +0xc2\ntesting.tRunner(0xc000182600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    return arr\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122902,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp54t1epzs_test.go:52:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpt_wjcdcn_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpju8qok73_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpju8qok73_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpju8qok73_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), []int{arr[0]}...)\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp0r8qam7m_test.go:53: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=9) %!s(int=8) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp0r8qam7m_test.go:53: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-14) %!s(int=-26) %!s(int=15) %!s(int=13) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp0r8qam7m_test.go:53: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85) %!s(int=36) %!s(int=24) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122901,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpw6q5ppiq_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpjvb2up5r_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here.\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] > 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp_qd2yedn_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpavvz3txd_test.go:46: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpavvz3txd_test.go:46: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpavvz3txd_test.go:46: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmprlc7czxw_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc000156040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpad4zsvo7_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc000156038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156030, 0x3, 0x3, 0x3, 0x2b04de805c00, 0x20300000000000, 0x2b04de9fafff)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2b04deb2c668)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b04b7e9b5b8, 0xf)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc000156008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmpad4zsvo7_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc000156000, 0x9, 0x9, 0x9, 0x0, 0xc00012c078, 0x4cd164)\n\t/tmp/tmpad4zsvo7_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000102600)\n\t/tmp/tmpad4zsvo7_test.go:34 +0xc2\ntesting.tRunner(0xc000102600, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpij_fi1xg_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i+1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpihv_u9v5_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpihv_u9v5_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpihv_u9v5_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xx4tcn3_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n\n    left := 0\n    right := n - 1\n\n    for left < right {\n        for left < right && arr[left] < 0 {\n            left++\n        }\n\n        for left < right && arr[right] > 0 {\n            right--\n        }\n\n        if left < right {\n            arr[left], arr[right] = arr[right], arr[left]\n            left++\n            right--\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpdmww39vl_test.go:51: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpdmww39vl_test.go:51: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpdmww39vl_test.go:51: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j > 0 && arr[j-1] > 0 {\n                arr[j] = arr[j-1]\n                j--\n            }\n            arr[j] = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1xle0s8j_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=6) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1xle0s8j_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1xle0s8j_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=36) %!s(int=36) %!s(int=36) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    if n == 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    var i, j int = 0, n-1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpincn2sbn_test.go:49: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpincn2sbn_test.go:49: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpincn2sbn_test.go:49: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Your code goes here\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpu3rsecm8_test.go:29: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpu3rsecm8_test.go:29: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpu3rsecm8_test.go:29: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var left, right int = 0, n - 1\n    for left < right {\n        for left < right && arr[left] < 0 {\n            left++\n        }\n        for left < right && arr[right] > 0 {\n            right--\n        }\n        if left < right {\n            arr[left], arr[right] = arr[right], arr[left]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpmfe9u95k_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpmfe9u95k_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpmfe9u95k_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpa0c2kofh_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122898,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplx7bpmdc_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            while j > 0 && arr[j-1] > 0 {\n                arr[j] = arr[j-1]\n                j--\n            }\n            arr[j] = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp39mb7qe3_test.go:14:19: expected ';', found j\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    if n ==\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122895,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsofmju7k_test.go:51:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpis3_z0mo_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpis3_z0mo_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpis3_z0mo_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        }\n        return []int{arr[1], arr[0]}\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    }\n    return append(re_arrange_array(arr[1:], n-1), arr[0])\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122903,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001c180, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpa_n5jm9x_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc00001c178, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpa_n5jm9x_test.go:22 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c170, 0x3, 0x3, 0x3, 0x0, 0x0, 0xc0000924b0)\n\t/tmp/tmpa_n5jm9x_test.go:20 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc00001c168, 0x4, 0x4, 0x4, 0x841, 0x0, 0x58a7bf)\n\t/tmp/tmpa_n5jm9x_test.go:22 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c160, 0x5, 0x5, 0x5, 0x5fa340, 0x609a20, 0xc000000007)\n\t/tmp/tmpa_n5jm9x_test.go:22 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c158, 0x6, 0x6, 0x6, 0x0, 0x58a7bf, 0x3b)\n\t/tmp/tmpa_n5jm9x_test.go:22 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c150, 0x7, 0x7, 0x7, 0x40d8fb, 0x5fa340, 0xd0)\n\t/tmp/tmpa_n5jm9x_test.go:20 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc00001c148, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc000092650)\n\t/tmp/tmpa_n5jm9x_test.go:22 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c140, 0x9, 0x9, 0x9, 0x0, 0xc00001a1f0, 0x4cd164)\n\t/tmp/tmpa_n5jm9x_test.go:20 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpa_n5jm9x_test.go:32 +0xc2\ntesting.tRunner(0xc000001380, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517267,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpgy_moeq1_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}