{
  "name": "mbpp_305_start_withp",
  "language": "go_test.go",
  "prompt": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n            if len(result) == 2 {\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpg699d_z6_test.go:37: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpg699d_z6_test.go:37: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpg699d_z6_test.go:37: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n        if len(result) == 2 {\n            break\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    result := make([]interface{}, 0)\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpclykapu4_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpclykapu4_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpclykapu4_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n        if len(result) == 2 {\n            break\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if string(word[0]) == \"p\" {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123283,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpbbb5dxp8_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpbbb5dxp8_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpbbb5dxp8_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n        if len(result) == 2 {\n            break\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmp74nb2p24_test.go:37: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n            if len(result) == 2 {\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpg699d_z6_test.go:37: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpg699d_z6_test.go:37: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpg699d_z6_test.go:37: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if len(word) > 0 && word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123283,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpdz3j5a2x_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpdz3j5a2x_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpdz3j5a2x_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n    var result []interface{}\n    for _, word := range words {\n        if word[0] == 'p' {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n\nfunc TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510310,
      "stdout": "--- FAIL: TestStart_Withp (0.00s)\n    --- FAIL: TestStart_Withp/test_num__0 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python PHP]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__1 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Python Programming]', got '[]'\n    --- FAIL: TestStart_Withp/test_num__2 (0.00s)\n        tmpstosqkki_test.go:34: expected '[Pqrst Pqr]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}