{
  "name": "mbpp_776_count_vowels",
  "language": "go_test.go",
  "prompt": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && contains(vowels, string(test_str[i+1])) {\n            count++\n        } else if i == len(test_str)-1 && contains(vowels, string(test_str[i-1])) {\n            count++\n        } else if contains(vowels, string(test_str[i-1])) && contains(vowels, string(test_str[i+1])) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test",
    "    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_",
    "    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||",
    "    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'",
    "    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test",
    "    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] || vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'",
    "    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test",
    "    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'",
    "    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // TODO: implement\n    return 0\n}\n"
  ]
}