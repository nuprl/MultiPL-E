{
  "name": "mbpp_574_surfacearea_cylinder",
  "language": "go_test.go",
  "prompt": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return float64(2 * 3.14 * r * (r + h))\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return float64(2 * 3.14 * r * h)\n}\n",
    "    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h)\n}\n",
    "    // surface area of a cylinder = 2\u03c0rh + 2\u03c0r^2\n    return float64(2 * r * h * 3.14) + float64(2 * r * r * 3.14)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n",
    "    return 2 * 3.14 * float64(r) * float64(h)\n}\n"
  ]
}