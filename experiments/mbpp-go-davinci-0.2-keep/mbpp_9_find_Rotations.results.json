{
  "name": "mbpp_9_find_Rotations",
  "language": "go_test.go",
  "prompt": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            continue\n        }\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpir4nk4kp_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpir4nk4kp_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpir4nk4kp_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            break\n        }\n    }\n    if i == len(str) {\n        return 1\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpoktqb9vm_test.go:44: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpoktqb9vm_test.go:44: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    if len(str) == 2 {\n        if str[0] == str[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    var min int\n    for i := 0; i < len(str); i++ {\n        if i == 0 {\n            min = i\n        } else {\n            if str[i] < str[min] {\n                min = i\n            }\n        }\n    }\n    if min == 0 {\n        return 1\n    } else {\n        return min + 1\n    }\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp91h9lehg_test.go:55: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) <= 1 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmptusuju34_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmptusuju34_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmptusuju34_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            break\n        }\n    }\n    if i == len(str) {\n        return 1\n    }\n    var j int\n    for j = 0; j < len(str); j++ {\n        if str[j] != str[len(str) - 1] {\n            break\n        }\n    }\n    if j == len(str) {\n        return 1\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        return i\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Write - Your - Code\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmps3e029l3_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement the function\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpl6y8bd4j_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpl6y8bd4j_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpl6y8bd4j_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '0' {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6x7ynv3p_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6x7ynv3p_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6x7ynv3p_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpzymb1n6v_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpzymb1n6v_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpzymb1n6v_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    str += str\n    for i := 1; i < len(str); i++ {\n        if str[i:] + str[:i] == str[:len(str)/2] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp_kfyb7mh_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp_kfyb7mh_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp_kfyb7mh_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var count int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    if count == len(str) {\n        return 1\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp9fu1yyzk_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp9fu1yyzk_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var i int = 0\n    var j int = 0\n    var len int = len(str)\n    for i = 0; i < len; i++ {\n        if str[i] == 'a' {\n            break\n        }\n    }\n    for j = i; j < len; j++ {\n        if str[j] != 'a' {\n            break\n        }\n    }\n    if j == len {\n        rotations = 0\n    } else {\n        rotations = len - j\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmppr8rfss9_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmppr8rfss9_test.go:47: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmppr8rfss9_test.go:47: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i:=0; i<len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpt0vkhtez_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpt0vkhtez_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpt0vkhtez_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] == ' ' {\n            break\n        }\n    }\n    if i == len(str) {\n        return 0\n    }\n\n    var j int\n    for j = i + 1; j < len(str); j++ {\n        if str[j] != ' ' {\n            break\n        }\n    }\n    if j == len(str) {\n        return 0\n    }\n\n    var k int\n    for k = j + 1; k < len(str); k++ {\n        if str[k] == ' ' {\n            break\n        }\n    }\n    if k == len(str) {\n        return 0\n    }\n\n    if str[i:j] == str[k:] {\n        return j - i\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpinwf_516_test.go:65: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpinwf_516_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpinwf_516_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            continue\n        }\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn9suhxsb_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn9suhxsb_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn9suhxsb_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) <= 1 {\n        return 0\n    }\n\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp__0u98_j_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp__0u98_j_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp__0u98_j_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str) - i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    min_rotations := 0\n    for i := 0; i < len(str); i++ {\n        if str[i] < str[min_rotations] {\n            min_rotations = i\n        }\n    }\n    return min_rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmprmagbhox_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmprmagbhox_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmprmagbhox_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpxzxm5qbw_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpxzxm5qbw_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpxzxm5qbw_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp2w98z1k__test.go:34: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    str += str\n    for i := 1; i < len(str); i++ {\n        if str[i:] == str[:len(str)-i] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpzb0do62c_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpzb0do62c_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpzb0do62c_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp2w98z1k__test.go:34: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    if len(str) == 2 {\n        if str[0] == str[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str)-i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpuvfcearf_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmph_kt00mo_test.go:42: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmph_kt00mo_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmph_kt00mo_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    str_len := len(str)\n    if str_len == 0 {\n        return 0\n    }\n    if str_len == 1 {\n        return 1\n    }\n    if str_len == 2 {\n        if str[0] == str[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    for i := 0; i < str_len; i++ {\n        if str[i] == str[0] {\n            if str[i:] + str[:i] == str {\n                return i\n            }\n        }\n    }\n    return str_len\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpc74al0fb_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpc74al0fb_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[i:] + str[:i] == str {\n                return i\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpuf9ic2c5_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpuf9ic2c5_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpuf9ic2c5_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp8vh2z2mx_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp8vh2z2mx_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp8vh2z2mx_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            rotations++\n        } else {\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp3udtj7pl_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp3udtj7pl_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp3udtj7pl_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int\n    for i := 0; i < len(str); i++ {\n        if str[i:] + str[:i] == str {\n            rotations = i\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpx7avkzpq_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpx7avkzpq_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpx7avkzpq_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var count int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    if count == len(str) {\n        return 1\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp9fu1yyzk_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp9fu1yyzk_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == 'X' {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmphgwz2tzw_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmphgwz2tzw_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmphgwz2tzw_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var str_len int = len(str)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var str_arr []string = make([]string, str_len)\n    var str_arr_copy []string = make([]string, str_len)\n    var str_arr_copy_2 []string = make([]string, str_len)\n    var str_arr_copy_3 []string = make([]string, str_len)\n    var str_arr_copy_4 []string = make([]string, str_len)\n    var str_arr_copy_5 []string = make([]string, str_len)\n    var str_arr_copy_6 []string = make([]string, str_len)\n    var str_arr_copy_7 []string = make([]string, str_len)\n    var str_arr_copy_8 []string = make([]string, str_len)\n    var str_arr_copy_9 []string = make([]string, str_len)\n    var str_arr_copy_10 []string = make([]string, str_len)\n    var str_arr_copy_11 []string = make([]string, str_len)\n    var str_arr_copy_12 []string = make([]string, str_len)\n    var str_arr_copy_13 []string = make([]string, str_len)\n    var str_arr_copy_14 []string = make([]string, str_len)\n    var str_arr_copy_15 []string = make([]string, str_len)\n    var str_arr_copy_16 []string = make([]string, str_len)\n    var str_arr_copy_17 []string = make([]string, str_len)\n    var str_arr_copy_18 []string = make([]string, str_len)\n    var str_arr_copy_19 []string = make([]string, str_len)\n    var str_arr_copy_20 []string = make([]string, str_len)\n    var str_arr_copy_21 []string = make(\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122832,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1zhfztdb_test.go:37:6: expected '(', found TestFind_Rotations\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpxj53k696_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i - 1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpyj8bwssk_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpyj8bwssk_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpyj8bwssk_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var rotations int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            rotations++\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6l4vodzr_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6l4vodzr_test.go:41: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6l4vodzr_test.go:41: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement this function\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpvfhqropr_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpvfhqropr_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpvfhqropr_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    var str_len int = len(str)\n    var str_arr []string = strings.Split(str, \"\")\n    var str_arr_copy []string = make([]string, str_len)\n    copy(str_arr_copy, str_arr)\n    for i := 0; i < str_len; i++ {\n        str_arr_copy = append(str_arr_copy[1:], str_arr_copy[0])\n        if strings.Join(str_arr_copy, \"\") == str {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122832,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6r5zbg92_test.go:13:28: undefined: strings\n/tmp/tmp6r5zbg92_test.go:18:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) < 2 {\n        return 0\n    }\n\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpo9dh4_4n_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpo9dh4_4n_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpo9dh4_4n_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpzb0do62c_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpzb0do62c_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpzb0do62c_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    var min int = 0\n    var min_str string = str\n    for i := 0; i < len(str); i++ {\n        str = str[1:] + str[0:1]\n        if str < min_str {\n            min_str = str\n            min = i + 1\n        }\n    }\n    return min\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp01ea33lj_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp01ea33lj_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp01ea33lj_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    var count int = 0\n    var i int = 0\n    for i < len(str) {\n        if str[i] == str[0] {\n            break\n        }\n        count++\n        i++\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpr_7p5bm3_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpr_7p5bm3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpr_7p5bm3_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            rotations = i\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp68kmws3m_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp68kmws3m_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp68kmws3m_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp2w98z1k__test.go:34: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var min int = 0\n    var max int = len(str) - 1\n    var mid int = (min + max) / 2\n    for min < max {\n        if str[mid] < str[max] {\n            max = mid\n        } else {\n            min = mid + 1\n        }\n        mid = (min + max) / 2\n    }\n    return min\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpk6sdhw_k_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpk6sdhw_k_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpk6sdhw_k_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            continue\n        }\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpch_nwqro_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpch_nwqro_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpch_nwqro_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    var j int\n    var k int\n    var n int\n    var count int\n    var min int\n    n = len(str)\n    min = n\n    for i = 0; i < n; i++ {\n        count = 0\n        j = i\n        k = 0\n        for {\n            if str[j] != str[k] {\n                count++\n            }\n            j++\n            k++\n            if j == n {\n                j = 0\n            }\n            if k == n {\n                k = 0\n            }\n            if j == i {\n                break\n            }\n        }\n        if count < min {\n            min = count\n        }\n    }\n    return min\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpqmt4x4p5_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpqmt4x4p5_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpqmt4x4p5_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i:] + str[:i] == str {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp86r0lrb2_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp86r0lrb2_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp86r0lrb2_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    if len(str) == 2 {\n        if str[0] == str[1] {\n            return 1\n        }\n        return 2\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            continue\n        }\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp0mugi4hn_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp0mugi4hn_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        return i\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    // fmt.Println(str)\n    var rotations int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            rotations++\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpb_0bqi4m_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpb_0bqi4m_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpb_0bqi4m_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpf4gpj7yg_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpf4gpj7yg_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpf4gpj7yg_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        return i\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmprbknooru_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp7q7bgsv8_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[0:i] == str[len(str)-i:len(str)] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpipq2qqls_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpipq2qqls_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpipq2qqls_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str)-i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var min int = len(str)\n    for i := 0; i < len(str); i++ {\n        var count int = 0\n        for j := 0; j < len(str); j++ {\n            if str[j] != str[(i+j)%len(str)] {\n                count++\n            }\n        }\n        if count < min {\n            min = count\n        }\n    }\n    return min\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmppq_43g76_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmppq_43g76_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmppq_43g76_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0\n    var fff int = 0\n    var ggg int = 0\n    var hhh int = 0\n    var iii int = 0\n    var jjj int = 0\n    var kkk int = 0\n    var lll int = 0\n    var mmm int = 0\n    var nnn int = 0\n    var ooo int = 0\n    var ppp int = 0\n    var qqq int = 0\n    var rrr int = 0\n    var sss int = 0\n    var ttt int = 0\n    var uuu int = 0\n    var vvv int = 0\n    var www\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphbi_tfd9_test.go:77:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            rotations = i\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp2u7dxfa0_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp2u7dxfa0_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp2u7dxfa0_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            rotations++\n        } else {\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpv5ii7lwm_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpv5ii7lwm_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpv5ii7lwm_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp7q7bgsv8_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str)-i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122834,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx4cxudno_test.go:100:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var count int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    if count == len(str) {\n        return count\n    }\n    var min int = len(str)\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            if i + 1 < min {\n                min = i + 1\n            }\n        }\n    }\n    return min\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp1xfs0mt0_test.go:54: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp1xfs0mt0_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp1xfs0mt0_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str)-i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[i:] + str[:i] == str {\n                return i\n            }\n        }\n    }\n\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpjsrnxcka_test.go:34: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpjsrnxcka_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpjsrnxcka_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    if len(str) == 2 {\n        if str[0] == str[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            break\n        }\n    }\n    if i == len(str) {\n        return 1\n    }\n    var j int\n    for j = 0; j < len(str); j++ {\n        if str[j] != str[len(str)-1] {\n            break\n        }\n    }\n    if j == len(str) {\n        return 1\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        return i\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var min int = len(str)\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            if i < min {\n                min = i\n            }\n        }\n    }\n    return min\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmppwb1mlrw_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    str_len := len(str)\n    for i := 0; i < str_len; i++ {\n        if str[i] == str[0] {\n            if str[i:] + str[:i] == str {\n                return i\n            }\n        }\n    }\n    return str_len\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpplgsio4b_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpplgsio4b_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpplgsio4b_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpu28f6t8__test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpu28f6t8__test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpu28f6t8__test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpx0zg4esg_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var a int = 0\n    var b int = 0\n    var c int = 0\n    var d int = 0\n    var e int = 0\n    var f int = 0\n    var g int = 0\n    var h int = 0\n    var i1 int = 0\n    var j1 int = 0\n    var k1 int = 0\n    var l1 int = 0\n    var m1 int = 0\n    var n1 int = 0\n    var o1 int = 0\n    var p1 int = 0\n    var q1 int = 0\n    var r1 int = 0\n    var s1 int = 0\n    var t1 int = 0\n    var u1 int = 0\n    var v1 int = 0\n    var w1 int = 0\n    var x1 int = 0\n    var y1 int = 0\n    var z1 int = 0\n    var a1 int = 0\n    var b1 int = 0\n    var c1 int = 0\n    var d1 int = 0\n    var e1 int = 0\n    var f1 int = 0\n    var g1 int = 0\n    var h1 int = 0\n    var i2 int = 0\n    var j2 int = 0\n    var k2 int = 0\n    var l2 int = 0\n    var m2 int = 0\n    var n2 int = 0\n    var o2 int = 0\n    var p2 int = 0\n    var q2 int = 0\n    var r2 int = 0\n    var s2 int = 0\n    var t2 int = 0\n    var u2 int = 0\n    var v2 int = 0\n   \nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122835,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp21ox5sts_test.go:78:6: expected '(', found TestFind_Rotations\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var str_len int = len(str)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var tmp_str string = str\n    var tmp_str_len int = str_len\n\n    for i = 0; i < str_len; i++ {\n        tmp_str = str[i:str_len] + str[0:i]\n        for j = 0; j < tmp_str_len; j++ {\n            if tmp_str[j] != str[j] {\n                break\n            }\n        }\n        if j == tmp_str_len {\n            rotations = i\n            break\n        }\n    }\n\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122835,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxbqjwjm1_test.go:14:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Write - Your - Code\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        return i\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpyw8hvgn6_test.go:40: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122835,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphgr5gijf_test.go:101:6: expected '(', found TestFind_Rotations\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str)-i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpy9ck9ztd_test.go:38: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Write - Your - Code\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmps3e029l3_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            continue\n        }\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpeiry3mw1_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpeiry3mw1_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpeiry3mw1_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    var count int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    if count == len(str) {\n        return count\n    }\n    var str1 string = str[count:]\n    var str2 string = str[:count]\n    var str3 string = str1 + str2\n    var str4 string = str2 + str1\n    if str3 == str4 {\n        return count\n    }\n    return find_Rotations(str3)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0318 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x547227, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\nruntime.rawstringtmp(0xc0201e0450, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:126 +0xad fp=0xc0201e0328 sp=0xc0201e0320 pc=0x4518cd\nruntime.concatstrings(0xc0201e0450, 0xc0201e0408, 0x2, 0x2, 0xc0201e05b1, 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:50 +0xc5 fp=0xc0201e03c0 sp=0xc0201e0328 pc=0x4512e5\nruntime.concatstring2(0xc0201e0450, 0xc0201e0501, 0x1, 0xc0201e0500, 0x1, 0x1, 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:59 +0x47 fp=0xc0201e0400 sp=0xc0201e03c0 pc=0x451567\ncommand-line-arguments_test.find_Rotations(0xc0201e0500, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:29 +0xcd fp=0xc0201e04b0 sp=0xc0201e0400 pc=0x50a6cd\ncommand-line-arguments_test.find_Rotations(0xc0201e05b0, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:34 +0x14c fp=0xc0201e0560 sp=0xc0201e04b0 pc=0x50a74c\ncommand-line-arguments_test.find_Rotations(0xc0201e0660, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:34 +0x14c fp=0xc0201e0610 sp=0xc0201e0560 pc=0x50a74c\ncommand-line-arguments_test.find_Rotations(0xc0201e0710, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:34 +0x14c fp=0xc0201e06c0 sp=0xc0201e0610 pc=0x50a74c\ncommand-line-arguments_test.find_Rotations(0xc0201e07c0, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:34 +0x14c fp=0xc0201e0770 sp=0xc0201e06c0 pc=0x50a74c\ncommand-line-arguments_test.find_Rotations(0xc0201e0870, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:34 +0x14c fp=0xc0201e0820 sp=0xc0201e0770 pc=0x50a74c\ncommand-line-arguments_test.find_Rotations(0xc0201e0920, 0x2, 0x2)\n\t/tmp/tmpu3yce2r2_test.go:34 +0x14c fp=0xc0201e08d0 sp=0xc0201e0820",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i:] + str[:i] == str {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpxofwj0ia_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpxofwj0ia_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpxofwj0ia_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return len(str) - count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpsdbva7e3_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[i:] + str[:i] == str {\n                return i\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpd1je1nwn_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpd1je1nwn_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpd1je1nwn_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] == '1' {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmprzmuuv48_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        if str[i] > str[0] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp8v8rhlsy_test.go:42: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp8v8rhlsy_test.go:42: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp8v8rhlsy_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpn7am5zp3_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[:i] == str[len(str)-i:] {\n                return i\n            }\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == 'A' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpao90ph7i_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpao90ph7i_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpao90ph7i_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            continue\n        }\n        if str[i] < str[0] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpbxb65fzp_test.go:42: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == 'x' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpkoovkie0_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpkoovkie0_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpkoovkie0_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp4kn3l4ec_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var i int = 0\n    var j int = 0\n    var length int = len(str)\n    for i = 0; i < length; i++ {\n        j = i\n        for j < length {\n            if str[j] != str[j%length] {\n                break\n            }\n            j++\n        }\n        if j == length {\n            rotations = i\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp3003g385_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp3003g385_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp3003g385_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2hzd9mko_test.go:97:6: expected '(', found TestFind_Rotations\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            rotations++\n        } else {\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp3udtj7pl_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp3udtj7pl_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp3udtj7pl_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            rotations++\n        } else {\n            break\n        }\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpagllrxtb_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpagllrxtb_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpagllrxtb_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpl78rtyyt_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var count int\n    for i := 0; i < len(str); i++ {\n        if str[i] == '1' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmptux2leom_test.go:34: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Write - Your - Code\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp7q7bgsv8_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i - 1] {\n            return i\n        }\n    }\n    return len(str)\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp7auh206f_test.go:40: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var i int\n    for i = 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpxj53k696_test.go:37: expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n\n    min_rotations := 0\n    min_str := str\n\n    for i := 0; i < len(str); i++ {\n        str = str[1:] + str[0:1]\n        if str < min_str {\n            min_str = str\n            min_rotations = i + 1\n        }\n    }\n\n    return min_rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpp_8yvzsi_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpp_8yvzsi_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpp_8yvzsi_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 1; i < len(str); i++ {\n        if str[i] < str[i-1] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp911glmdc_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122833,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpf4gpj7yg_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpf4gpj7yg_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpf4gpj7yg_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6mi_3oju_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    var rotations int = 0\n    var str_len int = len(str)\n    var i int = 0\n    for i < str_len {\n        if str[i] == str[0] {\n            break\n        }\n        rotations++\n        i++\n    }\n    return rotations\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmp6oa8fd86_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmp6oa8fd86_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmp6oa8fd86_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    if len(str) == 1 {\n        return 1\n    }\n\n    var i int\n    for i = 0; i < len(str); i++ {\n        if str[i] != str[0] {\n            break\n        }\n    }\n    if i == len(str) {\n        return 1\n    }\n\n    var j int\n    for j = i; j < len(str); j++ {\n        if str[j] == str[0] {\n            break\n        }\n    }\n    if j == len(str) {\n        return len(str) - i\n    }\n\n    return len(str) - j\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpb3hyy8ks_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpb3hyy8ks_test.go:55: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    for i := 0; i < len(str); i++ {\n        if str[i] == str[0] {\n            if str[i:] + str[:i] == str {\n                return i\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122836,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpd1je1nwn_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpd1je1nwn_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpd1je1nwn_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpg3yjhv_4_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: Write - Your - Code\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510190,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpc3u05uhd_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    if len(str) == 0 {\n        return 0\n    }\n    str += str\n    for i := 1; i < len(str); i++ {\n        if str[i:] == str[:len(str)-i] {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122837,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122829,
      "stdout": "--- FAIL: TestFind_Rotations (0.00s)\n    --- FAIL: TestFind_Rotations/test_num__0 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__1 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Rotations/test_num__2 (0.00s)\n        tmpz6s8jsca_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}