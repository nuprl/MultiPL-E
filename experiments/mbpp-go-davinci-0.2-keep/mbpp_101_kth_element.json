{
  "name": "mbpp_101_kth_element",
  "language": "go_test.go",
  "prompt": "package kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the kth element in the given array using 1-based indexing.\nfunc kth_element(arr []int, k int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestKth_Element(t *testing.T) {\n  candidate := kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 3, 5, 7, 19}, 2), expected: 3 },\n     { actual: candidate([]int{17, 24, 8, 23}, 3), expected: 8 },\n     { actual: candidate([]int{16, 21, 25, 36, 4}, 4), expected: 36 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n    for _, v := range arr[1:] {\n        if v < pivot {\n            left = append(left, v)\n        } else {\n            right = append(right, v)\n        }\n    }\n    if k <= len(left) {\n        return kth_element(left, k)\n    } else if k == len(left) + 1 {\n        return pivot\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n    for _, v := range arr[1:] {\n        if v < pivot {\n            left = append(left, v)\n        } else {\n            right = append(right, v)\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n\n    return quick_select(arr, 0, len(arr) - 1, k)\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return kth_element_helper(arr, k, 0, len(arr) - 1)\n}\n",
    "    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n    for _, v := range arr[1:] {\n        if v < pivot {\n            left = append(left, v)\n        } else {\n            right = append(right, v)\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if k > len(arr) {\n        return 0\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k > len(arr) {\n        return 0\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n\n    if k > len(arr) {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if k > len(arr) {\n        return -1\n    }\n    if k == 1 {\n        return arr[0]\n    }\n    if k == len(arr) {\n        return arr[len(arr) - 1]\n    }\n    return kth_element(arr[1:], k - 1)\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n\n    if k > len(arr) {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    pivot := arr[len(arr) / 2]\n    left := []int{}\n    right := []int{}\n    for _, v := range arr {\n        if v < pivot {\n            left = append(left, v)\n        } else if v > pivot {\n            right = append(right, v)\n        }\n    }\n\n    if len(left) >= k {\n        return kth_element(left, k)\n    } else if len(left) + 1 == k {\n        return pivot\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return 0\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n\n    for _, v := range arr[1:] {\n        if v < pivot {\n            left = append(left, v)\n        } else {\n            right = append(right, v)\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n        }\n    }\n    if k <= len(left) {\n        return kth_element(left, k)\n    } else if k == len(left) + 1 {\n        return pivot\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return 0\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n\n    for _, v := range arr[1:] {\n        if v <= pivot {\n            left = append(left, v)\n        } else {\n            right = append(right, v)\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    return arr[k - 1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n\n    return arr[k - 1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    pivot := arr[0]\n    left := make([]int, 0)\n    right := make([]int, 0)\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n        }\n    }\n\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) > k - 1 {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    pivot := arr[0]\n    left := []int{}\n    right := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < pivot {\n            left = append(left, arr[i])\n        } else {\n            right = append(right, arr[i])\n        }\n    }\n    if len(left) == k - 1 {\n        return pivot\n    } else if len(left) >= k {\n        return kth_element(left, k)\n    } else {\n        return kth_element(right, k - len(left) - 1)\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if k > len(arr) {\n        return -1\n    }\n    if k == 1 {\n        return arr[0]\n    }\n    return kth_element(arr[1:], k - 1)\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return kth_element_helper(arr, k, 0, len(arr) - 1)\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k <= 0 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    if len(arr) < k {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    return arr[k-1]\n}\n",
    "    return kth_element_helper(arr, k, 0, len(arr) - 1)\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    if k > len(arr) {\n        return -1\n    }\n    return arr[k - 1]\n}\n",
    "    if k < 1 || k > len(arr) {\n        return -1\n    }\n    return arr[k-1]\n}\n"
  ]
}