{
  "name": "mbpp_769_Diff",
  "language": "go_test.go",
  "prompt": "package Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to get the difference between two lists.\nfunc Diff(li1 []int, li2 []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestDiff(t *testing.T) {\n  candidate := Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 15, 20, 25, 30, 35, 40}, []int{25, 40, 35}), expected: []int{10, 20, 30, 15} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 1}), expected: []int{2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3}, []int{6, 7, 1}), expected: []int{2, 3, 6, 7} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    li3 := []int{}\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            diff = append(diff, v)\n        }\n    }\n    return diff\n}\n",
    "    var result []int\n    for _, v := range li1 {\n        if !InList(li2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    li := []int{}\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            diff = append(diff, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            diff = append(diff, v)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var result []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var result []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        var flag bool\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                flag = true\n                break\n            }\n        }\n        if !flag {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !contains(li2, v) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    li3 := []int{}\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(li2, i) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        var found bool\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !Contains(li2, i) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !Contains(li1, i) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var res []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !InSlice(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !InSlice(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var res []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            res = append(res, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !Contains(li2, i) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !Contains(li1, i) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            diff = append(diff, v)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var diff []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            diff = append(diff, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            diff = append(diff, v)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !Contains(li2, i) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !Contains(li1, i) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !InList(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !InList(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !Contains(li2, i) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !Contains(li1, i) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !InSlice(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    li3 := []int{}\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    li3 := []int{}\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        var found bool\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li3 = append(li3, v1)\n        }\n    }\n    return li3\n}\n",
    "    // make a map of the second list\n    m := make(map[int]bool)\n    for _, v := range li2 {\n        m[v] = true\n    }\n    // make a new list\n    var li3 []int\n    for _, v := range li1 {\n        if !m[v] {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li = append(li, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li = append(li, i)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            diff = append(diff, v1)\n        }\n    }\n    return diff\n}\n",
    "    var result []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !Contains(li2, v) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !Contains(li1, v) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            diff = append(diff, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            diff = append(diff, v)\n        }\n    }\n    return diff\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var result []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    li3 := []int{}\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !InList(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var result []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            diff = append(diff, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            li = append(li, v1)\n        }\n    }\n    return li\n}\n",
    "    var diff []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            diff = append(diff, v)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            li3 = append(li3, i)\n        }\n    }\n    for _, i := range li2 {\n        if !In(i, li1) {\n            li3 = append(li3, i)\n        }\n    }\n    return li3\n}\n",
    "    var li3 []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li3 = append(li3, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li3 = append(li3, v)\n        }\n    }\n    return li3\n}\n",
    "    var li []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li = append(li, v1)\n            }\n        }\n    }\n    return li\n}\n",
    "    var li []int\n    for _, v := range li1 {\n        if !In(v, li2) {\n            li = append(li, v)\n        }\n    }\n    for _, v := range li2 {\n        if !In(v, li1) {\n            li = append(li, v)\n        }\n    }\n    return li\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n",
    "    var result []int\n    for _, v1 := range li1 {\n        found := false\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n",
    "    var diff []int\n    for _, i := range li1 {\n        if !In(i, li2) {\n            diff = append(diff, i)\n        }\n    }\n    return diff\n}\n",
    "    var li3 []int\n    for _, v1 := range li1 {\n        for _, v2 := range li2 {\n            if v1 == v2 {\n                li3 = append(li3, v1)\n            }\n        }\n    }\n    return li3\n}\n"
  ]
}