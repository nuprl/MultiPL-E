{
  "name": "mbpp_780_find_combinations",
  "language": "go_test.go",
  "prompt": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        var temp_list []interface{}\n        for _, item := range tuple {\n            temp_list = append(temp_list, item)\n        }\n        result = append(result, temp_list)\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprva9t4mg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprva9t4mg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprva9t4mg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprva9t4mg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprva9t4mg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprva9t4mg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprva9t4mg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprva9t4mg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprva9t4mg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if len(test_list[i]) == len(test_list[j]) {\n                var temp_list []interface{}\n                for k := 0; k < len(test_list[i]); k++ {\n                    temp_list = append(temp_list, test_list[i][k] + test_list[j][k])\n                }\n                result = append(result, temp_list)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjlywt9cq_test.go:16:67: invalid operation: test_list[i][k] + test_list[j][k] (operator + not defined on interface)\n/tmp/tmpjlywt9cq_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjlywt9cq_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjlywt9cq_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjlywt9cq_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjlywt9cq_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjlywt9cq_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjlywt9cq_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjlywt9cq_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjlywt9cq_test.go:34:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjlywt9cq_test.go:34:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var sum int\n    for _, tuple := range test_list {\n        sum = 0\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        if sum == 0 {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx517_et2_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx517_et2_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx517_et2_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx517_et2_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx517_et2_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx517_et2_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx517_et2_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx517_et2_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx517_et2_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1] == test_list[j][1] {\n                result = append(result, []interface{}{test_list[i][0], test_list[j][0]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfha6y2gu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfha6y2gu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfha6y2gu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfha6y2gu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        if len(tuple) == 1 {\n            result = append(result, []interface{}{tuple[0]})\n        } else {\n            for i := 0; i < len(tuple); i++ {\n                for _, sub_tuple := range find_combinations(test_list[i+1:]) {\n                    result = append(result, append([]interface{}{tuple[i]}, sub_tuple...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd25nn4cz_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd25nn4cz_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd25nn4cz_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd25nn4cz_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd25nn4cz_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd25nn4cz_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd25nn4cz_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd25nn4cz_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd25nn4cz_test.go:34:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i+1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm825nqiw_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm825nqiw_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm825nqiw_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm825nqiw_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tup := range test_list {\n        for _, tup2 := range test_list {\n            if tup != tup2 {\n                sum := 0\n                for _, val := range tup {\n                    sum += val.(int)\n                }\n                for _, val := range tup2 {\n                    sum += val.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tup, tup2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp73bvciej_test.go:13:20: invalid operation: tup != tup2 (slice can only be compared to nil)\n/tmp/tmp73bvciej_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp73bvciej_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp73bvciej_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp73bvciej_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp73bvciej_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp73bvciej_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp73bvciej_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp73bvciej_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp73bvciej_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp73bvciej_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        temp = append(temp, sum)\n        sum = 0\n    }\n    result = append(result, temp)\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfsqtls0q_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfsqtls0q_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfsqtls0q_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfsqtls0q_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfsqtls0q_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfsqtls0q_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfsqtls0q_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfsqtls0q_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfsqtls0q_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgbjltkdh_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpgbjltkdh_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum int\n                for _, val := range tuple {\n                    sum += val.(int)\n                }\n                for _, val := range tuple2 {\n                    sum += val.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2t8ek2dx_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmp2t8ek2dx_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t8ek2dx_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t8ek2dx_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t8ek2dx_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t8ek2dx_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t8ek2dx_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t8ek2dx_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t8ek2dx_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t8ek2dx_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t8ek2dx_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i, v := range test_list {\n        for j, v2 := range test_list {\n            if i == j {\n                continue\n            }\n            var sum int\n            for _, v3 := range v {\n                sum += v3.(int)\n            }\n            for _, v4 := range v2 {\n                sum += v4.(int)\n            }\n            if sum == 0 {\n                result = append(result, append(v, v2...))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx6kbmdx4_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx6kbmdx4_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx6kbmdx4_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx6kbmdx4_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx6kbmdx4_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx6kbmdx4_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx6kbmdx4_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx6kbmdx4_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx6kbmdx4_test.go:40:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for _, tuple := range test_list {\n        sum := 0\n        for _, num := range tuple {\n            sum += num.(int)\n        }\n        result = append(result, []interface{}{tuple, sum})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5qqbgoro_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5qqbgoro_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5qqbgoro_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5qqbgoro_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5qqbgoro_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5qqbgoro_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5qqbgoro_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5qqbgoro_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5qqbgoro_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4uwekclv_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmp4uwekclv_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4uwekclv_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4uwekclv_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4uwekclv_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4uwekclv_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4uwekclv_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4uwekclv_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4uwekclv_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4uwekclv_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4uwekclv_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplom0ez1f_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmplom0ez1f_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplom0ez1f_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplom0ez1f_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplom0ez1f_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for _, item := range test_list {\n        sum = 0\n        for _, val := range item {\n            sum += val.(int)\n        }\n        temp = append(temp, sum)\n    }\n    result = append(result, temp)\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_xzk2br7_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_xzk2br7_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xzk2br7_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xzk2br7_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_xzk2br7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xzk2br7_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xzk2br7_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_xzk2br7_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xzk2br7_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphmq44uq8_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmphmq44uq8_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for i := 0; i < len(test_list); i++ {\n        sum = 0\n        for j := 0; j < len(test_list[i]); j++ {\n            sum += test_list[i][j].(int)\n        }\n        temp = append(temp, sum)\n        temp = append(temp, test_list[i])\n        result = append(result, temp)\n        temp = []interface{}{}\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpevdvox4h_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpevdvox4h_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpevdvox4h_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpevdvox4h_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpevdvox4h_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpevdvox4h_test.go:34:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpevdvox4h_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpevdvox4h_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpevdvox4h_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplom0ez1f_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmplom0ez1f_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplom0ez1f_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplom0ez1f_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplom0ez1f_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplom0ez1f_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5_1clz3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum int\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptx_4_cga_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmptx_4_cga_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptx_4_cga_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptx_4_cga_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptx_4_cga_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8_7bj12b_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei2pvtr3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpei2pvtr3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpei2pvtr3_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpei2pvtr3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8_7bj12b_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        if len(tuple) == 1 {\n            result = append(result, tuple)\n        } else {\n            for i := 0; i < len(tuple); i++ {\n                var new_tuple []interface{}\n                for j := 0; j < len(tuple); j++ {\n                    if i != j {\n                        new_tuple = append(new_tuple, tuple[j])\n                    }\n                }\n                result = append(result, new_tuple)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gcua_j4_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5_1clz3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for _, tuple := range test_list {\n        sum = 0\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        temp = append(temp, sum)\n    }\n    result = append(result, temp)\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qlirgfj_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qlirgfj_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qlirgfj_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qlirgfj_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qlirgfj_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qlirgfj_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qlirgfj_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qlirgfj_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qlirgfj_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8_7bj12b_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            var sum_list []interface{}\n            for k := 0; k < len(test_list[i]); k++ {\n                sum_list = append(sum_list, test_list[i][k] + test_list[j][k])\n            }\n            result = append(result, sum_list)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bh3bd78_test.go:15:61: invalid operation: test_list[i][k] + test_list[j][k] (operator + not defined on interface)\n/tmp/tmp_bh3bd78_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i][1], test_list[j][1]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsfu82pg__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsfu82pg__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsfu82pg__test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsfu82pg__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsfu82pg__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsfu82pg__test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsfu82pg__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsfu82pg__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsfu82pg__test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var new_tuple []interface{}\n                for _, val := range tuple {\n                    new_tuple = append(new_tuple, val)\n                }\n                for _, val := range tuple2 {\n                    new_tuple = append(new_tuple, val)\n                }\n                result = append(result, new_tuple)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9g_i1pw3_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmp9g_i1pw3_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9g_i1pw3_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9g_i1pw3_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9g_i1pw3_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9g_i1pw3_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9g_i1pw3_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9g_i1pw3_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9g_i1pw3_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9g_i1pw3_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9g_i1pw3_test.go:37:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, value := range tuple {\n                    sum += value.(int)\n                }\n                for _, value := range tuple2 {\n                    sum += value.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvf6sb2mu_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpvf6sb2mu_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvf6sb2mu_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvf6sb2mu_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvf6sb2mu_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvf6sb2mu_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvf6sb2mu_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvf6sb2mu_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvf6sb2mu_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvf6sb2mu_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvf6sb2mu_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yhjafwr_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmp6yhjafwr_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yhjafwr_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yhjafwr_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yhjafwr_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yhjafwr_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yhjafwr_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yhjafwr_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yhjafwr_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yhjafwr_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yhjafwr_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for _, tup := range test_list {\n        sum := 0\n        for _, val := range tup {\n            sum += val.(int)\n        }\n        result = append(result, []interface{}{sum, tup})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpubj_5atd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpubj_5atd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpubj_5atd_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpubj_5atd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpubj_5atd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpubj_5atd_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpubj_5atd_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpubj_5atd_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpubj_5atd_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprshus4et_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprshus4et_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprshus4et_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprshus4et_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprshus4et_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprshus4et_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprshus4et_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprshus4et_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprshus4et_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        var tuple_sum int\n        for _, num := range tuple {\n            tuple_sum += num.(int)\n        }\n        if tuple_sum == 10 {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmi_fkmy6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmi_fkmy6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmi_fkmy6_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmi_fkmy6_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmi_fkmy6_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmi_fkmy6_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmi_fkmy6_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmi_fkmy6_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmi_fkmy6_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum int\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpctqn1tnv_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpctqn1tnv_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpctqn1tnv_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpctqn1tnv_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpctqn1tnv_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpctqn1tnv_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpctqn1tnv_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpctqn1tnv_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpctqn1tnv_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpctqn1tnv_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpctqn1tnv_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var combinations [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                combinations = append(combinations, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return combinations\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwjgc884a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjgc884a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjgc884a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjgc884a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei2pvtr3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpei2pvtr3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpei2pvtr3_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpei2pvtr3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpei2pvtr3_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1] == test_list[j][1] {\n                result = append(result, []interface{}{test_list[i][0], test_list[j][0]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfha6y2gu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfha6y2gu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfha6y2gu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfha6y2gu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfha6y2gu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var combinations [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                combinations = append(combinations, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return combinations\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwjgc884a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjgc884a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjgc884a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjgc884a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjgc884a_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpljj31kb2_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpljj31kb2_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpljj31kb2_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpljj31kb2_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpljj31kb2_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpljj31kb2_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpljj31kb2_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpljj31kb2_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpljj31kb2_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpljj31kb2_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpljj31kb2_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        sum := 0\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        result = append(result, []interface{}{tuple, sum})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8l6vfsic_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8l6vfsic_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8l6vfsic_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8l6vfsic_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8l6vfsic_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8l6vfsic_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8l6vfsic_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8l6vfsic_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8l6vfsic_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, element := range tuple {\n                    sum += element.(int)\n                }\n                for _, element := range tuple2 {\n                    sum += element.(int)\n                }\n                if sum == 0 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmh7sjooq_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpmh7sjooq_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmh7sjooq_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmh7sjooq_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmh7sjooq_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmh7sjooq_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmh7sjooq_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmh7sjooq_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmh7sjooq_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmh7sjooq_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmh7sjooq_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        if len(tuple) == 1 {\n            result = append(result, tuple)\n        } else {\n            for _, sub_tuple := range find_combinations(test_list[1:]) {\n                result = append(result, append([]interface{}{tuple[0]}, sub_tuple...))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpekzb4wnd_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpekzb4wnd_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpekzb4wnd_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpekzb4wnd_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpekzb4wnd_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpekzb4wnd_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpekzb4wnd_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpekzb4wnd_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpekzb4wnd_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, val := range tuple {\n                    sum += val.(int)\n                }\n                for _, val := range tuple2 {\n                    sum += val.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphcw9_cze_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmphcw9_cze_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphcw9_cze_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphcw9_cze_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphcw9_cze_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphcw9_cze_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphcw9_cze_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphcw9_cze_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphcw9_cze_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphcw9_cze_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphcw9_cze_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuh4anmt6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpuh4anmt6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpuh4anmt6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpuh4anmt6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    // TODO: Implement\n    return [][]interface{}{}\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp05dluzi1_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp05dluzi1_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp05dluzi1_test.go:21:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp05dluzi1_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp05dluzi1_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp05dluzi1_test.go:22:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp05dluzi1_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp05dluzi1_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp05dluzi1_test.go:23:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i+1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm825nqiw_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm825nqiw_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm825nqiw_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm825nqiw_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm825nqiw_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var sum_map map[int][][]interface{} = make(map[int][][]interface{})\n    for _, tuple := range test_list {\n        sum := 0\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        if _, ok := sum_map[sum]; ok {\n            sum_map[sum] = append(sum_map[sum], tuple)\n        } else {\n            sum_map[sum] = [][]interface{}{tuple}\n        }\n    }\n    for _, tuples := range sum_map {\n        if len(tuples) > 1 {\n            result = append(result, tuples...)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdzgg8f8j_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdzgg8f8j_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzgg8f8j_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzgg8f8j_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdzgg8f8j_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzgg8f8j_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzgg8f8j_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdzgg8f8j_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzgg8f8j_test.go:40:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphmq44uq8_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmphmq44uq8_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        if len(tuple) == 1 {\n            result = append(result, tuple)\n        } else {\n            for i := 0; i < len(tuple); i++ {\n                var new_tuple []interface{}\n                for j := 0; j < len(tuple); j++ {\n                    if i != j {\n                        new_tuple = append(new_tuple, tuple[j])\n                    }\n                }\n                result = append(result, new_tuple)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gcua_j4_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        sum := 0\n        for _, num := range tuple {\n            sum += num.(int)\n        }\n        result = append(result, []interface{}{sum, tuple})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpla169qpm_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpla169qpm_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpla169qpm_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpla169qpm_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpla169qpm_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpla169qpm_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpla169qpm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpla169qpm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpla169qpm_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            sum := 0\n            for k := 0; k < len(test_list[i]); k++ {\n                sum += test_list[i][k].(int)\n            }\n            for k := 0; k < len(test_list[j]); k++ {\n                sum += test_list[j][k].(int)\n            }\n            if sum == 0 {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hn7mhw9_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hn7mhw9_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hn7mhw9_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hn7mhw9_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hn7mhw9_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hn7mhw9_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hn7mhw9_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hn7mhw9_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hn7mhw9_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf7_rgs_j_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpf7_rgs_j_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf7_rgs_j_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf7_rgs_j_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpf7_rgs_j_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf7_rgs_j_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf7_rgs_j_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpf7_rgs_j_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf7_rgs_j_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var temp []interface{}\n                for _, item := range tuple {\n                    temp = append(temp, item)\n                }\n                for _, item := range tuple2 {\n                    temp = append(temp, item)\n                }\n                result = append(result, temp)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc7n72zj3_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpc7n72zj3_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc7n72zj3_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc7n72zj3_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc7n72zj3_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc7n72zj3_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc7n72zj3_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc7n72zj3_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc7n72zj3_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc7n72zj3_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc7n72zj3_test.go:37:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5_1clz3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp5_1clz3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp5_1clz3_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgbjltkdh_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpgbjltkdh_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum int\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptx_4_cga_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmptx_4_cga_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptx_4_cga_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptx_4_cga_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptx_4_cga_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptx_4_cga_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum int\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqn3qcia7_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpqn3qcia7_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqn3qcia7_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqn3qcia7_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqn3qcia7_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqn3qcia7_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqn3qcia7_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqn3qcia7_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqn3qcia7_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqn3qcia7_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqn3qcia7_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8_7bj12b_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_7bj12b_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_7bj12b_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i][0], test_list[j][0], test_list[i][1]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj_i2czuf_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj_i2czuf_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj_i2czuf_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj_i2czuf_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj_i2czuf_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj_i2czuf_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj_i2czuf_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj_i2czuf_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj_i2czuf_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        if len(tuple) == 1 {\n            result = append(result, tuple)\n        } else {\n            for i := 0; i < len(tuple); i++ {\n                var new_tuple []interface{}\n                for j := 0; j < len(tuple); j++ {\n                    if i != j {\n                        new_tuple = append(new_tuple, tuple[j])\n                    }\n                }\n                result = append(result, new_tuple)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gcua_j4_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1gcua_j4_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1gcua_j4_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i, t1 := range test_list {\n        for j, t2 := range test_list {\n            if i == j {\n                continue\n            }\n            sum := 0\n            for _, v := range t1 {\n                sum += v.(int)\n            }\n            for _, v := range t2 {\n                sum += v.(int)\n            }\n            if sum == 0 {\n                result = append(result, []interface{}{t1, t2})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpadhe3vel_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpadhe3vel_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpadhe3vel_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpadhe3vel_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpadhe3vel_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpadhe3vel_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpadhe3vel_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpadhe3vel_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpadhe3vel_test.go:40:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for _, tuple := range test_list {\n        sum := 0\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        result = append(result, []interface{}{tuple, sum})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzmkhn3jd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzmkhn3jd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzmkhn3jd_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzmkhn3jd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzmkhn3jd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzmkhn3jd_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzmkhn3jd_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzmkhn3jd_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzmkhn3jd_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        sum := 0\n        for _, item := range tuple {\n            sum += item.(int)\n        }\n        if sum == 0 {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp712s_q46_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp712s_q46_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp712s_q46_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp712s_q46_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp712s_q46_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp712s_q46_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp712s_q46_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp712s_q46_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp712s_q46_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphmq44uq8_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmphmq44uq8_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for _, tuple := range test_list {\n        sum = 0\n        for _, num := range tuple {\n            sum += num.(int)\n        }\n        temp = append(temp, sum)\n    }\n    result = append(result, temp)\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8_ekxk3__test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_ekxk3__test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_ekxk3__test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_ekxk3__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            var sum_list []interface{}\n            for k := 0; k < len(test_list[i]); k++ {\n                sum_list = append(sum_list, test_list[i][k] + test_list[j][k])\n            }\n            result = append(result, sum_list)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bh3bd78_test.go:15:61: invalid operation: test_list[i][k] + test_list[j][k] (operator + not defined on interface)\n/tmp/tmp_bh3bd78_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list); j++ {\n            if i != j {\n                sum = test_list[i][0].(int) + test_list[j][0].(int)\n                temp = append(temp, sum)\n                temp = append(temp, test_list[i][1])\n                temp = append(temp, test_list[j][1])\n                result = append(result, temp)\n                temp = []interface{}{}\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiplp336w_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiplp336w_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiplp336w_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiplp336w_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiplp336w_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiplp336w_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiplp336w_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiplp336w_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiplp336w_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            var sum_list []interface{}\n            for k := 0; k < len(test_list[i]); k++ {\n                sum_list = append(sum_list, test_list[i][k] + test_list[j][k])\n            }\n            result = append(result, sum_list)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bh3bd78_test.go:15:61: invalid operation: test_list[i][k] + test_list[j][k] (operator + not defined on interface)\n/tmp/tmp_bh3bd78_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_bh3bd78_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_bh3bd78_test.go:32:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        sum := 0\n        for _, num := range tuple {\n            sum += num.(int)\n        }\n        result = append(result, []interface{}{tuple, sum})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd89xrx1s_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd89xrx1s_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd89xrx1s_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd89xrx1s_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd89xrx1s_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd89xrx1s_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd89xrx1s_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd89xrx1s_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd89xrx1s_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuh4anmt6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpuh4anmt6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpuh4anmt6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpuh4anmt6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpuh4anmt6_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for _, tuple := range test_list {\n        sum = 0\n        for _, num := range tuple {\n            sum += num.(int)\n        }\n        temp = append(temp, sum)\n    }\n    result = append(result, temp)\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8_ekxk3__test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_ekxk3__test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_ekxk3__test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:32:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8_ekxk3__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8_ekxk3__test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        var sum int\n        for _, num := range tuple {\n            sum += num.(int)\n        }\n        result = append(result, []interface{}{tuple, sum})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu0vgt1c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgu0vgt1c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgu0vgt1c_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgu0vgt1c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgu0vgt1c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgu0vgt1c_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgu0vgt1c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgu0vgt1c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgu0vgt1c_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc9ow3cda_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpc9ow3cda_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc9ow3cda_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc9ow3cda_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc9ow3cda_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc9ow3cda_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc9ow3cda_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc9ow3cda_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc9ow3cda_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc9ow3cda_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc9ow3cda_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum int\n                for _, v := range tuple {\n                    sum += v.(int)\n                }\n                for _, v := range tuple2 {\n                    sum += v.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyxxqo86m_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpyxxqo86m_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyxxqo86m_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyxxqo86m_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyxxqo86m_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyxxqo86m_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyxxqo86m_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyxxqo86m_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyxxqo86m_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyxxqo86m_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyxxqo86m_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 0 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphmq44uq8_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmphmq44uq8_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphmq44uq8_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphmq44uq8_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy71v28lu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy71v28lu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy71v28lu_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var new_tuple []interface{}\n                for _, num := range tuple {\n                    new_tuple = append(new_tuple, num)\n                }\n                for _, num := range tuple2 {\n                    new_tuple = append(new_tuple, num)\n                }\n                result = append(result, new_tuple)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb470o6w7_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpb470o6w7_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb470o6w7_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb470o6w7_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb470o6w7_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb470o6w7_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb470o6w7_test.go:36:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb470o6w7_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb470o6w7_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb470o6w7_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb470o6w7_test.go:37:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if sum(test_list[i]) == sum(test_list[j]) {\n                result = append(result, test_list[i])\n                result = append(result, test_list[j])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxh4heo8w_test.go:13:16: undefined: sum\n/tmp/tmpxh4heo8w_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxh4heo8w_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxh4heo8w_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxh4heo8w_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxh4heo8w_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxh4heo8w_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxh4heo8w_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxh4heo8w_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxh4heo8w_test.go:31:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxh4heo8w_test.go:31:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1] == test_list[j][0] {\n                result = append(result, []interface{}{test_list[i][0], test_list[i][1], test_list[j][1]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1cje131x_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1cje131x_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cje131x_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cje131x_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1cje131x_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cje131x_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cje131x_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1cje131x_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cje131x_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        sum := 0\n        for _, val := range tuple {\n            sum += val.(int)\n        }\n        result = append(result, []interface{}{sum, tuple})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjp_vnbs6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjp_vnbs6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjp_vnbs6_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjp_vnbs6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjp_vnbs6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjp_vnbs6_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjp_vnbs6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjp_vnbs6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjp_vnbs6_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    result := make([][]interface{}, 0)\n    for _, tuple := range test_list {\n        sum := 0\n        for _, item := range tuple {\n            sum += item.(int)\n        }\n        result = append(result, []interface{}{sum, tuple})\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcj3ipb9k_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcj3ipb9k_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcj3ipb9k_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcj3ipb9k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcj3ipb9k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcj3ipb9k_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcj3ipb9k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcj3ipb9k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcj3ipb9k_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, val := range tuple {\n                    sum += val.(int)\n                }\n                for _, val := range tuple2 {\n                    sum += val.(int)\n                }\n                if sum == 10 {\n                    result = append(result, append(tuple, tuple2...))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp987hmlio_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmp987hmlio_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp987hmlio_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp987hmlio_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp987hmlio_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp987hmlio_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp987hmlio_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp987hmlio_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp987hmlio_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp987hmlio_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp987hmlio_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                var sum = 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi200nk01_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpi200nk01_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpi200nk01_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi200nk01_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi200nk01_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpi200nk01_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi200nk01_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi200nk01_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpi200nk01_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi200nk01_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi200nk01_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for _, tuple := range test_list {\n        for _, tuple2 := range test_list {\n            if tuple != tuple2 {\n                sum := 0\n                for _, num := range tuple {\n                    sum += num.(int)\n                }\n                for _, num := range tuple2 {\n                    sum += num.(int)\n                }\n                if sum == 10 {\n                    result = append(result, []interface{}{tuple, tuple2})\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgbjltkdh_test.go:13:22: invalid operation: tuple != tuple2 (slice can only be compared to nil)\n/tmp/tmpgbjltkdh_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:37:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:38:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgbjltkdh_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgbjltkdh_test.go:39:152: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0fbysrg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0fbysrg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0fbysrg_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    var temp []interface{}\n    var sum int\n    for _, tuple := range test_list {\n        sum = 0\n        temp = []interface{}{}\n        for _, num := range tuple {\n            sum += num.(int)\n            temp = append(temp, num)\n        }\n        temp = append(temp, sum)\n        result = append(result, temp)\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptz4fhkx7_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptz4fhkx7_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptz4fhkx7_test.go:33:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptz4fhkx7_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptz4fhkx7_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptz4fhkx7_test.go:34:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptz4fhkx7_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptz4fhkx7_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptz4fhkx7_test.go:35:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510141,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6h3btg9q_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:28:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:29:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6h3btg9q_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6h3btg9q_test.go:30:152: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}