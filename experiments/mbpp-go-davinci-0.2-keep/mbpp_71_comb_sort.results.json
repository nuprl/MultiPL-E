{
  "name": "mbpp_71_comb_sort",
  "language": "go_test.go",
  "prompt": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    if len(nums) <= 1 {\n        return nums\n    }\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var swapped bool = true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap.\n    gap := len(nums)\n    // Initialize the shrink factor.\n    shrink := 1.3\n    // Initialize the swapped flag.\n    swapped := true\n    // While the gap is greater than 1 and the swapped flag is true.\n    for gap > 1 || swapped {\n        // Update the gap.\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        // Reset the swapped flag.\n        swapped = false\n        // Iterate through the list.\n        for i := 0; i + gap < len(nums); i++ {\n            // If the current element is greater than the element at the gap.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the swapped flag.\n                swapped = true\n            }\n        }\n    }\n    // Return the sorted list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / shrink)\n        }\n        swapped = false\n        for i := 0; gap + i < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        for i := 0; gap + i < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124110,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124110,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        for i := 0; gap + i < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    swapped := true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "--- FAIL: TestComb_Sort (0.00s)\n    --- FAIL: TestComb_Sort/test_num__0 (0.00s)\n        tmp3x4zhcgf_test.go:44: expected '[%!s(int=5) %!s(int=15) %!s(int=25) %!s(int=37) %!s(int=79)]', got '[%!s(int=5) %!s(int=15) %!s(int=37) %!s(int=25) %!s(int=79)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    swapped := true\n    for swapped {\n        swapped = false\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "--- FAIL: TestComb_Sort (0.00s)\n    --- FAIL: TestComb_Sort/test_num__0 (0.00s)\n        tmp34chwgfk_test.go:44: expected '[%!s(int=5) %!s(int=15) %!s(int=25) %!s(int=37) %!s(int=79)]', got '[%!s(int=5) %!s(int=15) %!s(int=37) %!s(int=25) %!s(int=79)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap size.\n    gap := len(nums)\n    // Initialize the shrink factor.\n    shrink := 1.3\n    // Loop until the gap size is 1.\n    for gap > 1 {\n        // Update the gap size.\n        gap = int(float64(gap) / shrink)\n        // Loop through the list.\n        for i := 0; i + gap < len(nums); i++ {\n            // Check if the current element is greater than the next.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            }\n        }\n    }\n    // Return the sorted list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize a gap value.\n    gap := len(nums)\n    // Initialize a swap value.\n    swapped := true\n    // Loop until the gap is 1 and there are no swaps.\n    for gap != 1 || swapped {\n        // Update the gap value.\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        // Reset the swapped value.\n        swapped = false\n        // Loop over the elements.\n        for i := 0; i + gap < len(nums); i++ {\n            // Check if the elements are out of order.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Update the swapped value.\n                swapped = true\n            }\n        }\n    }\n    // Return the sorted list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Set the gap size to the length of the list.\n    gap := len(nums)\n    // Set the shrink factor to 1.3.\n    shrink := 1.3\n    // Set the sorted flag to false.\n    sorted := false\n    // While the sorted flag is false.\n    for !sorted {\n        // Set the gap size to the floor of the gap size divided by the shrink factor.\n        gap = int(float64(gap) / shrink)\n        // If the gap size is less than 1.\n        if gap < 1 {\n            // Set the gap size to 1.\n            gap = 1\n        }\n        // Set the sorted flag to true.\n        sorted = true\n        // For each pair of elements separated by the gap size.\n        for i := 0; i + gap < len(nums); i++ {\n            // If the first element is greater than the second element.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the sorted flag to false.\n                sorted = false\n            }\n        }\n    }\n    // Return the list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "--- FAIL: TestComb_Sort (0.00s)\n    --- FAIL: TestComb_Sort/test_num__0 (0.00s)\n        tmpx9fdgw2q_test.go:57: expected '[%!s(int=5) %!s(int=15) %!s(int=25) %!s(int=37) %!s(int=79)]', got '[%!s(int=5) %!s(int=15) %!s(int=37) %!s(int=25) %!s(int=79)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // The gap starts at the length of the list and shrinks by a factor of 1.3\n    gap := len(nums)\n    // The shrink factor is 1.3\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        // Update the gap value for a next comb\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = false\n\n    for swapped || gap > 1 {\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        for i := 0; gap + i < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.25)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap to the length of the list.\n    gap := len(nums)\n    // Initialize the swap to true.\n    swapped := true\n    // While the gap is greater than 1 and the list is not yet sorted.\n    for gap > 1 || swapped {\n        // Set the gap to the next gap value.\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        // Set the swapped to false.\n        swapped = false\n        // For each pair of elements.\n        for i := 0; i + gap < len(nums); i++ {\n            // If the first element is greater than the second element.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the swapped to true.\n                swapped = true\n            }\n        }\n    }\n    // Return the list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    swapped := true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "--- FAIL: TestComb_Sort (0.00s)\n    --- FAIL: TestComb_Sort/test_num__0 (0.00s)\n        tmp3x4zhcgf_test.go:44: expected '[%!s(int=5) %!s(int=15) %!s(int=25) %!s(int=37) %!s(int=79)]', got '[%!s(int=5) %!s(int=15) %!s(int=37) %!s(int=25) %!s(int=79)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124110,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap <= 1 {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap <= 1 {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i := 0; gap+i < len(nums); i++ {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = gap * 10 / 13\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap to the length of the list.\n    gap := len(nums)\n    // Initialize the shrink factor to 1.3.\n    shrink := 1.3\n    // Initialize the swapped flag to true.\n    swapped := true\n    // While the gap is greater than 1 and the swapped flag is true.\n    for gap > 1 || swapped {\n        // Set the gap to the floor of the gap divided by the shrink factor.\n        gap = int(float64(gap) / shrink)\n        // If the gap is less than 1, set it to 1.\n        if gap < 1 {\n            gap = 1\n        }\n        // Set the swapped flag to false.\n        swapped = false\n        // For each pair of elements separated by the gap.\n        for i := 0; i + gap < len(nums); i++ {\n            // If the first element is greater than the second element.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the swapped flag to true.\n                swapped = true\n            }\n        }\n    }\n    // Return the list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap <= 1 {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    n := len(nums)\n    gap := n\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < n; i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = gap * 10 / 13\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = gap * 10 / 13\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap.\n    gap := len(nums)\n    // Initialize the shrink factor.\n    shrink := 1.3\n    // Initialize the swapped flag.\n    swapped := true\n    // Loop until the gap is 1 and there is no swap.\n    for gap > 1 || swapped {\n        // Update the gap value.\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        // Reset the swapped flag.\n        swapped = false\n        // Loop through the list.\n        for i := 0; i + gap < len(nums); i++ {\n            // If the current element is greater than the next element.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the swapped flag.\n                swapped = true\n            }\n        }\n    }\n    // Return the sorted list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var sorted bool = false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap.\n    gap := len(nums)\n    // Initialize the shrink factor.\n    shrink := 1.3\n    // Initialize the swapped flag.\n    swapped := true\n\n    for gap > 1 || swapped {\n        // Update the gap value for a next comb.\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        // Initialize the swapped flag.\n        swapped = false\n        // Compare all elements with the obtained gap value.\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the swapped flag.\n                swapped = true\n            }\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // Initialize the gap to the length of the list.\n    gap := len(nums)\n    // Initialize the shrink factor to 1.3.\n    shrink := 1.3\n    // Initialize the swapped flag to true.\n    swapped := true\n    // While the gap is greater than 1 and the swapped flag is true.\n    for gap > 1 || swapped {\n        // Set the gap to the floor of the gap divided by the shrink factor.\n        gap = int(float64(gap) / shrink)\n        // If the gap is less than 1, set it to 1.\n        if gap < 1 {\n            gap = 1\n        }\n        // Set the swapped flag to false.\n        swapped = false\n        // For each pair of elements separated by the gap.\n        for i := 0; i + gap < len(nums); i++ {\n            // If the first element is greater than the second element.\n            if nums[i] > nums[i + gap] {\n                // Swap the elements.\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                // Set the swapped flag to true.\n                swapped = true\n            }\n        }\n    }\n    // Return the list.\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var swapped bool = true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124132,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var swapped bool = true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = true\n\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        for i := 0; gap + i < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    n := len(nums)\n    gap := n\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < n; i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124135,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap <= 1 {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124110,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124106,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    swapped := true\n    for swapped {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    var gap int = len(nums)\n    var shrink float64 = 1.3\n    var swapped bool = true\n    for swapped {\n        swapped = false\n        gap = int(float64(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124136,
      "stdout": "--- FAIL: TestComb_Sort (0.00s)\n    --- FAIL: TestComb_Sort/test_num__0 (0.00s)\n        tmpepsgkg8v_test.go:44: expected '[%!s(int=5) %!s(int=15) %!s(int=25) %!s(int=37) %!s(int=79)]', got '[%!s(int=5) %!s(int=15) %!s(int=37) %!s(int=25) %!s(int=79)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.3)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    // The gap starts with a large value and shrinks by a factor of 1.3 in each iteration until it reaches the value 1.\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for sorted == false {\n        gap = int(float64(gap) / shrink)\n        if gap <= 1 {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i + gap < len(nums) {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            }\n            i += 1\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        if gap > 1 {\n            gap = int(float64(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i := 0; i + gap < len(nums); i++ {\n            if nums[i] > nums[i + gap] {\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    shrink := 1.3\n    sorted := false\n\n    for !sorted {\n        gap = int(float64(gap) / shrink)\n        if gap > 1 {\n            sorted = false\n        } else {\n            gap = 1\n            sorted = true\n        }\n\n        i := 0\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = false\n            }\n            i++\n        }\n    }\n\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124109,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n    gap := len(nums)\n    swapped := true\n    for gap > 1 || swapped {\n        gap = int(float64(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        i := 0\n        swapped = false\n        for i+gap < len(nums) {\n            if nums[i] > nums[i+gap] {\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = true\n            }\n            i++\n        }\n    }\n    return nums\n}\n\nfunc TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124136,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}