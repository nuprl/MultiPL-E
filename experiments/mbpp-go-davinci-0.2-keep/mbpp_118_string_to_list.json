{
  "name": "mbpp_118_string_to_list",
  "language": "go_test.go",
  "prompt": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var myList []string\n    for _, value := range myString {\n        if string(value) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(value)\n        }\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \" \")\n        } else {\n            myList = append(myList, string(char))\n        }\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        if string(v) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(v)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    var myWord string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, myWord)\n            myWord = \"\"\n        } else {\n            myWord += string(char)\n        }\n    }\n    myList = append(myList, myWord)\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    // Create a slice of strings\n    mySlice := make([]string, 0)\n    // Split the string on the space character\n    mySlice = append(mySlice, myString)\n    return mySlice\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return myString\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    var myWord string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, myWord)\n            myWord = \"\"\n        } else {\n            myWord += string(char)\n        }\n    }\n    myList = append(myList, myWord)\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, myChar := range myString {\n        if myChar == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(myChar)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    mySlice := make([]string, 0)\n    for _, char := range myString {\n        if char == ' ' {\n            mySlice = append(mySlice, \"\")\n        } else {\n            mySlice[len(mySlice)-1] += string(char)\n        }\n    }\n    return mySlice\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        if v == ' ' {\n            myList = append(myList, \" \")\n        } else {\n            myList = append(myList, string(v))\n        }\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    var myList []string\n    myList = make([]string, 0)\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return nil\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n",
    "    return strings.Split(myString, \" \")\n}\n",
    "    return nil\n}\n",
    "    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n"
  ]
}