{
  "name": "mbpp_99_decimal_to_binary",
  "language": "go_test.go",
  "prompt": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n%2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    return decimal_to_binary(n/2) + fmt.Sprintf(\"%d\", n%2)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    return decimal_to_binary(n / 2) + fmt.Sprintf(\"%d\", n % 2)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    if n == 1 {\n        return \"1\"\n    }\n\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n/2) + \"0\"\n    }\n    return decimal_to_binary(n/2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    result := \"\"\n    for n > 0 {\n        remainder := n % 2\n        result = fmt.Sprintf(\"%d%s\", remainder, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    return decimal_to_binary(n/2) + fmt.Sprintf(\"%d\", n%2)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = string(n % 2 + 48) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpi02ynsy0_test.go:15:18: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var res string\n    for n > 0 {\n        res = fmt.Sprintf(\"%d%s\", n % 2, res)\n        n /= 2\n    }\n    return res\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = string(n % 2 + 48) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpi02ynsy0_test.go:15:18: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var binary []byte\n    for n > 0 {\n        binary = append(binary, byte(n % 2) + '0')\n        n /= 2\n    }\n    for i, j := 0, len(binary) - 1; i < j; i, j = i + 1, j - 1 {\n        binary[i], binary[j] = binary[j], binary[i]\n    }\n    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        if n % 2 == 0 {\n            result = \"0\" + result\n        } else {\n            result = \"1\" + result\n        }\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    } else {\n        return decimal_to_binary(n / 2) + \"1\"\n    }\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509820,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%v%v\", n % 2, result)\n        n = n / 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    result := \"\"\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n%2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var res string\n    for n > 0 {\n        res = fmt.Sprintf(\"%d\", n % 2) + res\n        n /= 2\n    }\n    return res\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124272,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d\", n % 2) + result\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    var result string\n    for n > 0 {\n        if n % 2 == 0 {\n            result = \"0\" + result\n        } else {\n            result = \"1\" + result\n        }\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    var result string\n    for n > 0 {\n        result = fmt.Sprintf(\"%d%s\", n % 2, result)\n        n /= 2\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    return decimal_to_binary(n / 2) + fmt.Sprintf(\"%d\", n % 2)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124270,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    if n == 1 {\n        return \"1\"\n    }\n    if n % 2 == 0 {\n        return decimal_to_binary(n / 2) + \"0\"\n    }\n    return decimal_to_binary(n / 2) + \"1\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509819,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}