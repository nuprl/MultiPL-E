{
  "name": "mbpp_597_find_kth",
  "language": "go_test.go",
  "prompt": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == len(arr1) + len(arr2) - 1 {\n        if arr1[len(arr1)-1] > arr2[len(arr2)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if k > len(arr1) {\n        if arr1[len(arr1)-1] > arr2[k-len(arr1)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if arr1[k] > arr2[k] {\n        return find_kth(arr1, arr2[k:], k)\n    } else {\n        return find_kth(arr1[k:], arr2, k)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpp61ykf_1_test.go:62: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpp61ykf_1_test.go:62: expected '%!s(int=256)', got '%!s(int=770)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpp61ykf_1_test.go:62: expected '%!s(int=8)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] > arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr1[k/2-1] > arr2[len(arr2)-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] > arr2[k/2-1] {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if k <= 0 {\n        return -1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpakin6yfu_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:9 +0x315 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a915\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a865\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjet7n1bx_test.go:32 +0x265 fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a865\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpi10ezi2v_test.go:66: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpi10ezi2v_test.go:66: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpi10ezi2v_test.go:66: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k == len(arr1) + len(arr2) {\n        if arr1[len(arr1)-1] > arr2[len(arr2)-1] {\n            return arr1[len(arr1)-1]\n        }\n        return arr2[len(arr2)-1]\n    }\n    if k > len(arr1) + len(arr2) {\n        panic(\"k is too large\")\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    i := min(len(arr1), k/2)\n    j := min(len(arr2), k/2)\n    if arr1[i-1] > arr2[j-1] {\n        return find_kth(arr1, arr2[j:], k-j)\n    } else {\n        return find_kth(arr1[i:], arr2, k-i)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptetexvv__test.go:17:16: undefined: min\n/tmp/tmptetexvv__test.go:19:10: undefined: min\n/tmp/tmptetexvv__test.go:20:10: undefined: min\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    var i int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    var j int\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k / 2 {\n        mid = len(arr1)\n    } else {\n        mid = k / 2\n    }\n    if arr1[mid - 1] < arr2[mid - 1] {\n        return find_kth(arr1[mid:], arr2, k - mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k - mid)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] > arr2[k-len(arr1)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] > arr1[k-len(arr2)-1] {\n            return arr2[len(arr2)-1]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2-1] > arr2[k/2-1] {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmpm2dz8u7g_test.go:37 +0x376\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmpm2dz8u7g_test.go:38 +0x2e5\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc0000925f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmpm2dz8u7g_test.go:38 +0x2e5\ncommand-line-arguments_test.find_kth(0xc000092638, 0x5, 0x5, 0xc0000925f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmpm2dz8u7g_test.go:40 +0x352\ncommand-line-arguments_test.TestFind_Kth(0xc000001380)\n\t/tmp/tmpm2dz8u7g_test.go:51 +0x10e\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var k1, k2 int\n    if k/2 < len(arr1) {\n        k1 = k/2\n    } else {\n        k1 = len(arr1)\n    }\n    if k/2 < len(arr2) {\n        k2 = k/2\n    } else {\n        k2 = len(arr2)\n    }\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k-k1)\n    } else {\n        return find_kth(arr1, arr2[k2:], k-k2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            }\n            return arr2[0]\n        }\n        if arr2[1] < arr1[0] {\n            return arr2[1]\n        }\n        return arr1[0]\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                }\n                return arr2[0]\n            }\n            if arr1[2] < arr2[1] {\n                return arr1[2]\n            }\n            return arr2[1]\n        }\n        if arr2[1] < arr1[0] {\n            if arr2[2] < arr1[0] {\n                return arr2[2]\n            }\n            return arr1[0]\n        }\n        if arr2[2] < arr1[1] {\n            return arr2[2]\n        }\n        return arr1[1]\n    }\n    if k == 4 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    if arr1[3] < arr2[0] {\n                        return arr1[3]\n                    }\n                    return arr2[0]\n                }\n                if arr1[3] < arr2[1] {\n                    return arr1[3]\n                }\n                return arr2[1]\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123455,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjlhntmzn_test.go:72:6: expected '(', found TestFind_Kth\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        }\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        }\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var k1, k2 int\n    if k/2 < len(arr1) {\n        k1 = k/2\n    } else {\n        k1 = len(arr1)\n    }\n    k2 = k - k1\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k-k1)\n    } else {\n        return find_kth(arr1, arr2[k2:], k-k2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) < k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k / 2 - 1] {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[:k / 2], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k / 2 - 1] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1[:k / 2], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            } else {\n                if arr1[1] < arr2[0] {\n                    return arr1[1]\n                } else {\n                    return arr2[0]\n                }\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            } else {\n                if arr2[1] < arr1[0] {\n                    return arr2[1]\n                } else {\n                    return arr1[0]\n                }\n            }\n        }\n    }\n    var i, j int\n    if len(arr1) > k/2 {\n        i = k/2\n    } else {\n        i = len(arr1)\n    }\n    if len(arr2) > k/2 {\n        j = k/2\n    } else {\n        j = len(arr2)\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:9 +0x370 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170498 sp=0xc020170448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170588 sp=0xc020170538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a92c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1[:len(arr1)-1], arr2, k-1)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1, arr2[:len(arr2)-1], k-1)\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:9 +0x34b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a94b\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a905\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                if arr2[2] < arr1[0] {\n                    return arr2[2]\n                } else {\n                    return arr1[0]\n                }\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 4 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    if arr1[3] < arr2[0] {\n                        return arr1[3]\n                    } else {\n                        return arr2[0]\n                    }\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123455,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx793cn3b_test.go:78:6: expected '(', found TestFind_Kth\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:9 +0x370 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170498 sp=0xc020170448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170588 sp=0xc020170538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a92c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) < k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] > arr2[mid2] {\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    } else {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpakin6yfu_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:9 +0x370 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170498 sp=0xc020170448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170588 sp=0xc020170538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a92c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1[:len(arr1)-1], arr2, k-1)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1, arr2[:len(arr2)-1], k-1)\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:9 +0x34b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a94b\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpg376t5nq_test.go:40 +0x305 fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a905\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            } else {\n                if arr1[1] < arr2[0] {\n                    return arr1[1]\n                } else {\n                    return arr2[0]\n                }\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            } else {\n                if arr2[1] < arr1[0] {\n                    return arr2[1]\n                } else {\n                    return arr1[0]\n                }\n            }\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                if arr1[2] < arr2[1] {\n                    return arr1[2]\n                } else {\n                    return arr2[1]\n                }\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                if arr2[2] < arr1[0] {\n                    return arr2[2]\n                } else {\n                    return arr1[0]\n                }\n            } else {\n                if arr2[2] < arr1[1] {\n                    return arr2[2]\n                } else {\n                    return arr1[1]\n                }\n            }\n        }\n    }\n    if k == 4 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    if arr1[3] < arr2[0] {\n                       \nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5scmktzq_test.go:75:6: expected '(', found TestFind_Kth\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            }\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            }\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    var i int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    var j int\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1)\n    } else {\n        mid1 = k/2\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2)\n    } else {\n        mid2 = k/2\n    }\n    if arr1[mid1-1] < arr2[mid2-1] {\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    } else {\n        return find_kth(arr1, arr2[mid2:], k-mid2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123458,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1)+1:], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2)+1:], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:9 +0x370 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a92f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpeyom0gfo_test.go:40 +0x32f fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a92f\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var k1, k2 int\n    if len(arr1) < k/2 {\n        k1 = len(arr1)\n    } else {\n        k1 = k/2\n    }\n    if len(arr2) < k/2 {\n        k2 = len(arr2)\n    } else {\n        k2 = k/2\n    }\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k-k1)\n    } else {\n        return find_kth(arr1, arr2[k2:], k-k2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var m1, m2 int\n    if len(arr1) < k/2 {\n        m1 = len(arr1)\n    } else {\n        m1 = k/2\n    }\n    if len(arr2) < k/2 {\n        m2 = len(arr2)\n    } else {\n        m2 = k/2\n    }\n    if arr1[m1-1] < arr2[m2-1] {\n        return find_kth(arr1[m1:], arr2, k-m1)\n    } else {\n        return find_kth(arr1, arr2[m2:], k-m2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1)\n    } else {\n        mid1 = k/2\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2)\n    } else {\n        mid2 = k/2\n    }\n    if arr1[mid1-1] < arr2[mid2-1] {\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    } else {\n        return find_kth(arr1, arr2[mid2:], k-mid2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123458,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1)] {\n            return arr2[k - len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n    if len(arr2) <= k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2)] {\n            return arr1[k - len(arr2)]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2] < arr2[k / 2] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:9 +0x38b fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a98b\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc020160448 sp=0xc0201603f8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc020160498 sp=0xc020160448 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc0201604e8 sp=0xc020160498 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc020160538 sp=0xc0201604e8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc020160588 sp=0xc020160538 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc0201605d8 sp=0xc020160588 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo39dczpu_test.go:40 +0x33c fp=0xc020160628 sp=0xc0201605d8 pc=0x50a93c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmpf5_1yein_test.go:36 +0x37c\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmpf5_1yein_test.go:39 +0x352\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc0000925f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmpf5_1yein_test.go:39 +0x352\ncommand-line-arguments_test.find_kth(0xc000092638, 0x5, 0x5, 0xc0000925f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmpf5_1yein_test.go:37 +0x2e5\ncommand-line-arguments_test.TestFind_Kth(0xc000001380)\n\t/tmp/tmpf5_1yein_test.go:51 +0x10e\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < len(arr2) {\n        mid = len(arr1) / 2\n    } else {\n        mid = len(arr2) / 2\n    }\n    if arr1[mid] < arr2[mid] {\n        if mid + mid < k {\n            return find_kth(arr1[mid:], arr2, k - mid)\n        } else {\n            return find_kth(arr1, arr2[:mid], k)\n        }\n    } else {\n        if mid + mid < k {\n            return find_kth(arr1, arr2[mid:], k - mid)\n        } else {\n            return find_kth(arr1[:mid], arr2, k)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:9 +0x305 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a905\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a855\ncommand-line-arguments_test.find_kth(0xc0401dfe48, 0x3, 0x3, 0xc0401dfe00, 0x1, 0x3, 0x2, 0x0)\n\t/tmp/tmpdmminou3_test.go:37 +0x255 fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a855\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n    if len(arr2) < k / 2 {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k / 2 - 1] {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[:k / 2], k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k / 2 - 1] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1[:k / 2], arr2, k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            }\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            }\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[1]\n            }\n            if arr1[1] < arr2[0] {\n                if len(arr1) == 2 {\n                    return arr2[0]\n                }\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[1]\n            }\n            if arr2[1] < arr1[0] {\n                if len(arr2) == 2 {\n                    return arr1[0]\n                }\n                if arr2[2] < arr1[0] {\n                    return arr2[2]\n                } else {\n                    return arr1[0]\n                }\n            } else {\n                return arr1[0]\n            }\n        }\n   \nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123458,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8bp37cjj_test.go:79:6: expected '(', found TestFind_Kth\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8rcewpoi_test.go:59: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8rcewpoi_test.go:59: expected '%!s(int=256)', got '%!s(int=112)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8rcewpoi_test.go:59: expected '%!s(int=8)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.013s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpmxskjm07_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpmxskjm07_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpmxskjm07_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            } else {\n                if arr1[1] < arr2[0] {\n                    return arr1[1]\n                } else {\n                    return arr2[0]\n                }\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            } else {\n                if arr2[1] < arr1[0] {\n                    return arr2[1]\n                } else {\n                    return arr1[0]\n                }\n            }\n        }\n    }\n    var arr1_mid int\n    var arr2_mid int\n    if len(arr1) < k/2 {\n        arr1_mid = len(arr1) - 1\n    } else {\n        arr1_mid = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        arr2_mid = len(arr2) - 1\n    } else {\n        arr2_mid = k/2 - 1\n    }\n    if arr1[arr1_mid] < arr2[arr2_mid] {\n        return find_kth(arr1[arr1_mid+1:], arr2, k-arr1_mid-1)\n    } else {\n        return find_kth(arr1, arr2[arr2_mid+1:], k-arr2_mid-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.013s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    }\n    return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1[:len(arr1)], arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2[:len(arr2)], k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200f0398 stack=[0xc0200f0000, 0xc0400f0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:9 +0x355 fp=0xc0200f03a8 sp=0xc0200f03a0 pc=0x50a955\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f03f8 sp=0xc0200f03a8 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f0448 sp=0xc0200f03f8 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f0498 sp=0xc0200f0448 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f04e8 sp=0xc0200f0498 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f0538 sp=0xc0200f04e8 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f0588 sp=0xc0200f0538 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f05d8 sp=0xc0200f0588 pc=0x50a914\ncommand-line-arguments_test.find_kth(0xc0400efe50, 0x2, 0x2, 0xc0400efe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp5c2eb_eq_test.go:40 +0x314 fp=0xc0200f0628 sp=0xc0200f05d8 pc=0x50a914\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n    if len(arr2) < k / 2 {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k / 2 {\n        a = arr1[len(arr1) - 1]\n    } else {\n        a = arr1[k / 2 - 1]\n    }\n    if len(arr2) < k / 2 {\n        b = arr2[len(arr2) - 1]\n    } else {\n        b = arr2[k / 2 - 1]\n    }\n    if a < b {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, k-1)\n        } else {\n            return find_kth(arr1, arr2[1:], k-1)\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            }\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            }\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if len(arr1) == 1 {\n        return find_kth(arr1, arr2[1:], k-1)\n    }\n    if len(arr2) == 1 {\n        return find_kth(arr1[1:], arr2, k-1)\n    }\n    if arr1[0] < arr2[0] {\n        return find_kth(arr1[1:], arr2, k-1)\n    } else {\n        return find_kth(arr1, arr2[1:], k-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpu33vj6vk_test.go:72: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpu33vj6vk_test.go:72: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpu33vj6vk_test.go:72: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmp5yy7uwhp_test.go:37 +0x38a\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmp5yy7uwhp_test.go:40 +0x365\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c5f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmp5yy7uwhp_test.go:40 +0x365\ncommand-line-arguments_test.find_kth(0xc00008c638, 0x5, 0x5, 0xc00008c5f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmp5yy7uwhp_test.go:38 +0x2f4\ncommand-line-arguments_test.TestFind_Kth(0xc000102600)\n\t/tmp/tmp5yy7uwhp_test.go:51 +0x10e\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = arr1[k/2-1]\n    } else {\n        mid1 = arr1[len(arr1)-1]\n    }\n    if len(arr2) >= k/2 {\n        mid2 = arr2[k/2-1]\n    } else {\n        mid2 = arr2[len(arr2)-1]\n    }\n    if mid1 < mid2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1)-1)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, len(arr2)-1)\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123461,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:9 +0x370 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc020170498 sp=0xc020170448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc020170588 sp=0xc020170538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp04ozp1es_test.go:40 +0x32c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a92c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    } else if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123461,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:9 +0x370 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc020160448 sp=0xc0201603f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc020160498 sp=0xc020160448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc0201604e8 sp=0xc020160498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc020160538 sp=0xc0201604e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc020160588 sp=0xc020160538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc0201605d8 sp=0xc020160588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpng3klv3m_test.go:39 +0x32c fp=0xc020160628 sp=0xc0201605d8 pc=0x50a92c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k == len(arr1) + len(arr2) - 1 {\n        if arr1[len(arr1)-1] > arr2[len(arr2)-1] {\n            return arr1[len(arr1)-1]\n        }\n        return arr2[len(arr2)-1]\n    }\n    if k < len(arr1) {\n        if arr1[k] < arr2[0] {\n            return arr1[k]\n        }\n    }\n    if k < len(arr2) {\n        if arr2[k] < arr1[0] {\n            return arr2[k]\n        }\n    }\n    if k >= len(arr1) {\n        return find_kth(arr1, arr2[k-len(arr1)+1:], k-len(arr1)+1)\n    }\n    if k >= len(arr2) {\n        return find_kth(arr1[k-len(arr2)+1:], arr2, k-len(arr2)+1)\n    }\n    if arr1[k] < arr2[k] {\n        return find_kth(arr1[k:], arr2, k)\n    }\n    return find_kth(arr1, arr2[k:], k)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpmyvwdeqb_test.go:65: expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpmyvwdeqb_test.go:65: expected '%!s(int=256)', got '%!s(int=770)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpmyvwdeqb_test.go:65: expected '%!s(int=8)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1)\n    } else {\n        mid1 = k/2\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2)\n    } else {\n        mid2 = k/2\n    }\n    if arr1[mid1-1] < arr2[mid2-1] {\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    } else {\n        return find_kth(arr1, arr2[mid2:], k-mid2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123458,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k - k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k - k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123461,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:9 +0x2bc fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8bc\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc020160498 sp=0xc020160448 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc020160588 sp=0xc020160538 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy79k1yxr_test.go:30 +0x1e5 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a7e5\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = k/2 - 1\n    } else {\n        mid1 = len(arr1) - 1\n    }\n    if len(arr2) >= k/2 {\n        mid2 = k/2 - 1\n    } else {\n        mid2 = len(arr2) - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) < k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] > arr2[mid2] {\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    } else {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == len(arr1) + len(arr2) {\n        if arr1[len(arr1)-1] > arr2[len(arr2)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if k > len(arr1) {\n        if arr1[len(arr1)-1] > arr2[k-len(arr1)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return arr2[k-len(arr1)-1]\n        }\n    }\n    if k > len(arr2) {\n        if arr2[len(arr2)-1] > arr1[k-len(arr2)-1] {\n            return arr2[len(arr2)-1]\n        } else {\n            return arr1[k-len(arr2)-1]\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp9xt1byde_test.go:66: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp9xt1byde_test.go:66: expected '%!s(int=256)', got '%!s(int=770)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp9xt1byde_test.go:66: expected '%!s(int=8)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var pa, pb int\n    if k/2 > len(arr1) {\n        pa = len(arr1)\n    } else {\n        pa = k/2\n    }\n    pb = k - pa\n    if arr1[pa-1] < arr2[pb-1] {\n        return find_kth(arr1[pa:], arr2, k-pa)\n    } else if arr1[pa-1] > arr2[pb-1] {\n        return find_kth(arr1, arr2[pb:], k-pb)\n    } else {\n        return arr1[pa-1]\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            } else {\n                if arr1[1] < arr2[0] {\n                    return arr1[1]\n                } else {\n                    return arr2[0]\n                }\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            } else {\n                if arr2[1] < arr1[0] {\n                    return arr2[1]\n                } else {\n                    return arr1[0]\n                }\n            }\n        }\n    }\n    var a1, a2 int\n    if len(arr1) < k/2 {\n        a1 = arr1[len(arr1)-1]\n    } else {\n        a1 = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        a2 = arr2[len(arr2)-1]\n    } else {\n        a2 = arr2[k/2-1]\n    }\n    if a1 < a2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k / 2 {\n        a = arr1[len(arr1) - 1]\n    } else {\n        a = arr1[k / 2 - 1]\n    }\n    if len(arr2) < k / 2 {\n        b = arr2[len(arr2) - 1]\n    } else {\n        b = arr2[k / 2 - 1]\n    }\n    if a < b {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123459,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8j3u50fe_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            }\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            }\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[1]\n            }\n            if arr1[1] < arr2[0] {\n                if len(arr1) == 2 {\n                    return arr2[0]\n                }\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[1]\n            }\n            if arr2[1] < arr1[0] {\n                if len(arr2) == 2 {\n                    return arr1[0]\n                }\n                if arr2[2] < arr1[0] {\n                    return arr2[2]\n                } else {\n                    return arr1[0]\n                }\n            } else {\n                return arr1[0]\n            }\n        }\n   \nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123458,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8bp37cjj_test.go:79:6: expected '(', found TestFind_Kth\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    i := min(k/2, len(arr1))\n    j := min(k/2, len(arr2))\n    if arr1[i-1] > arr2[j-1] {\n        return find_kth(arr1, arr2[j:], k-j)\n    } else {\n        return find_kth(arr1[i:], arr2, k-i)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphji3c1r5_test.go:17:16: undefined: min\n/tmp/tmphji3c1r5_test.go:19:10: undefined: min\n/tmp/tmphji3c1r5_test.go:20:10: undefined: min\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp2xw8wq7d_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp2xw8wq7d_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp2xw8wq7d_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if k > len(arr1) + len(arr2) {\n        return -1\n    }\n\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123457,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:9 +0x370 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170498 sp=0xc020170448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170588 sp=0xc020170538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp4o1_kb6p_test.go:40 +0x32c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a92c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1)] {\n            return arr2[k - len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    } else if len(arr2) <= k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2)] {\n            return arr1[k - len(arr2)]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    } else {\n        if arr1[k / 2] < arr2[k / 2] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123461,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:9 +0x38b fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a98b\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc020170498 sp=0xc020170448 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc020170588 sp=0xc020170538 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp3lllzw99_test.go:39 +0x33c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a93c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123456,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123461,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:9 +0x21e fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a81e\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc020160498 sp=0xc020160448 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc020160588 sp=0xc020160538 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpm3u_uuvq_test.go:24 +0x165 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a765\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510567,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123460,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}