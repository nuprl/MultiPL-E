{
  "name": "mbpp_558_digit_distance_nums",
  "language": "go_test.go",
  "prompt": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt2iz05og_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10 - n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw4h9wfot_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    if n1 < 0 || n2 < 0 {\n        return -1\n    }\n    if n1 == 0 && n2 == 0 {\n        return 0\n    }\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp35y9p7ds_test.go:45: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp35y9p7ds_test.go:45: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp35y9p7ds_test.go:45: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digits []int = make([]int, n1_len)\n    var n2_digits []int = make([]int, n2_len)\n    var i int = 0\n    var j int = 0\n    var n1_digit int = 0\n    var n2_digit int = 0\n    for i = 0; i < n1_len; i++ {\n        n1_digits[i] = int(n1_str[i]) - 48\n    }\n    for j = 0; j < n2_len; j++ {\n        n2_digits[j] = int(n2_str[j]) - 48\n    }\n    for i = 0; i < n1_len; i++ {\n        n1_digit = n1_digits[i]\n        if i < n2_len {\n            n2_digit = n2_digits[i]\n        } else {\n            n2_digit = 0\n        }\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu2etxbx7_test.go:34:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 = n1 / 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 = n2 / 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxzjyixjy_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += (n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= (n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccdbfn8p_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_index int = 0\n    var n2_index int = 0\n    var n1_digit int = 0\n    var n2_digit int = 0\n    for n1_index < n1_len && n2_index < n2_len {\n        n1_digit = int(n1_str[n1_index]) - 48\n        n2_digit = int(n2_str[n2_index]) - 48\n        sum += abs(n1_digit - n2_digit)\n        n1_index++\n        n2_index++\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo3d5iszs_test.go:22:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += (n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= (n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_int int\n    var n2_int int\n    var i int\n    var j int\n    var diff int\n    if n1_len > n2_len {\n        for i = 0; i < n1_len; i++ {\n            if i < n2_len {\n                n1_int, _ = fmt.Sscanf(n1_str[i:i+1], \"%d\", &n1_int)\n                n2_int, _ = fmt.Sscanf(n2_str[i:i+1], \"%d\", &n2_int)\n                diff = n1_int - n2_int\n            } else {\n                n1_int, _ = fmt.Sscanf(n1_str[i:i+1], \"%d\", &n1_int)\n                diff = n1_int\n            }\n            sum += diff\n        }\n    } else {\n        for j = 0; j < n2_len; j++ {\n            if j < n1_len {\n                n1_int, _ = fmt.Sscanf(n1_str[j:j+1], \"%d\", &n1_int)\n                n2_int, _ = fmt.Sscanf(n2_str[j:j+1], \"%d\", &n2_int)\n                diff = n1_int - n2_int\n            } else {\n                n2_int, _ = fmt.Sscanf(n2_str[j:j+1], \"%d\", &n2_int)\n                diff = n2_int\n            }\n            sum += diff\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpeq5s7klz_test.go:63: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpeq5s7klz_test.go:63: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpeq5s7klz_test.go:63: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_i int = 0\n    var n2_i int = 0\n    for n1_i < n1_len && n2_i < n2_len {\n        var n1_digit int = int(n1_str[n1_i] - '0')\n        var n2_digit int = int(n2_str[n2_i] - '0')\n        sum += abs(n1_digit - n2_digit)\n        n1_i++\n        n2_i++\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpybi720oi_test.go:20:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10 - n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgamhg4l1_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt2iz05og_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var i int = 0\n    var n1_digit int = 0\n    var n2_digit int = 0\n\n    for i < n1_len && i < n2_len {\n        n1_digit = int(n1_str[i] - '0')\n        n2_digit = int(n2_str[i] - '0')\n        sum += abs(n1_digit - n2_digit)\n        i++\n    }\n\n    for i < n1_len {\n        n1_digit = int(n1_str[i] - '0')\n        sum += n1_digit\n        i++\n    }\n\n    for i < n2_len {\n        n2_digit = int(n2_str[i] - '0')\n        sum += n2_digit\n        i++\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgm6f3mwp_test.go:22:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 = n1 / 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 = n2 / 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxzjyixjy_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_index int = n1_len - 1\n    var n2_index int = n2_len - 1\n    for n1_index >= 0 || n2_index >= 0 {\n        var n1_digit int = 0\n        var n2_digit int = 0\n        if n1_index >= 0 {\n            n1_digit = int(n1_str[n1_index] - '0')\n        }\n        if n2_index >= 0 {\n            n2_digit = int(n2_str[n2_index] - '0')\n        }\n        sum += abs(n1_digit - n2_digit)\n        n1_index -= 1\n        n2_index -= 1\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptlvm141a_test.go:26:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt2iz05og_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0kc3u0v1_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        var d1 int = n1 % 10\n        var d2 int = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrl7ypxx_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpczxxawxi_test.go:40: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpczxxawxi_test.go:40: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpczxxawxi_test.go:40: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccdbfn8p_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 = n1 / 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 = n2 / 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpef9ysqhs_test.go:22:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10) - float64(n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1x8mv3c_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += (n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= (n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpjmm5kl63_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcdw37avg_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpdd_ga4sp_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccdbfn8p_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_arr []int = make([]int, n1_len)\n    var n2_arr []int = make([]int, n2_len)\n\n    for i := 0; i < n1_len; i++ {\n        n1_arr[i] = int(n1_str[i] - '0')\n    }\n    for i := 0; i < n2_len; i++ {\n        n2_arr[i] = int(n2_str[i] - '0')\n    }\n\n    var n1_idx int = n1_len - 1\n    var n2_idx int = n2_len - 1\n    for n1_idx >= 0 || n2_idx >= 0 {\n        var n1_val int = 0\n        var n2_val int = 0\n        if n1_idx >= 0 {\n            n1_val = n1_arr[n1_idx]\n        }\n        if n2_idx >= 0 {\n            n2_val = n2_arr[n2_idx]\n        }\n        sum += abs(n1_val - n2_val)\n        n1_idx--\n        n2_idx--\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphyz2mup6_test.go:36:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10 - n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgamhg4l1_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        var d1 int = n1 % 10\n        var d2 int = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrl7ypxx_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 = n1 / 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 = n2 / 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxzjyixjy_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0kc3u0v1_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt2iz05og_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10 - n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgamhg4l1_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwkkwqied_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx8czl5s_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpr5z72g0h_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp01yd6d3i_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpksi069y7_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510373,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3b7xapjc_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}