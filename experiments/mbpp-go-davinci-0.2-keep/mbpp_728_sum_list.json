{
  "name": "mbpp_728_sum_list",
  "language": "go_test.go",
  "prompt": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(lst1) != len(lst2) {\n        panic(\"lists are not the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"input lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    sum := make([]int, len(lst1))\n    for i := range lst1 {\n        sum[i] = lst1[i] + lst2[i]\n    }\n    return sum\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"length of lists must be equal\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    var lst3 []int\n    for i := 0; i < len(lst1); i++ {\n        lst3 = append(lst3, lst1[i] + lst2[i])\n    }\n    return lst3\n}\n",
    "    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of same length\")\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    var sum []int\n    for i := 0; i < len(lst1); i++ {\n        sum = append(sum, lst1[i] + lst2[i])\n    }\n    return sum\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    var result []int\n    for i := 0; i < len(lst1); i++ {\n        result = append(result, lst1[i] + lst2[i])\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(lst1))\n    for i, _ := range lst1 {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n",
    "    if len(lst1) != len(lst2) {\n        return nil\n    }\n    result := make([]int, len(lst1))\n    for i := 0; i < len(lst1); i++ {\n        result[i] = lst1[i] + lst2[i]\n    }\n    return result\n}\n"
  ]
}