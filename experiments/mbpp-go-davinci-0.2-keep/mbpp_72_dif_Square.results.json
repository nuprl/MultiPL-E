{
  "name": "mbpp_72_dif_Square",
  "language": "go_test.go",
  "prompt": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmplx594fif_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n        for j := i+1; j*j <= n; j++ {\n            if i*i + j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpq2pwa3wz_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpq2pwa3wz_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp4knq070l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp4knq070l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n / 2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpf0ldnk21_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpf0ldnk21_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp_661mzp5_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j < n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmps1f3b0rs_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmps1f3b0rs_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    return n % 4 == 0\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpj_tudszj_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpj_tudszj_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n        for j := i+1; j*j <= n; j++ {\n            if i*i + j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpq2pwa3wz_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpq2pwa3wz_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 2; i < n; i++ {\n        if i * i > n {\n            return false\n        }\n        if n % (i * i) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpl1gs7wnn_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpl1gs7wnn_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        j := n - i * i\n        if j < 0 {\n            break\n        }\n        if j == 0 {\n            return true\n        }\n        if j % 2 == 0 {\n            j /= 2\n            if j % 2 == 0 {\n                j /= 2\n                if j % 2 == 0 {\n                    j /= 2\n                    if j % 2 == 0 {\n                        j /= 2\n                    }\n                }\n            }\n            if j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpcl_h79gs_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpcl_h79gs_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9mxg2gin_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9mxg2gin_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpen0bvng0_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpen0bvng0_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9fod8lot_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9fod8lot_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpcamyq50z_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpcamyq50z_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpx2rlhn5p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i < n; i++ {\n        for j := 0; j * j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpjuuy1gsk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjuuy1gsk_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % (i * i) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmph7sgbqrf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmph7sgbqrf_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpp4x0dovf_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j * j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpfnr_6pqj_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpfnr_6pqj_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        if i*i > n {\n            return false\n        }\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp6tefnshg_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if (n % i == 0) && ((n / i) % 2 == 0) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp5rgao7u3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp5rgao7u3_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp5rgao7u3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i*i <= n; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpcamyq50z_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpcamyq50z_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp3ua4x86q_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp3ua4x86q_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j <= n/2; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpjn9dkb3f_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjn9dkb3f_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpw_zxzduj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpw_zxzduj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpzj1cm089_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpzj1cm089_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp0g5sftvx_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp0g5sftvx_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        for j := 1; j <= n/2; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp8nuhc_gg_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        if i*i - (n-i)*(n-i) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpd0z79ka5_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpd0z79ka5_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpd0z79ka5_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp0ul5im13_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp0ul5im13_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := i; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmphi9uvwnl_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmphi9uvwnl_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if n % i == 0 {\n            if i * i == n {\n                return true\n            }\n            if (n / i) % 2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp4wxjp5vv_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp4wxjp5vv_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp4wxjp5vv_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpxodymgvx_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpxodymgvx_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        j := n - i * i\n        if j >= 0 && j == int(math.Sqrt(float64(j))) * int(math.Sqrt(float64(j))) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhmdjk09_test.go:18:31: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmppa7nbtn9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmppa7nbtn9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpxodymgvx_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpxodymgvx_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpw_zxzduj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpw_zxzduj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n / 2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpf0ldnk21_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpf0ldnk21_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    // Write your code here\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i * i <= n; i++ {\n        if n % i == 0 {\n            if (n / i) % 2 == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpmtqhljxf_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpmtqhljxf_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpmtqhljxf_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n        if dif_Square(n - i * i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpqwiqvuc0_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i < n; i++ {\n        if i * i > n {\n            break\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpf9h0t6cv_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9fod8lot_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9fod8lot_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        if n % i == 0 {\n            if i % 2 == 0 {\n                if n / i % 2 == 0 {\n                    return true\n                }\n            } else {\n                if i % 4 == 3 && n / i % 4 == 3 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpeyfqz9_v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpeyfqz9_v_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i * i <= n; i++ {\n        for j := 0; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9fod8lot_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9fod8lot_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpjcubly23_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpjcubly23_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        for j := i; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp6c99648p_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp6c99648p_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp87c8ov5e_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp87c8ov5e_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp0wuituqz_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp0wuituqz_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i*i <= n; i++ {\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpamja7vtm_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := i; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp_35o2tuh_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp_35o2tuh_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpc8x5wzfm_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpc8x5wzfm_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmptxp2zrms_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmptxp2zrms_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        if i*i > n {\n            return false\n        }\n        if (n - i*i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp65apcldm_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpsiicc2kc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpsiicc2kc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp9rcxzv6d_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp9rcxzv6d_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := i; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmproan2354_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmproan2354_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        for j := 1; j * j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb70_1wh__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp4a66osxk_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    var i int\n    for i = 1; i < n; i++ {\n        if i * i > n {\n            break\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpf9h0t6cv_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n        if dif_Square(n - i * i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpqwiqvuc0_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpxodymgvx_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpxodymgvx_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n/2; i++ {\n        for j := 1; j <= n/2; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp8nuhc_gg_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp4a66osxk_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if i*i > n {\n            return false\n        }\n        for j := i; j <= n; j++ {\n            if i*i + j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmpwdt34iw2_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpwdt34iw2_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i < n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp_r9xl_ay_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp_r9xl_ay_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp1ett8fmk_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpsiicc2kc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpsiicc2kc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpw_zxzduj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpw_zxzduj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp37fygp60_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i*i <= n; i++ {\n        for j := 1; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpis2eztw0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if i*i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpb_ou9u3g_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpb_ou9u3g_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i*i <= n; i++ {\n        for j := 0; j*j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmpnouqubq6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if i * i == n {\n            return true\n        }\n        for j := i + 1; j <= n; j++ {\n            if i * i + j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp3ua4x86q_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp3ua4x86q_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    for i := 1; i <= n; i++ {\n        if i * i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__0 (0.00s)\n        tmps70l64_x_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmps70l64_x_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i < n; i++ {\n        for j := 1; j < n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i * i - j * j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        if i * i > n {\n            return false\n        }\n        if (n - i * i) % 2 == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp60aqrypk_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510615,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if i*i - j*j == n {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i * i <= n; i++ {\n        j := n - i * i\n        if j < 0 {\n            break\n        }\n        if j == 0 {\n            return true\n        }\n        for k := 1; k * k <= j; k++ {\n            if k * k == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestDif_Square (0.00s)\n    --- FAIL: TestDif_Square/test_num__1 (0.00s)\n        tmp_a7xbi9i_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDif_Square/test_num__2 (0.00s)\n        tmp_a7xbi9i_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}