{
  "name": "mbpp_272_rear_extract",
  "language": "go_test.go",
  "prompt": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n",
    "    // Your code here\n    return []int{}\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n",
    "    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n",
    "    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n"
  ]
}