{
  "name": "mbpp_598_armstrong_number",
  "language": "go_test.go",
  "prompt": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digits []int\n    var temp int\n    var i int\n\n    temp = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n\n    for i = 0; i < len(digits); i++ {\n        sum += digits[i] * digits[i] * digits[i]\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var num int\n    var digit int\n    num = number\n    for num != 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int = 0\n    var temp int = number\n\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digits []int\n    var temp int = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp /= 10\n    }\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digits []int\n    var digit int\n    var temp int\n\n    temp = number\n    for temp > 0 {\n        digit = temp % 10\n        digits = append(digits, digit)\n        temp = temp / 10\n    }\n\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digits int\n    var temp int\n    var remainder int\n\n    temp = number\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7cxh4p6p_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpriy6mg21_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpriy6mg21_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmplm5e75oy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123135,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp15ngwxd_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        sum += (temp % 10) * (temp % 10) * (temp % 10)\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digits []int\n    var temp int = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp /= 10\n    }\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var num int\n    var digit int\n    num = number\n    for num != 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123135,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp15ngwxd_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5g7p81qv_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := make([]int, 0)\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    var sum int\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7t496y8z_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp = temp / 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum = sum + power(remainder, digits)\n        temp = temp / 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123135,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcij43xc_test.go:23:21: undefined: power\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123122,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd3ri502l_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    for _, digit := range fmt.Sprintf(\"%d\", number) {\n        sum += int(digit - '0')\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmphgi9jni3_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var temp, remainder, sum int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123127,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for {\n        if temp == 0 {\n            break\n        }\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        var digit int = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmpsc1xcg2w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n\n    temp = number\n    for temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123127,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int\n    var armstrong bool\n    var i int\n\n    temp = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n\n    for i = 0; i < len(digits); i++ {\n        sum = sum + digits[i] * digits[i] * digits[i]\n    }\n\n    if sum == number {\n        armstrong = true\n    } else {\n        armstrong = false\n    }\n\n    return armstrong\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int\n\n    temp = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int\n\n    temp = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123122,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd3ri502l_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp = temp / 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var tmp int\n    var digit int\n    tmp = number\n    for tmp > 0 {\n        digit = tmp % 10\n        sum += digit * digit * digit\n        tmp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int\n    var result bool\n    var i int\n    digits = make([]int, 0, 10)\n    sum = 0\n    temp = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n    for i = 0; i < len(digits); i++ {\n        sum += digits[i] * digits[i] * digits[i]\n    }\n    if sum == number {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123122,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd3ri502l_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var temp, remainder, sum int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5g7p81qv_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjpjy45qh_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var num int = number\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int = number\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        sum += (temp % 10) * (temp % 10) * (temp % 10)\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123135,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp46l2pa6i_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := make([]int, 0)\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123129,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmpkayt_0ej_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    if number < 0 {\n        return false\n    }\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        sum += (temp % 10) * (temp % 10) * (temp % 10)\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5g7p81qv_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5g7p81qv_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmplm5e75oy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjpjy45qh_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := make([]int, 0)\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmpfcxe51in_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n\n    temp = number\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digits []int\n    var temp int = number\n    for temp > 0 {\n        digits = append(digits, temp%10)\n        temp = temp/10\n    }\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123137,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123137,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123137,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprei1ez_x_test.go:24:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n\n    temp = number\n\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var original_number = number\n    var sum int = 0\n    var remainder int = 0\n    for number != 0 {\n        remainder = number % 10\n        sum += remainder * remainder * remainder\n        number /= 10\n    }\n    if original_number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var remainder int\n    var temp int\n\n    temp = number\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmplm5e75oy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123130,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5g7p81qv_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprc4iaz5r_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := make([]int, 0)\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmpfcxe51in_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int\n    var digit int\n\n    temp = number\n    for temp > 0 {\n        digit = temp % 10\n        digits = append(digits, digit)\n        temp = temp / 10\n    }\n\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphtqnrmb8_test.go:21:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp__09o6ph_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int = 0\n    var temp int = number\n\n    for temp > 0 {\n        digits = append(digits, temp % 10)\n        temp = temp / 10\n    }\n\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        sum += (temp % 10) * (temp % 10) * (temp % 10)\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvhiqo2zk_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123129,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5g7p81qv_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp = temp / 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmplm5e75oy_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n\n    temp = number\n\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var digits []int\n    var sum int\n    var temp int\n    var result bool\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    for _, digit := range digits {\n        temp = digit\n        for i := 1; i < len(digits); i++ {\n            temp *= digit\n        }\n        sum += temp\n    }\n    if sum == number {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp6bulcjdg_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var digit int = 0\n    var temp int = number\n\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var remainder int = 0\n    var temp int = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp != 0 {\n        sum += (temp % 10) * (temp % 10) * (temp % 10)\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        digit := temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123136,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpriy6mg21_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    for temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123129,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    for temp > 0 {\n        remainder := temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    return (number == sum)\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpriy6mg21_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += pow(remainder, digits)\n        temp /= 10\n    }\n\n    return number == sum\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123122,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd3ri502l_test.go:23:16: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var num int = number\n    var digit int = 0\n    for num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int = 0\n    var temp int = number\n    var remainder int = 0\n    var digits int = 0\n\n    for temp != 0 {\n        digits++\n        temp /= 10\n    }\n\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += int(math.Pow(float64(remainder), float64(digits)))\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    }\n\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123138,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp__09o6ph_test.go:23:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var temp int\n    var remainder int\n    temp = number\n    for temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n\n    temp = number\n\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n\n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123131,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    var sum int\n    var digit int\n    var temp int\n    temp = number\n    for temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if number == sum {\n        return true\n    }\n    return false\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n    digits := []int{}\n    for number > 0 {\n        digits = append(digits, number % 10)\n        number /= 10\n    }\n    sum := 0\n    for _, digit := range digits {\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\nfunc TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123123,
      "stdout": "--- FAIL: TestArmstrong_Number (0.00s)\n    --- FAIL: TestArmstrong_Number/test_num__0 (0.00s)\n        tmp7gens42w_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}