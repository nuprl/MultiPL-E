{
  "name": "mbpp_413_extract_nth_element",
  "language": "go_test.go",
  "prompt": "package extract_nth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the nth element from a given list of tuples.\nfunc extract_nth_element(list1 [][]interface{}, n int) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestExtract_Nth_Element(t *testing.T) {\n  candidate := extract_nth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}}, 0), expected: []string{\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"} },\n     { actual: candidate([][]int{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}}, 2), expected: []int{99, 96, 94, 98} },\n     { actual: candidate([][]int{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}}, 1), expected: []int{98, 97, 91, 94} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result interface{}\n    for _, tuple := range list1 {\n        result = tuple[n]\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, tuple := range list1 {\n        result = append(result, tuple[n])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range list1 {\n        result = append(result, v[n])\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, tuple := range list1 {\n        result = tuple[n]\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, tuple := range list1 {\n        result = append(result, tuple[n])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range list1 {\n        result = append(result, v[n])\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, tuple := range list1 {\n        result = tuple[n]\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, tuple := range list1 {\n        result = tuple[n]\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range list1 {\n        result = append(result, v[n])\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, v := range list1 {\n        result = v[n]\n    }\n    return result\n}\n",
    "    return list1[n][0]\n}\n",
    "    var result interface{}\n    for _, v := range list1 {\n        result = v[n]\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, tuple := range list1 {\n        result = tuple[n]\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, tuple := range list1 {\n        if len(tuple) >= n {\n            result = tuple[n-1]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, v := range list1 {\n        result = v[n]\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range list1 {\n        result = append(result, v[n])\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, v := range list1 {\n        result = v[n]\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, v := range list1 {\n        result = v[n]\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, v := range list1 {\n        result = v[n]\n    }\n    return result\n}\n",
    "    var result interface{}\n    for _, tuple := range list1 {\n        result = tuple[n]\n    }\n    return result\n}\n"
  ]
}