{
  "name": "mbpp_69_is_sublist",
  "language": "go_test.go",
  "prompt": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpss3airiz_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(l) < len(s) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmp5cj14bxo_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpw1oz_yy0_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) || l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpciffbggi_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) {\n                    return false\n                }\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) || l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if l[i:i+len(s)] == s {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf0j4mrbv_test.go:15:30: invalid operation: l[i:i + len(s)] == s (slice can only be compared to nil)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmp0b9mf03s_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if len(l) - i < len(s) {\n                return false\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.016s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpd9829plh_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    } else {\n        return is_sublist(l[1:], s)\n    }\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpk0xdgsu1_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmp00o4twd6_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    if len(s) == 0 {\n        return true\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpwve5xqfe_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) {\n                    return false\n                }\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpd9829plh_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            found := true\n            for j := 0; j < len(s); j++ {\n                if i+j >= len(l) || l[i+j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmp00o4twd6_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) {\n                    return false\n                }\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n\n    if len(l) < len(s) {\n        return false\n    }\n\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if is_sublist(l[i:], s) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160350 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722c, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:9 +0x14c fp=0xc020160360 sp=0xc020160358 pc=0x50a74c\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc0201603b0 sp=0xc020160360 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc020160400 sp=0xc0201603b0 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc020160450 sp=0xc020160400 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc0201604a0 sp=0xc020160450 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc0201604f0 sp=0xc0201604a0 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc020160540 sp=0xc0201604f0 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc020160590 sp=0xc020160540 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04015fe80, 0x3, 0x3, 0xc04015fe40, 0x2, 0x2, 0x0)\n\t/tmp/tmpju5clzj2_test.go:20 +0xd1 fp=0xc0201605e0 sp=0xc020160590 pc=0x50a6d1\ncommand-line-arguments_test.is_sublist(0xc04",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpciffbggi_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            j := 0\n            for ; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n            }\n            if j == len(s) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            j := 0\n            for ; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n            }\n            if j == len(s) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            j := 0\n            for ; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n            }\n            if j == len(s) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) || l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    if len(s) == 0 {\n        return true\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpwve5xqfe_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            match := true\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    match = false\n                    break\n                }\n            }\n            if match {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) || l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i + j >= len(l) {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    } else {\n        return is_sublist(l[1:], s)\n    }\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpk0xdgsu1_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmp00o4twd6_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            for j := 1; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(l) < len(s) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmp5u_oky41_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpd9829plh_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if i+j >= len(l) {\n                    return false\n                }\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            for j := 0; j < len(s); j++ {\n                if l[i+j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) == 0 {\n        return true\n    }\n    if len(l) == 0 {\n        return false\n    }\n    if l[0] == s[0] {\n        return is_sublist(l[1:], s[1:])\n    }\n    return is_sublist(l[1:], s)\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510400,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmphvxo6y1j_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l) - len(s) + 1; i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpgyfvp2hw_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            for j := 1; j < len(s); j++ {\n                if l[i + j] != s[j] {\n                    break\n                }\n                if j == len(s) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i <= len(l) - len(s); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpfrwomzn9_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n    if len(s) > len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] == s[0] {\n            if len(s) == 1 {\n                return true\n            }\n            if is_sublist(l[i+1:], s[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510399,
      "stdout": "--- FAIL: TestIs_Sublist (0.00s)\n    --- FAIL: TestIs_Sublist/test_num__0 (0.00s)\n        tmpo02q1_ga_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}