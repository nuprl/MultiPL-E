{
  "name": "mbpp_166_find_even_pair",
  "language": "go_test.go",
  "prompt": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if A[i] ^ A[j] % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpxlw6l_z3_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpxlw6l_z3_test.go:36: expected '%!s(int=9)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if A[i] ^ A[j] % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmp2bao6qqm_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmp2bao6qqm_test.go:36: expected '%!s(int=9)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var even_pairs int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                even_pairs++\n            }\n        }\n    }\n    return even_pairs\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__2 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__2 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var result int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var even_pair_count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                even_pair_count++\n            }\n        }\n    }\n    return even_pair_count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    result := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    even_count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                even_count++\n            }\n        }\n    }\n    return even_count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__2 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if A[i] ^ A[j] % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpchrmacla_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpchrmacla_test.go:36: expected '%!s(int=9)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var result int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__2 (0.00s)\n        tmpqqsc05w6_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i, a := range A {\n        for j, b := range A {\n            if i != j && (a ^ b) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpzaekncfe_test.go:36: expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpzaekncfe_test.go:36: expected '%!s(int=9)', got '%!s(int=18)'\n    --- FAIL: TestFind_Even_Pair/test_num__2 (0.00s)\n        tmpzaekncfe_test.go:36: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var even_pairs int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                even_pairs++\n            }\n        }\n    }\n    return even_pairs\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    even_count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                even_count += 1\n            }\n        }\n    }\n    return even_count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if A[i] ^ A[j] % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpxlw6l_z3_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpxlw6l_z3_test.go:36: expected '%!s(int=9)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if A[i] ^ A[j] % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "--- FAIL: TestFind_Even_Pair (0.00s)\n    --- FAIL: TestFind_Even_Pair/test_num__0 (0.00s)\n        tmpchrmacla_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_Even_Pair/test_num__1 (0.00s)\n        tmpchrmacla_test.go:36: expected '%!s(int=9)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var result int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var result int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122760,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    even_count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                even_count++\n            }\n        }\n    }\n    return even_count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122762,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510178,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}