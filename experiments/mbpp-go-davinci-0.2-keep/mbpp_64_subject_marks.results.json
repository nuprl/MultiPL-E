{
  "name": "mbpp_64_subject_marks",
  "language": "go_test.go",
  "prompt": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    var temp []interface{}\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp = subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp52u3e9w8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp52u3e9w8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:30:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp52u3e9w8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:31:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp52u3e9w8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:32:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2t_fm0r9_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t_fm0r9_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t_fm0r9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t_fm0r9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks) - 1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j+1][1].(int) {\n                subjectmarks[j], subjectmarks[j+1] = subjectmarks[j+1], subjectmarks[j]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp0i4upyj_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp0i4upyj_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp0i4upyj_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp0i4upyj_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp0i4upyj_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp0i4upyj_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp0i4upyj_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp0i4upyj_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp0i4upyj_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiffkphgk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiffkphgk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiffkphgk_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiffkphgk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiffkphgk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiffkphgk_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiffkphgk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiffkphgk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiffkphgk_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i+1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdprvlhcr_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdprvlhcr_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdprvlhcr_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdprvlhcr_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdprvlhcr_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdprvlhcr_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdprvlhcr_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdprvlhcr_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdprvlhcr_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplz0zz03__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // sort the list of tuples using the second value of each tuple\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpra8ch8kd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpra8ch8kd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra8ch8kd_test.go:28:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra8ch8kd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpra8ch8kd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra8ch8kd_test.go:29:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra8ch8kd_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpra8ch8kd_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra8ch8kd_test.go:30:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks)-1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j+1][1].(int) {\n                subjectmarks[j], subjectmarks[j+1] = subjectmarks[j+1], subjectmarks[j]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq2r00iy_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyq2r00iy_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyq2r00iy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyq2r00iy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks)-1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j+1][1].(int) {\n                subjectmarks[j], subjectmarks[j+1] = subjectmarks[j+1], subjectmarks[j]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq2r00iy_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyq2r00iy_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyq2r00iy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyq2r00iy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyq2r00iy_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplz0zz03__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    var sortedmarks [][]interface{}\n    var temp []interface{}\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp = subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    sortedmarks = subjectmarks\n    return sortedmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u99gey3_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9u99gey3_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9u99gey3_test.go:32:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9u99gey3_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9u99gey3_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9u99gey3_test.go:33:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9u99gey3_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9u99gey3_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9u99gey3_test.go:34:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks) - 1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j + 1][1].(int) {\n                temp := subjectmarks[j]\n                subjectmarks[j] = subjectmarks[j + 1]\n                subjectmarks[j + 1] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4e7eebtb_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4e7eebtb_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4e7eebtb_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4e7eebtb_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    var temp []interface{}\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp = subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp52u3e9w8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp52u3e9w8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:30:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp52u3e9w8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:31:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp52u3e9w8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp52u3e9w8_test.go:32:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks) - 1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j+1][1].(int) {\n                temp := subjectmarks[j]\n                subjectmarks[j] = subjectmarks[j+1]\n                subjectmarks[j+1] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8sjjanyy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8sjjanyy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8sjjanyy_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8sjjanyy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8sjjanyy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8sjjanyy_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8sjjanyy_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8sjjanyy_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8sjjanyy_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpejcsafsp_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpejcsafsp_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpejcsafsp_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpejcsafsp_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks) - 1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j + 1][1].(int) {\n                subjectmarks[j], subjectmarks[j + 1] = subjectmarks[j + 1], subjectmarks[j]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl8h2xzy4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl8h2xzy4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl8h2xzy4_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl8h2xzy4_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl8h2xzy4_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl8h2xzy4_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl8h2xzy4_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl8h2xzy4_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl8h2xzy4_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks) - 1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j + 1][1].(int) {\n                temp := subjectmarks[j]\n                subjectmarks[j] = subjectmarks[j + 1]\n                subjectmarks[j + 1] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4e7eebtb_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4e7eebtb_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4e7eebtb_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4e7eebtb_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4e7eebtb_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i+1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptlvfa_2a_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptlvfa_2a_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptlvfa_2a_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptlvfa_2a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptlvfa_2a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptlvfa_2a_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptlvfa_2a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptlvfa_2a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptlvfa_2a_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    var temp []interface{}\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks)-1; j++ {\n            if subjectmarks[j][1].(int) > subjectmarks[j+1][1].(int) {\n                temp = subjectmarks[j]\n                subjectmarks[j] = subjectmarks[j+1]\n                subjectmarks[j+1] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoydrr6f3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpoydrr6f3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoydrr6f3_test.go:30:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoydrr6f3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpoydrr6f3_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoydrr6f3_test.go:31:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoydrr6f3_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpoydrr6f3_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoydrr6f3_test.go:32:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpejcsafsp_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpejcsafsp_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpejcsafsp_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpejcsafsp_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpejcsafsp_test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplz0zz03__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplz0zz03__test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplz0zz03__test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) < subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8t20re7v_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8t20re7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8t20re7v_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2t_fm0r9_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t_fm0r9_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t_fm0r9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2t_fm0r9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2t_fm0r9_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogqmw6e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogqmw6e9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogqmw6e9_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks) - 1; i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwqmi71mm_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwqmi71mm_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwqmi71mm_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwqmi71mm_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwqmi71mm_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwqmi71mm_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwqmi71mm_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwqmi71mm_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwqmi71mm_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                temp := subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123845,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaykop0k_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:29:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:30:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyaykop0k_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyaykop0k_test.go:31:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := 0; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx784_au_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgx784_au_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgx784_au_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    for i := 0; i < len(subjectmarks); i++ {\n        for j := i + 1; j < len(subjectmarks); j++ {\n            if subjectmarks[i][1].(int) > subjectmarks[j][1].(int) {\n                subjectmarks[i], subjectmarks[j] = subjectmarks[j], subjectmarks[i]\n            }\n        }\n    }\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbax7yq45_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:27:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:28:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbax7yq45_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbax7yq45_test.go:29:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n    // Write your code here\n    return subjectmarks\n}\n\nfunc TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517551,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sw7923__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:21:193: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:22:154: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_sw7923__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_sw7923__test.go:23:159: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}