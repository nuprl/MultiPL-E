{
  "name": "mbpp_454_text_match_wordz",
  "language": "go_test.go",
  "prompt": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__2 (0.00s)\n        tmpdzr3cujj_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__2 (0.00s)\n        tmpdzr3cujj_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__0 (0.00s)\n        tmpvbtuwwtk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Wordz/test_num__1 (0.00s)\n        tmpvbtuwwtk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__0 (0.00s)\n        tmp3xc0z18c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Wordz/test_num__1 (0.00s)\n        tmp3xc0z18c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__2 (0.00s)\n        tmpdzr3cujj_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__0 (0.00s)\n        tmp3xc0z18c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Wordz/test_num__1 (0.00s)\n        tmp3xc0z18c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, r := range text {\n        if r == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, r := range text {\n        if r == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__2 (0.00s)\n        tmpdzr3cujj_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__0 (0.00s)\n        tmpn0go098__test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Wordz/test_num__1 (0.00s)\n        tmpn0go098__test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__0 (0.00s)\n        tmpvbtuwwtk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Wordz/test_num__1 (0.00s)\n        tmpvbtuwwtk_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, letter := range text {\n        if letter == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    // Write code here\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "--- FAIL: TestText_Match_Wordz (0.00s)\n    --- FAIL: TestText_Match_Wordz/test_num__0 (0.00s)\n        tmp3xc0z18c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Wordz/test_num__1 (0.00s)\n        tmp3xc0z18c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123476,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, c := range text {\n        if c == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n    for _, char := range text {\n        if char == 'z' {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510606,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}