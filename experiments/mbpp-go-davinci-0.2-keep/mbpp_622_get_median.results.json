{
  "name": "mbpp_622_get_median",
  "language": "go_test.go",
  "prompt": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m1 = float64(arr2[j-1])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m1 = float64(arr1[i-1])\n        } else {\n            m1 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if i == n-1 {\n            m2 = float64(arr2[j])\n        } else if j == n-1 {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if m1 < m2 {\n            j++\n        } else {\n            i++\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpcrme7myg_test.go:54: expected '%!s(float64=16)', got '%!s(float64=14)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpcrme7myg_test.go:54: expected '%!s(float64=8.5)', got '%!s(float64=7.5)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpcrme7myg_test.go:54: expected '%!s(float64=25)', got '%!s(float64=33)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr2[n/2-1:], arr1[:n/2+1], n-n/2+1)\n    }\n    return get_median(arr2[n/2:], arr1[:n/2+1], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuaey3tcf_test.go:17:24: undefined: max\n/tmp/tmpuaey3tcf_test.go:17:48: undefined: min\n/tmp/tmpuaey3tcf_test.go:20:11: undefined: median\n/tmp/tmpuaey3tcf_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5gpa5u_test.go:20:24: undefined: max\n/tmp/tmp_u5gpa5u_test.go:20:48: undefined: min\n/tmp/tmp_u5gpa5u_test.go:23:10: undefined: median\n/tmp/tmp_u5gpa5u_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = m2\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m1 = m2\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpya_1a26l_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = m2\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m1 = m2\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwjcqg_v_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return (float64(arr1[0]) + float64(arr2[0])) / 2\n    }\n\n    if n == 2 {\n        return (float64(max(arr1[0], arr2[0])) + float64(min(arr1[1], arr2[1]))) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprwpfix1m_test.go:22:25: undefined: max\n/tmp/tmprwpfix1m_test.go:22:58: undefined: min\n/tmp/tmprwpfix1m_test.go:25:10: undefined: median\n/tmp/tmprwpfix1m_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := 0\n    m2 := 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpnwcfyw5u_test.go:64: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpnwcfyw5u_test.go:64: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpnwcfyw5u_test.go:64: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j, count int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dpp23hn_test.go:22:24: undefined: max\n/tmp/tmp3dpp23hn_test.go:22:48: undefined: min\n/tmp/tmp3dpp23hn_test.go:25:10: undefined: median\n/tmp/tmp3dpp23hn_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i, j := 0, 0\n    m1, m2 := -1, -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n + n) % 2 == 0 {\n        if j == n {\n            m2 = float64(arr1[i])\n        } else if i == n {\n            m2 = float64(arr2[j])\n        } else if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n        return (m1 + m2) / 2\n    }\n    return m1\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpo2vga3wr_test.go:59: expected '%!s(float64=16)', got '%!s(float64=41.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpo2vga3wr_test.go:59: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpo2vga3wr_test.go:59: expected '%!s(float64=25)', got '%!s(float64=45.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2 + 1], arr2[n/2 - 1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2 + 1], arr2[n/2:], n - n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123805,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfvo36x4m_test.go:17:24: undefined: max\n/tmp/tmpfvo36x4m_test.go:17:48: undefined: min\n/tmp/tmpfvo36x4m_test.go:20:11: undefined: median\n/tmp/tmpfvo36x4m_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2 + 1], arr2[n/2 - 1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2 + 1], arr2[n/2:], n - n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9f381lt4_test.go:17:24: undefined: max\n/tmp/tmp9f381lt4_test.go:17:48: undefined: min\n/tmp/tmp9f381lt4_test.go:20:11: undefined: median\n/tmp/tmp9f381lt4_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n    i = 0\n    j = 0\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        m = get_median(arr1[i:], arr2[:j], j)\n    } else {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2 + 1\n        }\n        m = get_median(arr2[i:], arr1[:j], j)\n    }\n\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpevzd3mem_test.go:25:24: undefined: max\n/tmp/tmpevzd3mem_test.go:25:48: undefined: min\n/tmp/tmpevzd3mem_test.go:28:10: undefined: median\n/tmp/tmpevzd3mem_test.go:29:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01kylwfn_test.go:23:24: undefined: max\n/tmp/tmp01kylwfn_test.go:23:48: undefined: min\n/tmp/tmp01kylwfn_test.go:26:10: undefined: median\n/tmp/tmp01kylwfn_test.go:27:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2 + 1], arr2[n/2 - 1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2 + 1], arr2[n/2:], n - n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123805,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfvo36x4m_test.go:17:24: undefined: max\n/tmp/tmpfvo36x4m_test.go:17:48: undefined: min\n/tmp/tmpfvo36x4m_test.go:20:11: undefined: median\n/tmp/tmpfvo36x4m_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(m2)\n            m2 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(m2)\n            m2 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(m2)\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(m2)\n            m2 = float64(arr2[j])\n            j++\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpgov_yebu_test.go:57: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpgov_yebu_test.go:57: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpgov_yebu_test.go:57: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(m2)\n            m2 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(m2)\n            m2 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(m2)\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(m2)\n            m2 = float64(arr2[j])\n            j++\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n/2+1)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n/2+1)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy5tamytn_test.go:17:24: undefined: max\n/tmp/tmpy5tamytn_test.go:17:48: undefined: min\n/tmp/tmpy5tamytn_test.go:20:11: undefined: median\n/tmp/tmpy5tamytn_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpm6es_m6v_test.go:60: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpm6es_m6v_test.go:60: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpm6es_m6v_test.go:60: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 int\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            break\n        }\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwqg41axj_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n/tmp/tmpwqg41axj_test.go:25:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n + n) & 1 == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp2umc3hm9_test.go:59: expected '%!s(float64=16)', got '%!s(float64=41.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp2umc3hm9_test.go:59: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp2umc3hm9_test.go:59: expected '%!s(float64=25)', got '%!s(float64=45.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr2[n/2 - 1:], arr1[:n/2 + 1], n - n/2 + 1)\n    }\n    return get_median(arr2[n/2:], arr1[:n/2 + 1], n - n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz0ka6efd_test.go:17:24: undefined: max\n/tmp/tmpz0ka6efd_test.go:17:48: undefined: min\n/tmp/tmpz0ka6efd_test.go:20:11: undefined: median\n/tmp/tmpz0ka6efd_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoe734krg_test.go:22:24: undefined: max\n/tmp/tmpoe734krg_test.go:22:48: undefined: min\n/tmp/tmpoe734krg_test.go:25:10: undefined: median\n/tmp/tmpoe734krg_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m1 = float64(arr2[j-1])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m1 = float64(arr1[i-1])\n        } else {\n            m1 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m2 = float64(arr2[j])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if m1 == m2 {\n            return m1\n        }\n    }\n    return -1\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmps6p9ku4b_test.go:51: expected '%!s(float64=16)', got '%!s(float64=1.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmps6p9ku4b_test.go:51: expected '%!s(float64=8.5)', got '%!s(float64=4.5)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmps6p9ku4b_test.go:51: expected '%!s(float64=25)', got '%!s(float64=2.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppvjo7has_test.go:17:24: undefined: max\n/tmp/tmppvjo7has_test.go:17:48: undefined: min\n/tmp/tmppvjo7has_test.go:19:11: undefined: median\n/tmp/tmppvjo7has_test.go:20:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i <= n; {\n        if i == 0 {\n            m1 = float64(arr1[i])\n        } else if i == n {\n            m1 = float64(arr2[j-1])\n        } else if j == n {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr1[i] + arr2[j-1]) / 2\n        }\n\n        if j == 0 {\n            m2 = float64(arr2[j])\n        } else if j == n {\n            m2 = float64(arr1[i-1])\n        } else if i == n {\n            m2 = float64(arr2[j])\n        } else {\n            m2 = float64(arr1[i-1] + arr2[j]) / 2\n        }\n\n        if m1 == m2 {\n            return m1\n        }\n\n        if m1 < m2 {\n            i++\n        } else {\n            j++\n        }\n    }\n\n    return -1\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.get_median(0xc000092660, 0x5, 0x5, 0xc000092638, 0x5, 0x5, 0x5, 0x4cd164)\n\t/tmp/tmpriuy1vt2_test.go:20 +0x1f1\ncommand-line-arguments_test.TestGet_Median(0xc000001380)\n\t/tmp/tmpriuy1vt2_test.go:54 +0x13b\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[j])\n    } else {\n        m2 = float64(arr1[i])\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptof1txad_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    count := 0\n    m1 := -1\n    m2 := -1\n    for count < n + 1 {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count < n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n            j = 0\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else {\n        m2 = float64(arr1[i])\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd3peyh3v_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if i == n-1 {\n            m1 = float64(arr1[i])\n        }\n        if j == n-1 {\n            m2 = float64(arr2[j])\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp5poba1xh_test.go:48: expected '%!s(float64=16)', got '%!s(float64=20)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp5poba1xh_test.go:48: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp5poba1xh_test.go:48: expected '%!s(float64=25)', got '%!s(float64=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6zyz8x__test.go:17:24: undefined: max\n/tmp/tmpb6zyz8x__test.go:17:48: undefined: min\n/tmp/tmpb6zyz8x__test.go:20:11: undefined: median\n/tmp/tmpb6zyz8x__test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            m2 = float64(arr2[1])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            m2 = float64(arr1[1])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m2 = float64(arr2[0])\n            break\n        } else if j == n {\n            m2 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m2 = float64(arr2[j])\n            j++\n        }\n    }\n\n    m = (m1 + m2) / 2.0\n\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpwzmaa3ei_test.go:78: expected '%!s(float64=16)', got '%!s(float64=17)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpwzmaa3ei_test.go:78: expected '%!s(float64=8.5)', got '%!s(float64=9)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpwzmaa3ei_test.go:78: expected '%!s(float64=25)', got '%!s(float64=27)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    for i, j = 0, 0; i < n; {\n        if j > 0 && arr1[i] < arr2[j-1] {\n            m1 = float64(arr2[j-1])\n            i++\n        } else if j < n && arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n            i++\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpnch7lu19_test.go:51: expected '%!s(float64=16)', got '%!s(float64=20)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpnch7lu19_test.go:51: expected '%!s(float64=8.5)', got '%!s(float64=10)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpnch7lu19_test.go:51: expected '%!s(float64=25)', got '%!s(float64=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpnwcfyw5u_test.go:64: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpnwcfyw5u_test.go:64: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpnwcfyw5u_test.go:64: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6zsueurg_test.go:22:24: undefined: max\n/tmp/tmp6zsueurg_test.go:22:48: undefined: min\n/tmp/tmp6zsueurg_test.go:25:10: undefined: median\n/tmp/tmp6zsueurg_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpewml97vz_test.go:62: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpewml97vz_test.go:62: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpewml97vz_test.go:62: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp8xpqvo1y_test.go:63: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp8xpqvo1y_test.go:63: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp8xpqvo1y_test.go:63: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp173wavwh_test.go:17:24: undefined: max\n/tmp/tmp173wavwh_test.go:17:48: undefined: min\n/tmp/tmp173wavwh_test.go:19:11: undefined: median\n/tmp/tmp173wavwh_test.go:20:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i <= n; i, j = i+1, j+1 {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        }\n        if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            m2 = float64(arr2[j])\n        } else {\n            m1 = float64(arr2[j])\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpqx5gg9ms_test.go:47: expected '%!s(float64=16)', got '%!s(float64=23.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpqx5gg9ms_test.go:47: expected '%!s(float64=8.5)', got '%!s(float64=17.5)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpqx5gg9ms_test.go:47: expected '%!s(float64=25)', got '%!s(float64=28.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5gpa5u_test.go:20:24: undefined: max\n/tmp/tmp_u5gpa5u_test.go:20:48: undefined: min\n/tmp/tmp_u5gpa5u_test.go:23:10: undefined: median\n/tmp/tmp_u5gpa5u_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123812,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwj5rsyns_test.go:21:24: undefined: max\n/tmp/tmpwj5rsyns_test.go:21:48: undefined: min\n/tmp/tmpwj5rsyns_test.go:24:10: undefined: median\n/tmp/tmpwj5rsyns_test.go:25:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            m2 = float64(arr2[1])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            m2 = float64(arr1[1])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[j])\n    } else if j == n {\n        m2 = float64(arr1[i])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    m = (m1 + m2) / 2.0\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpkjp4p0oa_test.go:68: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpkjp4p0oa_test.go:68: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpkjp4p0oa_test.go:68: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n        if i == n - 1 {\n            break\n        }\n        if arr1[i] < arr2[j] {\n            i++\n        } else {\n            j++\n        }\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpiyar6f8l_test.go:50: expected '%!s(float64=16)', got '%!s(float64=27.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpiyar6f8l_test.go:50: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpiyar6f8l_test.go:50: expected '%!s(float64=25)', got '%!s(float64=40.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd89kaffq_test.go:22:24: undefined: max\n/tmp/tmpd89kaffq_test.go:22:48: undefined: min\n/tmp/tmpd89kaffq_test.go:25:10: undefined: median\n/tmp/tmpd89kaffq_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i, j := 0, 0\n    m1, m2 := -1, -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5gpa5u_test.go:20:24: undefined: max\n/tmp/tmp_u5gpa5u_test.go:20:48: undefined: min\n/tmp/tmp_u5gpa5u_test.go:23:10: undefined: median\n/tmp/tmp_u5gpa5u_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n\n        count++\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        m = get_median(arr1[i:], arr2[:j], j)\n    } else {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2 + 1\n        }\n        m = get_median(arr2[i:], arr1[:j], j)\n    }\n\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123812,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5cx7nd2_test.go:23:24: undefined: max\n/tmp/tmpv5cx7nd2_test.go:23:48: undefined: min\n/tmp/tmpv5cx7nd2_test.go:26:10: undefined: median\n/tmp/tmpv5cx7nd2_test.go:27:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2 - 1:], arr2[:n/2 + 1], n - n/2 + 1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2 + 1], n - n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2 + 1], arr2[n/2 - 1:], n - n/2 + 1)\n    }\n    return get_median(arr1[:n/2 + 1], arr2[n/2:], n - n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9f381lt4_test.go:17:24: undefined: max\n/tmp/tmp9f381lt4_test.go:17:48: undefined: min\n/tmp/tmp9f381lt4_test.go:20:11: undefined: median\n/tmp/tmp9f381lt4_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            m2 = float64(arr2[0])\n        } else if j == n - 1 {\n            m2 = float64(arr1[i + 1])\n        } else if arr1[i + 1] < arr2[j + 1] {\n            m2 = float64(arr1[i + 1])\n        } else {\n            m2 = float64(arr2[j + 1])\n        }\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123812,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5427fr6i_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            m2 = float64(arr2[1])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            m2 = float64(arr1[1])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m2 = float64(arr2[0])\n            break\n        } else if j == n {\n            m2 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n            i++\n        } else {\n            m2 = float64(arr2[j])\n            j++\n        }\n    }\n\n    m = (m1 + m2) / 2.0\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123806,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpiuny12pp_test.go:75: expected '%!s(float64=16)', got '%!s(float64=17)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpiuny12pp_test.go:75: expected '%!s(float64=8.5)', got '%!s(float64=9)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpiuny12pp_test.go:75: expected '%!s(float64=25)', got '%!s(float64=27)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2, n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2, n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr2[n/2-1:], arr1, n-n/2+1)\n    }\n    return get_median(arr2[n/2:], arr1, n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123812,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3gsc9s2_test.go:17:24: undefined: max\n/tmp/tmpw3gsc9s2_test.go:17:48: undefined: min\n/tmp/tmpw3gsc9s2_test.go:19:11: undefined: median\n/tmp/tmpw3gsc9s2_test.go:20:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n            j--\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else {\n        if j == n {\n            m2 = float64(arr1[0])\n        } else {\n            if arr1[i] > arr2[j] {\n                m2 = float64(arr2[j])\n            } else {\n                m2 = float64(arr1[i])\n            }\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnq4k82ig_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    count := 0\n    m1 := -1\n    m2 := -1\n    for count < n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5gpa5u_test.go:20:24: undefined: max\n/tmp/tmp_u5gpa5u_test.go:20:48: undefined: min\n/tmp/tmp_u5gpa5u_test.go:23:10: undefined: median\n/tmp/tmp_u5gpa5u_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    m = (m1 + m2) / 2.0\n\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpohg0mqxn_test.go:64: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpohg0mqxn_test.go:64: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpohg0mqxn_test.go:64: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5gpa5u_test.go:20:24: undefined: max\n/tmp/tmp_u5gpa5u_test.go:20:48: undefined: min\n/tmp/tmp_u5gpa5u_test.go:23:10: undefined: median\n/tmp/tmp_u5gpa5u_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[j])\n    } else {\n        if j == n {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr1[i] < arr2[j] ? arr1[i] : arr2[j])\n        }\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123812,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbz5_crd4_test.go:29:44: illegal character U+003F '?'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoe734krg_test.go:22:24: undefined: max\n/tmp/tmpoe734krg_test.go:22:48: undefined: min\n/tmp/tmpoe734krg_test.go:25:10: undefined: median\n/tmp/tmpoe734krg_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd89kaffq_test.go:22:24: undefined: max\n/tmp/tmpd89kaffq_test.go:22:48: undefined: min\n/tmp/tmpd89kaffq_test.go:25:10: undefined: median\n/tmp/tmpd89kaffq_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    count := 0\n    m1 := -1\n    m2 := -1\n\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpgn0ixint_test.go:59: expected '%!s(float64=16)', got '%!s(float64=38)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpgn0ixint_test.go:59: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpgn0ixint_test.go:59: expected '%!s(float64=25)', got '%!s(float64=45.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = m2\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m1 = m2\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpya_1a26l_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2, n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2, n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr2[n/2-1:], arr1, n-n/2+1)\n    }\n    return get_median(arr2[n/2:], arr1, n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpus_xm9vt_test.go:17:24: undefined: max\n/tmp/tmpus_xm9vt_test.go:17:48: undefined: min\n/tmp/tmpus_xm9vt_test.go:20:11: undefined: median\n/tmp/tmpus_xm9vt_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 int\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return float64(m1)\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjrbempwl_test.go:22:24: undefined: max\n/tmp/tmpjrbempwl_test.go:22:48: undefined: min\n/tmp/tmpjrbempwl_test.go:25:10: undefined: median\n/tmp/tmpjrbempwl_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5gpa5u_test.go:20:24: undefined: max\n/tmp/tmp_u5gpa5u_test.go:20:48: undefined: min\n/tmp/tmp_u5gpa5u_test.go:23:10: undefined: median\n/tmp/tmp_u5gpa5u_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123802,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd89kaffq_test.go:22:24: undefined: max\n/tmp/tmpd89kaffq_test.go:22:48: undefined: min\n/tmp/tmpd89kaffq_test.go:25:10: undefined: median\n/tmp/tmpd89kaffq_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m1 = float64(arr2[j-1])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m1 = float64(arr1[i-1])\n        } else {\n            m1 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if j > 0 && arr1[i] > arr2[j-1] {\n            m2 = float64(arr2[j])\n        } else if i > 0 && arr2[j] < arr1[i-1] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr1[i] + arr2[j]) / 2.0\n        }\n\n        if m1 > m2 {\n            return m1\n        } else {\n            return m2\n        }\n    }\n    return -1\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpfmb2qw1r_test.go:53: expected '%!s(float64=16)', got '%!s(float64=1.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpfmb2qw1r_test.go:53: expected '%!s(float64=8.5)', got '%!s(float64=4.5)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpfmb2qw1r_test.go:53: expected '%!s(float64=25)', got '%!s(float64=2.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if i == 0 {\n            m1 = float64(arr1[i])\n        } else if i == n - 1 {\n            m1 = float64(arr1[i] + arr1[i - 1]) / 2.0\n        } else {\n            m1 = float64(arr1[i] + arr1[i - 1]) / 2.0\n        }\n\n        if j == 0 {\n            m2 = float64(arr2[j])\n        } else if j == n - 1 {\n            m2 = float64(arr2[j] + arr2[j - 1]) / 2.0\n        } else {\n            m2 = float64(arr2[j] + arr2[j - 1]) / 2.0\n        }\n\n        if m1 == m2 {\n            return m1\n        } else if m1 < m2 {\n            i++\n        } else {\n            j++\n        }\n    }\n    return -1\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp7kfetesh_test.go:55: expected '%!s(float64=16)', got '%!s(float64=-1)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp7kfetesh_test.go:55: expected '%!s(float64=8.5)', got '%!s(float64=-1)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp7kfetesh_test.go:55: expected '%!s(float64=25)', got '%!s(float64=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n        } else {\n            m1 = float64(arr2[j])\n        }\n        if i == n - 1 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n        } else {\n            m2 = float64(arr1[i])\n        }\n        j++\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp83vaku5j_test.go:46: expected '%!s(float64=16)', got '%!s(float64=32)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp83vaku5j_test.go:46: expected '%!s(float64=25)', got '%!s(float64=39)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m1 = float64(arr2[j])\n            j++\n        } else {\n            m1 = float64(arr1[i])\n        }\n        if i == n - 1 {\n            break\n        }\n        if j > 0 && arr1[i] > m2 {\n            break\n        }\n        if arr1[i] > arr2[j] {\n            m2 = float64(arr2[j])\n            j++\n        } else {\n            m2 = float64(arr1[i])\n        }\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123805,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa22695s4_test.go:13:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n/tmp/tmpa22695s4_test.go:25:29: invalid operation: arr1[i] > m2 (mismatched types int and float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    var m float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    m = (m1 + m2) / 2.0\n    return m\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123805,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp3a071uxv_test.go:59: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp3a071uxv_test.go:59: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp3a071uxv_test.go:59: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp8xpqvo1y_test.go:63: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp8xpqvo1y_test.go:63: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp8xpqvo1y_test.go:63: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    count := 0\n    m1 := -1\n    m2 := -1\n\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpgn0ixint_test.go:59: expected '%!s(float64=16)', got '%!s(float64=38)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpgn0ixint_test.go:59: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpgn0ixint_test.go:59: expected '%!s(float64=25)', got '%!s(float64=45.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i, j, count := 0, 0, 0\n    m1, m2 := -1, -1\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m2 = m1\n            m1 = arr1[i]\n            i++\n        } else {\n            m2 = m1\n            m1 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1+m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n    if m1 == m2 {\n        return m1\n    }\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppvjo7has_test.go:17:24: undefined: max\n/tmp/tmppvjo7has_test.go:17:48: undefined: min\n/tmp/tmppvjo7has_test.go:19:11: undefined: median\n/tmp/tmppvjo7has_test.go:20:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2.0\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph3g6qn1_test.go:20:24: undefined: max\n/tmp/tmpph3g6qn1_test.go:20:48: undefined: min\n/tmp/tmpph3g6qn1_test.go:23:10: undefined: median\n/tmp/tmpph3g6qn1_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp16cnvwas_test.go:58: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123810,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n        count += 1\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; {\n        if j == n {\n            m1 = float64(arr1[i])\n            break\n        }\n        if i == n {\n            m1 = float64(arr2[j])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if (n & 1) == 1 {\n        return m1\n    }\n    if j == n {\n        m2 = float64(arr1[i])\n    } else if i == n {\n        m2 = float64(arr2[j])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmprqk85gq__test.go:59: expected '%!s(float64=16)', got '%!s(float64=38)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmprqk85gq__test.go:59: expected '%!s(float64=8.5)', got '%!s(float64=11)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmprqk85gq__test.go:59: expected '%!s(float64=25)', got '%!s(float64=45.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    for i, j = 0, 0; i < n; i++ {\n        if i == n-1 {\n            m1 = float64(arr1[i])\n        }\n        if j == n-1 {\n            m2 = float64(arr2[j])\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = float64(arr1[i])\n        } else {\n            m1 = m2\n            m2 = float64(arr2[j])\n        }\n    }\n    return (m1+m2)/2\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpl6c61ftz_test.go:45: expected '%!s(float64=16)', got '%!s(float64=2)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpl6c61ftz_test.go:45: expected '%!s(float64=8.5)', got '%!s(float64=7)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpl6c61ftz_test.go:45: expected '%!s(float64=25)', got '%!s(float64=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    count := 0\n    m1 := -1\n    m2 := -1\n\n    for count < n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n\n        count++\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr1[:i], arr2[j:], i)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv_xnwzet_test.go:20:24: undefined: max\n/tmp/tmpv_xnwzet_test.go:20:48: undefined: min\n/tmp/tmpv_xnwzet_test.go:23:10: undefined: median\n/tmp/tmpv_xnwzet_test.go:24:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123814,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmpjf4ggkqe_test.go:62: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmpjf4ggkqe_test.go:62: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmpjf4ggkqe_test.go:62: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 := median(arr1, n)\n    m2 := median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            return get_median(arr1[n/2-1:], arr2[:n/2+1], n-n/2+1)\n        }\n        return get_median(arr1[n/2:], arr2[:n/2+1], n-n/2)\n    }\n\n    if n % 2 == 0 {\n        return get_median(arr1[:n/2+1], arr2[n/2-1:], n-n/2+1)\n    }\n    return get_median(arr1[:n/2+1], arr2[n/2:], n-n/2)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge29azzs_test.go:17:24: undefined: max\n/tmp/tmpge29azzs_test.go:17:48: undefined: min\n/tmp/tmpge29azzs_test.go:20:11: undefined: median\n/tmp/tmpge29azzs_test.go:21:11: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    } else {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr2[i:], arr1[:j], j)\n    }\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdpw1z_rc_test.go:22:24: undefined: max\n/tmp/tmpdpw1z_rc_test.go:22:48: undefined: min\n/tmp/tmpdpw1z_rc_test.go:25:10: undefined: median\n/tmp/tmpdpw1z_rc_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    count := 0\n    for count <= n {\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n        count++\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510634,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbiu2s6pe_test.go:22:24: undefined: max\n/tmp/tmpbiu2s6pe_test.go:22:48: undefined: min\n/tmp/tmpbiu2s6pe_test.go:25:10: undefined: median\n/tmp/tmpbiu2s6pe_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    i := 0\n    j := 0\n    m1 := -1\n    m2 := -1\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i++\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j++\n        }\n    }\n    return float64(m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else {\n        if arr1[i] < arr2[j] {\n            m2 = float64(arr1[i])\n        } else {\n            m2 = float64(arr2[j])\n        }\n    }\n\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123807,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp_0kecwk4_test.go:63: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp_0kecwk4_test.go:63: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp_0kecwk4_test.go:63: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j, count int\n    var m1, m2 float64\n\n    if n <= 0 {\n        return -1\n    }\n\n    if n == 1 {\n        return float64(arr1[0] + arr2[0]) / 2\n    }\n\n    if n == 2 {\n        return float64(max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    }\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2 {\n        return m1\n    }\n\n    if m1 < m2 {\n        if n % 2 == 0 {\n            i = n / 2 - 1\n            j = n / 2\n        } else {\n            i = n / 2\n            j = n / 2\n        }\n        return get_median(arr1[i:], arr2[:j], j)\n    }\n\n    if n % 2 == 0 {\n        i = n / 2 - 1\n        j = n / 2\n    } else {\n        i = n / 2\n        j = n / 2\n    }\n    return get_median(arr2[i:], arr1[:j], j)\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dpp23hn_test.go:22:24: undefined: max\n/tmp/tmp3dpp23hn_test.go:22:48: undefined: min\n/tmp/tmp3dpp23hn_test.go:25:10: undefined: median\n/tmp/tmp3dpp23hn_test.go:26:10: undefined: median\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n    var i, j int\n    var m1, m2 float64\n    i = 0\n    j = 0\n    for count := 0; count <= n; count++ {\n        if i == n {\n            m1 = float64(arr2[0])\n            break\n        } else if j == n {\n            m1 = float64(arr1[0])\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = float64(arr1[i])\n            i++\n        } else {\n            m1 = float64(arr2[j])\n            j++\n        }\n    }\n    if i == n {\n        m2 = float64(arr2[0])\n    } else if j == n {\n        m2 = float64(arr1[0])\n    } else if arr1[i] < arr2[j] {\n        m2 = float64(arr1[i])\n    } else {\n        m2 = float64(arr2[j])\n    }\n    return (m1 + m2) / 2.0\n}\n\nfunc TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123806,
      "stdout": "--- FAIL: TestGet_Median (0.00s)\n    --- FAIL: TestGet_Median/test_num__0 (0.00s)\n        tmp0kg2_yn__test.go:57: expected '%!s(float64=16)', got '%!s(float64=21.5)'\n    --- FAIL: TestGet_Median/test_num__1 (0.00s)\n        tmp0kg2_yn__test.go:57: expected '%!s(float64=8.5)', got '%!s(float64=8)'\n    --- FAIL: TestGet_Median/test_num__2 (0.00s)\n        tmp0kg2_yn__test.go:57: expected '%!s(float64=25)', got '%!s(float64=31.5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}