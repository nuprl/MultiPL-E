{
  "name": "mbpp_406_find_Parity",
  "language": "go_test.go",
  "prompt": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpot9i50yj_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 1\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123987,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmpqbgq2wrs_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmpqbgq2wrs_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmpqbgq2wrs_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    return x % 2 == 0\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "--- FAIL: TestFind_Parity (0.00s)\n    --- FAIL: TestFind_Parity/test_num__0 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestFind_Parity/test_num__1 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestFind_Parity/test_num__2 (0.00s)\n        tmp1olj9f59_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n    if x % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510611,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}