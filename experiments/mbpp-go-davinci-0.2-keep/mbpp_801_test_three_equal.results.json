{
  "name": "mbpp_801_test_three_equal",
  "language": "go_test.go",
  "prompt": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    var count int\n    if x == y {\n        count++\n    }\n    if x == z {\n        count++\n    }\n    if y == z {\n        count++\n    }\n    return count\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "--- FAIL: TestTest_Three_Equal (0.00s)\n    --- FAIL: TestTest_Three_Equal/test_num__2 (0.00s)\n        tmp3m670_8g_test.go:38: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    var count int\n    if x == y && y == z {\n        count = 3\n    } else if x == y || y == z || x == z {\n        count = 2\n    } else {\n        count = 0\n    }\n    return count\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    // your code here\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\nfunc TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510253,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}