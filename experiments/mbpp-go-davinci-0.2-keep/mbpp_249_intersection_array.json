{
  "name": "mbpp_249_intersection_array",
  "language": "go_test.go",
  "prompt": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var array_intersection []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_intersection = append(array_intersection, num1)\n            }\n        }\n    }\n    return array_intersection\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    var map_nums = make(map[int]int)\n    for _, num := range array_nums1 {\n        map_nums[num] = 1\n    }\n    for _, num := range array_nums2 {\n        if _, ok := map_nums[num]; ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(array_nums1); i++ {\n        for j := 0; j < len(array_nums2); j++ {\n            if array_nums1[i] == array_nums2[j] {\n                result = append(result, array_nums1[i])\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var array_result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                array_result = append(array_result, num1)\n            }\n        }\n    }\n    return array_result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num == num2 {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    var map_nums = make(map[int]int)\n    for _, v := range array_nums1 {\n        map_nums[v] = 1\n    }\n    for _, v := range array_nums2 {\n        if _, ok := map_nums[v]; ok {\n            result = append(result, v)\n            map_nums[v] = 2\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num1 := range array_nums1 {\n        for _, num2 := range array_nums2 {\n            if num1 == num2 {\n                result = append(result, num1)\n            }\n        }\n    }\n    return result\n}\n"
  ]
}