{
  "name": "mbpp_407_rearrange_bigger",
  "language": "go_test.go",
  "prompt": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp5cjeg85m_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp5cjeg85m_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp38eoo6w0_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp38eoo6w0_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return digitsToInt(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpabmh1sj1_test.go:21:20: undefined: digitsToInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpkccx5yl0_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpkccx5yl0_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpkccx5yl0_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n            return result\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3rjw6oki_test.go:63: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3rjw6oki_test.go:63: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3rjw6oki_test.go:63: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return \"Invalid input\"\n    }\n\n    if n < 10 {\n        return \"No bigger number\"\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp0m8g77v3_test.go:54: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp0m8g77v3_test.go:54: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp0m8g77v3_test.go:54: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpri45uy1r_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpri45uy1r_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ho6pw53_test.go:23:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbxqsabkm_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxqsabkm_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxqsabkm_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjzoy6d6j_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmplgfrws6m_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmplgfrws6m_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpf7xm772c_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpf7xm772c_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbxqsabkm_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxqsabkm_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxqsabkm_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp5cjeg85m_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp5cjeg85m_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpvaeenqqj_test.go:45: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvaeenqqj_test.go:45: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvaeenqqj_test.go:45: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_e15qoz5_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpsc2g_w4m_test.go:39: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpsc2g_w4m_test.go:39: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpsc2g_w4m_test.go:39: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpf7xm772c_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpf7xm772c_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpkdkavth1_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    if n < 10 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpeey67yz4_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpeey67yz4_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpeey67yz4_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ho6pw53_test.go:23:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i - 1] < digits[i] {\n            digits[i - 1], digits[i] = digits[i], digits[i - 1]\n            return digitsToInt(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfwqb0zu__test.go:23:20: undefined: digitsToInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n <= 0 {\n        return nil\n    }\n    if n < 10 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp2m4q1mj7_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp2m4q1mj7_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    // convert to string\n    s := fmt.Sprintf(\"%d\", n)\n    // convert to slice\n    s_slice := []rune(s)\n    // find the first digit that is smaller than the digit to its right\n    for i := len(s_slice) - 1; i > 0; i-- {\n        if s_slice[i] > s_slice[i - 1] {\n            // find the smallest digit to the right of the pivot that is larger than the pivot\n            for j := len(s_slice) - 1; j > i - 1; j-- {\n                if s_slice[j] > s_slice[i - 1] {\n                    // swap the pivot with the smallest digit to the right of the pivot\n                    s_slice[i - 1], s_slice[j] = s_slice[j], s_slice[i - 1]\n                    // reverse the digits to the right of the pivot\n                    for k := i; k < len(s_slice) - 1; k++ {\n                        s_slice[k], s_slice[len(s_slice) - 1 - k + i] = s_slice[len(s_slice) - 1 - k + i], s_slice[k]\n                    }\n                    // convert to int\n                    return fmt.Sprintf(\"%s\", s_slice)\n                }\n            }\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp9g0g8d6r_test.go:27:28: Sprintf format %s has arg s_slice of wrong type []rune\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpmh6yls30_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpmh6yls30_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    // convert n to array of digits\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    // find the first digit that is smaller than the digit to its right\n    i := len(digits) - 1\n    for i > 0 && digits[i-1] >= digits[i] {\n        i--\n    }\n\n    // if no such digit exists, return -1\n    if i == 0 {\n        return -1\n    }\n\n    // find the smallest digit to the right of i that is greater than digits[i-1]\n    j := len(digits) - 1\n    for j > i && digits[j] <= digits[i-1] {\n        j--\n    }\n\n    // swap digits[i-1] and digits[j]\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n\n    // reverse the digits to the right of i\n    for k := i; k < len(digits)-1-k+i; k++ {\n        digits[k], digits[len(digits)-1-k+i] = digits[len(digits)-1-k+i], digits[k]\n    }\n\n    // convert array of digits to number\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp24oofu7e_test.go:66: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp24oofu7e_test.go:66: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp24oofu7e_test.go:66: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122840,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyserzs8m_test.go:49: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyserzs8m_test.go:49: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    bigger := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        bigger = bigger * 10 + digits[i]\n    }\n    return bigger\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmps4dek687_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmps4dek687_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmps4dek687_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    var digits []int\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ayimj77_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpickke6vi_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpickke6vi_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpfwizb4bg_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfwizb4bg_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfwizb4bg_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return nil\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplcus4cc0_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp8x32gfe5_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp8x32gfe5_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp8x32gfe5_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4czndjnn_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4czndjnn_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmppwa10ism_test.go:62: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmppwa10ism_test.go:62: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ho6pw53_test.go:23:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return toInt(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122843,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprfhdd11b_test.go:21:20: undefined: toInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyb_kt0tm_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyb_kt0tm_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    var digits []int\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    // find the first digit that is smaller than the next digit\n    var i int\n    for i = len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            break\n        }\n    }\n\n    if i == 0 {\n        return -1\n    }\n\n    // find the smallest digit that is larger than the digit at i - 1\n    var j int\n    for j = i; j < len(digits); j++ {\n        if digits[j] <= digits[i - 1] {\n            break\n        }\n    }\n\n    // swap the digits at i - 1 and j - 1\n    digits[i - 1], digits[j - 1] = digits[j - 1], digits[i - 1]\n\n    // sort the digits after i - 1\n    for k := i; k < len(digits); k++ {\n        for l := k + 1; l < len(digits); l++ {\n            if digits[k] > digits[l] {\n                digits[k], digits[l] = digits[l], digits[k]\n            }\n        }\n    }\n\n    var result int\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpevhiqgoc_test.go:75: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpevhiqgoc_test.go:75: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpevhiqgoc_test.go:75: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpmh6yls30_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpmh6yls30_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmptodc8ws0_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmptodc8ws0_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpmfcl6p0m_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpmfcl6p0m_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    var digits []int\n    for n > 0 {\n        digits = append(digits, n%10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwmksvx62_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return \"Invalid input\"\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpcwhbvu6i_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpcwhbvu6i_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    // convert int to array of digits\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    // find the first digit that is smaller than the digit to its right\n    i := len(digits) - 2\n    for i >= 0 && digits[i] >= digits[i+1] {\n        i--\n    }\n\n    // if no such digit exists, the number is the largest possible\n    if i < 0 {\n        return -1\n    }\n\n    // find the smallest digit to the right of i that is larger than digits[i]\n    j := len(digits) - 1\n    for j >= 0 && digits[j] <= digits[i] {\n        j--\n    }\n\n    // swap digits[i] and digits[j]\n    digits[i], digits[j] = digits[j], digits[i]\n\n    // reverse the digits to the right of i\n    for k := i + 1; k < (len(digits) + i + 1) / 2; k++ {\n        digits[k], digits[len(digits) - 1 - k + i] = digits[len(digits) - 1 - k + i], digits[k]\n    }\n\n    // convert array of digits to int\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3mlp3l2o_test.go:66: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3mlp3l2o_test.go:66: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3mlp3l2o_test.go:66: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_e15qoz5_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            result := 0\n            for i := len(digits) - 1; i >= 0; i-- {\n                result = result * 10 + digits[i]\n            }\n            return result\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpxm9yw2i4_test.go:58: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpxm9yw2i4_test.go:58: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpxm9yw2i4_test.go:58: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    var digits []int\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmphjb7l6fr_test.go:55: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphjb7l6fr_test.go:55: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphjb7l6fr_test.go:55: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    // Find the first digit from the right that is smaller than the digit to its right.\n    // This is the pivot.\n    pivot := -1\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            pivot = i - 1\n            break\n        }\n    }\n\n    if pivot == -1 {\n        return -1\n    }\n\n    // Find the smallest digit to the right of the pivot that is greater than the pivot.\n    // This is the replacement.\n    replacement := -1\n    for i := len(digits) - 1; i > pivot; i-- {\n        if digits[i] > digits[pivot] {\n            replacement = i\n            break\n        }\n    }\n\n    // Swap the pivot and replacement.\n    digits[pivot], digits[replacement] = digits[replacement], digits[pivot]\n\n    // Reverse the digits to the right of the pivot.\n    for i := pivot + 1; i < len(digits) - 1 - i + pivot + 1; i++ {\n        digits[i], digits[len(digits) - 1 - i + pivot + 1] = digits[len(digits) - 1 - i + pivot + 1], digits[i]\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpr46ab50x_test.go:75: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpr46ab50x_test.go:75: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpr46ab50x_test.go:75: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_number(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptnptuq9__test.go:23:20: undefined: to_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digitsToInt(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3aydeund_test.go:21:20: undefined: digitsToInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4czndjnn_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4czndjnn_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp9d_cp6xn_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0, 10)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp40y2kkpd_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp40y2kkpd_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjoc3zoxm_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpkas8xllg_test.go:64: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpkas8xllg_test.go:64: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpkas8xllg_test.go:64: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfie6s8uy_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpty4uw8ov_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpty4uw8ov_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_number(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptnptuq9__test.go:23:20: undefined: to_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ho6pw53_test.go:23:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp8um9sf27_test.go:61: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp8um9sf27_test.go:61: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp8um9sf27_test.go:61: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp0sxuolfb_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp0sxuolfb_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp0sxuolfb_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpdy59osi8_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n <= 0 {\n        return nil\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbuvqcpgc_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbuvqcpgc_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwp1aq0ly_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwp1aq0ly_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    res := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        res = res * 10 + digits[i]\n    }\n\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwvfqm6u0_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwvfqm6u0_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwvfqm6u0_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp62tbhc1p_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp62tbhc1p_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for i := 0; i < len(digits); i++ {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpfofd6efz_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpfofd6efz_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    res := 0\n    for _, d := range digits {\n        res = res * 10 + d\n    }\n    return res\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbv0dzr00_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbv0dzr00_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbhc6vzl7_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpmtob9jlo_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpmtob9jlo_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 0 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            result := 0\n            for _, digit := range digits {\n                result = result * 10 + digit\n            }\n            return result\n        }\n    }\n    return nil\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp0zisee3a_test.go:58: expected '%!s(int=21)', got '%!s(<nil>)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp0zisee3a_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp0zisee3a_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpvaeenqqj_test.go:45: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvaeenqqj_test.go:45: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvaeenqqj_test.go:45: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqc_erc_j_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqc_erc_j_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpvni1g7tl_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvni1g7tl_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvni1g7tl_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvyjx1tzc_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjkxvr4lm_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjkxvr4lm_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpdcd7kfi4_test.go:61: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpdcd7kfi4_test.go:61: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    var result int\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpdf_p0_be_test.go:43: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpdf_p0_be_test.go:43: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpn_3hxsn1_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return nil\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122844,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp2eukvehm_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp2eukvehm_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpyfpkmfps_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    i := len(digits) - 1\n    for i > 0 && digits[i] <= digits[i-1] {\n        i--\n    }\n    if i == 0 {\n        return -1\n    }\n\n    j := len(digits) - 1\n    for j > i && digits[j] <= digits[i-1] {\n        j--\n    }\n\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    j = len(digits) - 1\n    for i < j {\n        digits[i], digits[j] = digits[j], digits[i]\n        i++\n        j--\n    }\n\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpxzh6pisc_test.go:63: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpxzh6pisc_test.go:63: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpxzh6pisc_test.go:63: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmplkikkttj_test.go:62: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmplkikkttj_test.go:62: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmplkikkttj_test.go:62: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_e15qoz5_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517261,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbrym6wyl_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(bool=false)', got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp6kgfu52m_test.go:42: expected '%!s(int=120)', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122847,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmphahpnoxx_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for _, digit := range digits {\n        result = result * 10 + digit\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpzt_hrt3t_test.go:50: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpzt_hrt3t_test.go:50: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                if digits[j] > digits[j + 1] {\n                    digits[j], digits[j + 1] = digits[j + 1], digits[j]\n                }\n            }\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3uz4gjgm_test.go:59: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3uz4gjgm_test.go:59: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3uz4gjgm_test.go:59: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n            return result\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmptkcd82wr_test.go:58: expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmptkcd82wr_test.go:58: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmptkcd82wr_test.go:58: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp4k9okld9_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp_jw04302_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpqj7_o75i_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for _, d := range digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122841,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpjkxvr4lm_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpjkxvr4lm_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n            for j := i + 1; j < len(digits) - 1; j++ {\n                if digits[j] > digits[j + 1] {\n                    digits[j], digits[j + 1] = digits[j + 1], digits[j]\n                }\n            }\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmprllvr6nu_test.go:60: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmprllvr6nu_test.go:60: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmprllvr6nu_test.go:60: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpbxtc_mii_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u4qqid8_test.go:23:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    if digits[0] == 0 {\n        return -1\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp49hijqzo_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp49hijqzo_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp49hijqzo_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpax3jb_4h_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(bool=false)', got '%!s(int=10)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpvdawl1ct_test.go:46: expected '%!s(int=120)', got '%!s(int=210)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return to_int(digits)\n        }\n    }\n    return -1\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6twwzbvw_test.go:21:20: undefined: to_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpwe16gefm_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpumxd36uj_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpumxd36uj_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpumxd36uj_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122838,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp3a8l4buh_test.go:50: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517260,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmp37da659r_test.go:46: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\nfunc TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122850,
      "stdout": "--- FAIL: TestRearrange_Bigger (0.00s)\n    --- FAIL: TestRearrange_Bigger/test_num__0 (0.00s)\n        tmpumxd36uj_test.go:49: expected '%!s(int=21)', got '%!s(int=12)'\n    --- FAIL: TestRearrange_Bigger/test_num__1 (0.00s)\n        tmpumxd36uj_test.go:49: expected '%!s(bool=false)', got '%!s(int=1)'\n    --- FAIL: TestRearrange_Bigger/test_num__2 (0.00s)\n        tmpumxd36uj_test.go:49: expected '%!s(int=120)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}