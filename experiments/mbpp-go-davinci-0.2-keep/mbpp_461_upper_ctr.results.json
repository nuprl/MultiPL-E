{
  "name": "mbpp_461_upper_ctr",
  "language": "go_test.go",
  "prompt": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpqe1c7r34_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpqe1c7r34_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpqe1c7r34_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpqe1c7r34_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var upper_ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            upper_ctr++\n        }\n    }\n    return upper_ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpiks5opi8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpiks5opi8_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpp7aswlhr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpp7aswlhr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 65 && char <= 90 {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpksn18jl5_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpksn18jl5_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpqe1c7r34_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpqe1c7r34_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 65 && char <= 90 {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpyd36ixtr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpyd36ixtr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpg1luqu9n_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpg1luqu9n_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpe0bkb5_r_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpe0bkb5_r_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 65 && char <= 90 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuxkzfubj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuxkzfubj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpw9v3kxdr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpw9v3kxdr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpvemzetvp_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpvemzetvp_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphzy9kwu4_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphzy9kwu4_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, v := range str {\n        if v >= 'A' && v <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9bne84zi_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9bne84zi_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpw9v3kxdr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpw9v3kxdr_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpg1luqu9n_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpg1luqu9n_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for i := 0; i < len(str); i++ {\n        if str[i] >= 'A' && str[i] <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp12eukoip_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp12eukoip_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9kt_u0kv_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpi0mrlvsw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpvemzetvp_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpvemzetvp_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 65 && char <= 90 {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpksn18jl5_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpksn18jl5_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpwwoo6b6s_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpuzmp761a_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp0o2mwodj_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int = 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123501,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmp9fp5prvm_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmp9fp5prvm_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpjbuczo0c_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmpaudnc4e2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510502,
      "stdout": "--- FAIL: TestUpper_Ctr (0.00s)\n    --- FAIL: TestUpper_Ctr/test_num__0 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestUpper_Ctr/test_num__1 (0.00s)\n        tmphyei2a4p_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}