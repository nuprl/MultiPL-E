{
  "name": "mbpp_401_add_nested_tuples",
  "language": "go_test.go",
  "prompt": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of tuple elements in the given two nested tuples.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                return nil\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else if test_tup1[i] == nil && test_tup2[i] != nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup1[i] != nil && test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            if test_tup1[i].([]interface{}) == nil {\n                result_tup = append(result_tup, test_tup2[i])\n            } else if test_tup2[i].([]interface{}) == nil {\n                result_tup = append(result_tup, test_tup1[i])\n            } else if test_tup1[i].([]interface{}) == nil && test_tup2[i].([]interface{}) == nil {\n                result_tup = append(result_tup, nil)\n            } else if test_tup1[i].([]interface{}) == nil && test_tup2[i].([]interface{}) != nil {\n                result_tup = append(result_tup, test_tup2[i])\n            } else if test_tup1[i].([]interface{}) != nil && test_tup2[i].([]interface{}) == nil {\n                result_tup = append(result_t",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if i == 0 {\n            result_tup = append(result_tup, test_tup1[i].([]interface{})...)\n        } else {\n            result_tup = append(result_tup, test_tup1[i].([]interface{})...)\n            result_tup = append(result_tup, test_tup2[i].([]interface{})...)\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).String() == \"int\" {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        } else {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        } else {\n            fmt.Println(\"Type mismatch\")\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i] == nil && test_tup2[i] != nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup1[i] != nil && test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tuple []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tuple = append(result_tuple, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tuple = append(result_tuple, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tuple\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, nil)\n            }\n        } else {\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, v := range test_tup1 {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(v.([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, v.(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            switch test_tup1[i].(type) {\n            case int:\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            case float32:\n                result_tup = append(result_tup, test_tup1[i].(float32) + test_tup2[i].(float32))\n            case float64:\n                result_tup = append(result_tup, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                return nil\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(type) == []interface{} {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(type) == []interface{} {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, j := range test_tup1 {\n        switch j.(type) {\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(j.([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result_tup = append(result_tup, j.(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                return nil\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            if test_tup1[i] == test_tup2[i] {\n                result_tup = append(result_tup, test_tup1[i])\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).String() == \"int\" {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        } else if reflect.TypeOf(test_tup1[i]).String() == \"[]interface {}\" {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i].(type) == test_tup2[i].(type)) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        } else {\n            fmt.Println(\"Type mismatch\")\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result_tuple []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tuple = append(result_tuple, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tuple = append(result_tuple, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tuple\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            test_tup3 = append(test_tup3, test_tup1[i])\n        } else {\n            test_tup3 = append(test_tup3, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return test_tup3\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        } else {\n            fmt.Println(\"Type mismatch\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        } else {\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    result := make([]interface{}, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result[i] = add_nested_tuples(tup1, tup2)\n            }\n        } else {\n            result[i] = test_tup1[i].(int) + test_tup2[i].(int)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, v := range test_tup1 {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(v.([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, v.(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i].(string) == \"tuple\" && test_tup2[i].(string) == \"tuple\" {\n            result = append(result, \"tuple\")\n            result = append(result, add_nested_tuples(test_tup1[i+1].([]interface{}), test_tup2[i+1].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                result = append(result, test_tup1[i])\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, v := range test_tup1 {\n        switch v.(type) {\n        case int:\n            result = append(result, v.(int) + test_tup2[i].(int))\n        case []interface{}:\n            result = append(result, add_nested_tuples(v.([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else if test_tup1[i] == nil && test_tup2[i] != nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup1[i] != nil && test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n                result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, test_tup1[i])\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        var tup1_element = test_tup1[i]\n        var tup2_element = test_tup2[i]\n        if tup1_element == nil {\n            result = append(result, tup2_element)\n        } else if tup2_element == nil {\n            result = append(result, tup1_element)\n        } else {\n            var tup1_element_type = fmt.Sprintf(\"%T\", tup1_element)\n            var tup2_element_type = fmt.Sprintf(\"%T\", tup2_element)\n            if tup1_element_type == \"int\" && tup2_element_type == \"int\" {\n                result = append(result, tup1_element.(int) + tup2_element.(int))\n            } else if tup1_element_type == \"float64\" && tup2_element_type == \"float64\" {\n                result = append(result, tup1_element.(float64) + tup2_element.(float64))\n            } else if tup1_element_type == \"string\" && tup2_element_type == \"string\" {\n                result = append(result, tup1_element.(string) + tup2_element.(string))\n            } else if tup1_element_type == \"[]interface {}\" && tup2_element_type == \"[]interface {}\" {\n                result = append(result, add_nested_tuples(tup1_element.([]interface{}), tup2_element.([]interface{})))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                result = append(result, test_tup1[i])\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                return nil\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            if test_tup1[i].([]interface{}) == nil {\n                result = append(result, test_tup2[i])\n            } else if test_tup2[i].([]interface{}) == nil {\n                result = append(result, test_tup1[i])\n            } else if test_tup1[i].([]interface{}) == nil && test_tup2[i].([]interface{}) == nil {\n                result = append(result, nil)\n            } else if test_tup1[i].([]interface{}) != nil && test_tup2[i].([]interface{}) != nil {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]) == reflect.TypeOf(test_tup2[i]) {\n            if reflect.TypeOf(test_tup1[i]) == reflect.TypeOf([]interface{}{}) {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        } else {\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i], test_tup2[i]))\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i] == nil) {\n            result = append(result, test_tup2[i])\n        } else if (test_tup2[i] == nil) {\n            result = append(result, test_tup1[i])\n        } else if (test_tup1[i].(type) == test_tup2[i].(type)) {\n            if (test_tup1[i].(type) == []interface{}{}) {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        } else {\n            fmt.Println(\"Invalid input\")\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result_tup = append(result_tup, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                return nil\n            } else {\n                result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if reflect.TypeOf(test_tup1[i]).Kind() == reflect.Slice {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, nil)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            if test_tup1[i].(type) == []interface{} {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        } else {\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n"
  ]
}