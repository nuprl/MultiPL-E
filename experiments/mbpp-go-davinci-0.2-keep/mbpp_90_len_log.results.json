{
  "name": "mbpp_90_len_log",
  "language": "go_test.go",
  "prompt": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var len_max int\n    for _, v := range list1 {\n        if len(v) > len_max {\n            len_max = len(v)\n        }\n    }\n    return len_max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var longest int\n    for _, word := range list1 {\n        if len(word) > longest {\n            longest = len(word)\n        }\n    }\n    return longest\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, str := range list1 {\n        if len(str) > max {\n            max = len(str)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var longest int\n    for _, word := range list1 {\n        if len(word) > longest {\n            longest = len(word)\n        }\n    }\n    return longest\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var len_longest int\n    for _, word := range list1 {\n        if len(word) > len_longest {\n            len_longest = len(word)\n        }\n    }\n    return len_longest\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var len_max int\n    for _, v := range list1 {\n        if len(v) > len_max {\n            len_max = len(v)\n        }\n    }\n    return len_max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, i := range list1 {\n        if len(i) > max {\n            max = len(i)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, i := range list1 {\n        if len(i) > max {\n            max = len(i)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, i := range list1 {\n        if len(i) > max {\n            max = len(i)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, value := range list1 {\n        if len(value) > max {\n            max = len(value)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, i := range list1 {\n        if len(i) > max {\n            max = len(i)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, value := range list1 {\n        if len(value) > max {\n            max = len(value)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, value := range list1 {\n        if len(value) > max {\n            max = len(value)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int = 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var len_max int\n    for _, v := range list1 {\n        if len(v) > len_max {\n            len_max = len(v)\n        }\n    }\n    return len_max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    max := 0\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var len_list int\n    for _, word := range list1 {\n        if len(word) > len_list {\n            len_list = len(word)\n        }\n    }\n    return len_list\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124304,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var len_max int\n    for _, v := range list1 {\n        if len(v) > len_max {\n            len_max = len(v)\n        }\n    }\n    return len_max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, word := range list1 {\n        if len(word) > max {\n            max = len(word)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n    var max int\n    for _, v := range list1 {\n        if len(v) > max {\n            max = len(v)\n        }\n    }\n    return max\n}\n\nfunc TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}