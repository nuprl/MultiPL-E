{
  "name": "mbpp_741_all_Characters_Same",
  "language": "go_test.go",
  "prompt": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s[1:] {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return true\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    var c byte\n    for i := 0; i < len(s); i++ {\n        if i == 0 {\n            c = s[i]\n        } else {\n            if c != s[i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    // check if all characters in the string are the same\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return true\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    return len(s) == 0 || (s[0] == s[len(s)-1] && all_Characters_Same(s[1:len(s)-1]))\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    var c rune\n    for _, c = range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    return len(s) == 0 || (s[0] == s[len(s)-1] && all_Characters_Same(s[1:len(s)-1]))\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    var i int\n    for i = 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 1 {\n        return true\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return true\n    }\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 1 {\n        return true\n    }\n    if s[0] != s[1] {\n        return false\n    }\n    return all_Characters_Same(s[1:])\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 1 {\n        return true\n    }\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := range s {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if s == \"\" {\n        return false\n    }\n    for _, v := range s {\n        if v != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for _, c := range s {\n        if c != rune(s[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return true\n    }\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122515,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    if len(s) == 0 {\n        return false\n    }\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s)-1; i++ {\n        if s[i] != s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n    for i := 0; i < len(s) - 1; i++ {\n        if s[i] != s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}