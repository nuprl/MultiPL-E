{
  "name": "mbpp_614_cummulative_sum",
  "language": "go_test.go",
  "prompt": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tup := range test_list {\n        sum += tup[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9tz9oco1_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9tz9oco1_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9tz9oco1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9tz9oco1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9tz9oco1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9tz9oco1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9xa39ldx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9xa39ldx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9xa39ldx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9xa39ldx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9xa39ldx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9xa39ldx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmuw7qb87_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8mzmboyg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmuw7qb87_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        if v[0] == \"add\" {\n            sum += v[1].(int)\n        } else if v[0] == \"sub\" {\n            sum -= v[1].(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy60ya4_c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy60ya4_c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy60ya4_c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy60ya4_c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy60ya4_c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy60ya4_c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfy8qgyny_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfy8qgyny_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfy8qgyny_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfy8qgyny_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfy8qgyny_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfy8qgyny_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmuw7qb87_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            if value, ok := value.(int); ok {\n                sum += value\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpskq52qz4_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpskq52qz4_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpskq52qz4_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpskq52qz4_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpskq52qz4_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpskq52qz4_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp89d4l0tg_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp89d4l0tg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp89d4l0tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbd2ryitg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbd2ryitg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbd2ryitg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm08cfv0w_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8mzmboyg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfwzcg4ez_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfwzcg4ez_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfwzcg4ez_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfwzcg4ez_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfwzcg4ez_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfwzcg4ez_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk737qip5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpydq16691_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpydq16691_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpydq16691_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpydq16691_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpydq16691_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpydq16691_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        for _, v := range t {\n            switch v.(type) {\n            case int:\n                sum += v.(int)\n            case float64:\n                sum += int(v.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpusxf7m_6_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpusxf7m_6_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpusxf7m_6_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpusxf7m_6_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpusxf7m_6_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpusxf7m_6_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk737qip5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            switch value.(type) {\n            case int:\n                sum += value.(int)\n            case float64:\n                sum += int(value.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4fsr9n_v_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4fsr9n_v_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4fsr9n_v_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4fsr9n_v_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4fsr9n_v_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4fsr9n_v_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprhe3fmh1_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhe3fmh1_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprhe3fmh1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhe3fmh1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprhe3fmh1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhe3fmh1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7gpep46_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmuw7qb87_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa5lfrjud_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5lfrjud_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5lfrjud_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpydq16691_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpydq16691_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpydq16691_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpydq16691_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpydq16691_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpydq16691_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqwa87i5m_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqwa87i5m_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqwa87i5m_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqwa87i5m_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqwa87i5m_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqwa87i5m_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            switch value.(type) {\n            case int:\n                sum += value.(int)\n            case float64:\n                sum += int(value.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4fsr9n_v_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4fsr9n_v_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4fsr9n_v_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4fsr9n_v_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4fsr9n_v_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4fsr9n_v_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk737qip5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyr4g_20g_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyr4g_20g_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyr4g_20g_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyr4g_20g_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyr4g_20g_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyr4g_20g_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz29mfiqc_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpz29mfiqc_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpz29mfiqc_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpz29mfiqc_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpz29mfiqc_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpz29mfiqc_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm08cfv0w_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa5lfrjud_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5lfrjud_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5lfrjud_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            switch value.(type) {\n            case int:\n                sum += value.(int)\n            case float64:\n                sum += int(value.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn8_6x3l0_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpn8_6x3l0_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpn8_6x3l0_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpn8_6x3l0_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpn8_6x3l0_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpn8_6x3l0_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp89d4l0tg_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp89d4l0tg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp89d4l0tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7gpep46_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmuw7qb87_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tup := range test_list {\n        for _, val := range tup {\n            sum += val.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnk5z308u_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnk5z308u_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnk5z308u_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnk5z308u_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnk5z308u_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnk5z308u_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigdl813a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpigdl813a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpigdl813a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpigdl813a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpigdl813a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpigdl813a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk737qip5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmgiunrli_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmgiunrli_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmgiunrli_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmgiunrli_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmgiunrli_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmgiunrli_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        if value[0] == \"add\" {\n            sum += value[1].(int)\n        } else {\n            sum -= value[1].(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnrwdnc_9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnrwdnc_9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnrwdnc_9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnrwdnc_9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnrwdnc_9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnrwdnc_9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7gpep46_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8mzmboyg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8mzmboyg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        for _, v2 := range v {\n            sum += v2.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr3zsgg57_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpr3zsgg57_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpr3zsgg57_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpr3zsgg57_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpr3zsgg57_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpr3zsgg57_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8mzmboyg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            if value_int, ok := value.(int); ok {\n                sum += value_int\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqyccu2g9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqyccu2g9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqyccu2g9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqyccu2g9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqyccu2g9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqyccu2g9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbd2ryitg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbd2ryitg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbd2ryitg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigdl813a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpigdl813a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpigdl813a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpigdl813a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpigdl813a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpigdl813a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, sub_list := range test_list {\n        for _, value := range sub_list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8f1e2j8p_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8f1e2j8p_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8f1e2j8p_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8f1e2j8p_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8f1e2j8p_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8f1e2j8p_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            switch value.(type) {\n            case int:\n                sum += value.(int)\n            case float64:\n                sum += int(value.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2a161psk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2a161psk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2a161psk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2a161psk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2a161psk_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2a161psk_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr_o9b1bm_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpr_o9b1bm_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpr_o9b1bm_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpr_o9b1bm_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpr_o9b1bm_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpr_o9b1bm_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm08cfv0w_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphujr_5je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphujr_5je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphujr_5je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, element := range test_list {\n        for _, value := range element {\n            switch value.(type) {\n            case int:\n                sum += value.(int)\n            case float64:\n                sum += int(value.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6azi4_mk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6azi4_mk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6azi4_mk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6azi4_mk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6azi4_mk_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6azi4_mk_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7gpep46_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        for _, v2 := range v {\n            sum += v2.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uq3i4t9_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9uq3i4t9_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9uq3i4t9_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9uq3i4t9_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9uq3i4t9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9uq3i4t9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            switch value.(type) {\n            case int:\n                sum += value.(int)\n            case float64:\n                sum += int(value.(float64))\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2a161psk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2a161psk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2a161psk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2a161psk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2a161psk_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2a161psk_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, item := range test_list {\n        sum += item[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpugitfulb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpugitfulb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpugitfulb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpugitfulb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpugitfulb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpugitfulb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp89d4l0tg_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp89d4l0tg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp89d4l0tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp89d4l0tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprhe3fmh1_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhe3fmh1_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprhe3fmh1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhe3fmh1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprhe3fmh1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhe3fmh1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbd2ryitg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbd2ryitg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbd2ryitg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbd2ryitg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo649q7je_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpo649q7je_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpo649q7je_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpo649q7je_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpo649q7je_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpo649q7je_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var cummulative_sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            cummulative_sum += value.(int)\n        }\n    }\n    return cummulative_sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp302ki9ii_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp302ki9ii_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp302ki9ii_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp302ki9ii_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp302ki9ii_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp302ki9ii_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxsro5nv_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppxsro5nv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppxsro5nv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmuw7qb87_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmuw7qb87_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmuw7qb87_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var cummulative_sum int\n    for _, value := range test_list {\n        cummulative_sum += value[1].(int)\n    }\n    return cummulative_sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpra62urzu_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpra62urzu_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra62urzu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpra62urzu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpra62urzu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpra62urzu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhb40i2a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmhb40i2a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmhb40i2a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7gpep46_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7gpep46_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe7gpep46_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe7gpep46_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, val := range list {\n            sum += val.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwnrtducu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwnrtducu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwnrtducu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwnrtducu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwnrtducu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwnrtducu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum = sum + v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3nfbkc0_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw3nfbkc0_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw3nfbkc0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw3nfbkc0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw3nfbkc0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw3nfbkc0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa5lfrjud_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5lfrjud_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5lfrjud_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5lfrjud_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tup := range test_list {\n        sum += tup[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7k1frjvu_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7k1frjvu_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7k1frjvu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7k1frjvu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7k1frjvu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7k1frjvu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, sub_list := range test_list {\n        for _, value := range sub_list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjc1f9lu7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjc1f9lu7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjc1f9lu7_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjc1f9lu7_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjc1f9lu7_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjc1f9lu7_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm08cfv0w_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm08cfv0w_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm08cfv0w_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk737qip5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk737qip5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk737qip5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphj33xh9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphj33xh9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphj33xh9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, t := range test_list {\n        sum += t[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122588,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgz5eo13q_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgz5eo13q_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgz5eo13q_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgz5eo13q_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgz5eo13q_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgz5eo13q_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122586,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyr4g_20g_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyr4g_20g_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyr4g_20g_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyr4g_20g_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyr4g_20g_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyr4g_20g_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp04vwbr7a_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp04vwbr7a_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp04vwbr7a_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8mzmboyg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8mzmboyg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8mzmboyg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jds7vt7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2jds7vt7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2jds7vt7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, tuple := range test_list {\n        sum += tuple[1].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppc_rplhx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppc_rplhx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppc_rplhx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}