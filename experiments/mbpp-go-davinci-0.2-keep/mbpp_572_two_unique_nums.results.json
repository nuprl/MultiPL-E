{
  "name": "mbpp_572_two_unique_nums",
  "language": "go_test.go",
  "prompt": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list.\n    num_map := make(map[int]int)\n\n    // Iterate through the list and add the number to the map.\n    for _, num := range nums {\n        num_map[num]++\n    }\n\n    // Create a list to store the unique numbers.\n    unique_nums := make([]int, 0)\n\n    // Iterate through the map and add the unique numbers to the list.\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if num != result[len(result)-1] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpshuiek2k_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpshuiek2k_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n\n    for _, num := range nums {\n        if _, ok := seen[num]; !ok {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp8gy65zim_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp8gy65zim_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the number of times each number appears\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num] += 1\n    }\n\n    // iterate through the map and add the unique numbers to a slice\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6jk8fwr5_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the count of each number\n    num_counts := make(map[int]int)\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    // get the unique numbers\n    unique_nums := []int{}\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp8viznme3_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp8viznme3_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    unique_nums := make([]int, 0)\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            is_unique := true\n            for _, unique_num := range unique_nums {\n                if num == unique_num {\n                    is_unique = false\n                    break\n                }\n            }\n            if is_unique {\n                unique_nums = append(unique_nums, num)\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpdfer02w2_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpdfer02w2_test.go:48: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times each number appears\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq913he25_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq913he25_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq913he25_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            found := false\n            for i, unique_num := range unique_nums {\n                if unique_num == num {\n                    found = true\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n            if found {\n                continue\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpkoyg2090_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpkoyg2090_test.go:48: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    var result []int\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    unique_nums := []int{}\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509744,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc3cy8j28_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return nums\n    }\n    var unique_nums []int\n    var unique_num int\n    for _, num := range nums {\n        if unique_num == num {\n            continue\n        }\n        unique_nums = append(unique_nums, num)\n        unique_num = num\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpaxwbjmvy_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpaxwbjmvy_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !in_array(num, unique_nums) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnlnuf8q8_test.go:12:13: undefined: in_array\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp0wmbw6fe_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp0wmbw6fe_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp9p49lu5x_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp9p49lu5x_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times each number appears\n    num_count := make(map[int]int)\n    // iterate through the list of numbers\n    for _, num := range nums {\n        // if the number is in the map, increment the count\n        if _, ok := num_count[num]; ok {\n            num_count[num] += 1\n        } else {\n            // if the number is not in the map, add it with a count of 1\n            num_count[num] = 1\n        }\n    }\n    // create a list to store the unique numbers\n    unique_nums := make([]int, 0)\n    // iterate through the map\n    for num, count := range num_count {\n        // if the count is 1, add the number to the unique numbers list\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // return the unique numbers list\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpk_nxz1ir_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpk_nxz1ir_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times a number appears\n    num_counts := make(map[int]int)\n    // iterate through the list of numbers\n    for _, num := range nums {\n        // if the number is not in the map, add it\n        if _, ok := num_counts[num]; !ok {\n            num_counts[num] = 1\n        } else {\n            // if the number is in the map, increment the count\n            num_counts[num] += 1\n        }\n    }\n    // create a slice to store the unique numbers\n    unique_nums := []int{}\n    // iterate through the map\n    for num, count := range num_counts {\n        // if the count is 1, add the number to the slice\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // return the slice\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpz0idtjel_test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpz0idtjel_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                } else if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpai0qnvzs_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpai0qnvzs_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the count of each number\n    num_count := make(map[int]int)\n    // map to store the index of each number\n    num_index := make(map[int]int)\n    // map to store the number of unique numbers\n    unique_count := 0\n    // map to store the index of the unique numbers\n    unique_index := make(map[int]int)\n\n    for i, num := range nums {\n        if _, ok := num_count[num]; ok {\n            num_count[num]++\n        } else {\n            num_count[num] = 1\n            num_index[num] = i\n            unique_count++\n            unique_index[unique_count] = i\n        }\n    }\n\n    if unique_count == 1 {\n        return []int{nums[unique_index[1]]}\n    } else if unique_count == 2 {\n        return []int{nums[unique_index[1]], nums[unique_index[2]]}\n    } else {\n        return []int{}\n    }\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy78d7s94_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy78d7s94_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpy78d7s94_test.go:54: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times a number appears\n    num_map := make(map[int]int)\n    // create a slice to store the unique numbers\n    unique_nums := []int{}\n    // iterate through the numbers\n    for _, num := range nums {\n        // if the number is not in the map, add it\n        if _, ok := num_map[num]; !ok {\n            num_map[num] = 1\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2vjkuv1b_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2vjkuv1b_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // O(n) time, O(1) space\n    // xor all the numbers\n    // xor the result with the first number\n    // the result is the two unique numbers\n    xor := 0\n    for _, num := range nums {\n        xor ^= num\n    }\n    xor ^= nums[0]\n    // find the first bit that is 1\n    bit := 1\n    for bit & xor == 0 {\n        bit <<= 1\n    }\n    // xor all the numbers that has the bit 1\n    // the result is one of the unique numbers\n    num1 := 0\n    for _, num := range nums {\n        if bit & num != 0 {\n            num1 ^= num\n        }\n    }\n    num2 := xor ^ num1\n    return []int{num1, num2}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return nil\n    }\n    if len(nums) == 1 {\n        return nums\n    }\n    if len(nums) == 2 {\n        return nums\n    }\n    if len(nums) == 3 {\n        return nums[:2]\n    }\n    if len(nums) == 4 {\n        if nums[0] == nums[1] {\n            return nums[2:]\n        }\n        if nums[2] == nums[3] {\n            return nums[:2]\n        }\n        return nums[:2]\n    }\n    if len(nums) == 5 {\n        if nums[0] == nums[1] {\n            if nums[2] == nums[3] {\n                return nums[4:]\n            }\n            if nums[2] == nums[4] {\n                return nums[3:]\n            }\n            return nums[2:]\n        }\n        if nums[1] == nums[2] {\n            if nums[3] == nums[4] {\n                return nums[:2]\n            }\n            return nums[:2]\n        }\n        if nums[2] == nums[3] {\n            return nums[:2]\n        }\n        if nums[3] == nums[4] {\n            return nums[:2]\n        }\n        return nums[:2]\n    }\n    if len(nums) == 6 {\n        if nums[0] == nums[1] {\n            if nums[2] == nums[3] {\n                if nums[4] == nums[5] {\n                    return nil\n                }\n                return nums[4:]\n            }\n            if nums[2] == nums[4] {\n                if nums[3] == nums[5] {\n                    return nil\n                }\n                return nums[3:]\n            }\n            if nums[2] == nums[5] {\n                if nums[3] == nums\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1bkguvp7_test.go:71:6: expected '(', found TestTwo_Unique_Nums\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyaogft27_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyaogft27_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                } else if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpai0qnvzs_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpai0qnvzs_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n\n    for _, num := range nums {\n        if !seen[num] {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxvl8_pb__test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxvl8_pb__test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Write your code here\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if num != result[len(result) - 1] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpnii98qio_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpnii98qio_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else {\n            if res[0] == num {\n                res = res[1:]\n            } else {\n                res = res[:1]\n            }\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpcw5963ue_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpcw5963ue_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpcw5963ue_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    m := make(map[int]int)\n    for _, num := range nums {\n        m[num]++\n    }\n    var result []int\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpbywxl0di_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else if num != unique_nums[len(unique_nums)-1] {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy9guvd5n_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy9guvd5n_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            var found = false\n            for _, r := range result {\n                if r == num {\n                    found = true\n                    break\n                }\n            }\n            if !found {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpe4bl_8j7_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpe4bl_8j7_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if num != result[len(result)-1] {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_0v7bovz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_0v7bovz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times a number appears\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpuoqk8pxz_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpjyov520d_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpjyov520d_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // if len(nums) == 0 {\n    //     return []int{}\n    // }\n    // if len(nums) == 1 {\n    //     return nums\n    // }\n    // if len(nums) == 2 {\n    //     return nums\n    // }\n    // var result []int\n    // for i := 0; i < len(nums); i++ {\n    //     if i == 0 {\n    //         result = append(result, nums[i])\n    //     } else {\n    //         if nums[i] != nums[i-1] {\n    //             result = append(result, nums[i])\n    //         }\n    //     }\n    // }\n    // return result\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp3pek9lwm_test.go:58: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp3pek9lwm_test.go:58: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if num != result[len(result)-1] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpshuiek2k_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpshuiek2k_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times each number appears\n    num_counts := make(map[int]int)\n    for _, num := range nums {\n        num_counts[num] += 1\n    }\n\n    // Create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpmu9um59w_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpmu9um59w_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpmu9um59w_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times a number appears\n    num_map := make(map[int]int)\n    // iterate through the list of numbers\n    for _, num := range nums {\n        // if the number is already in the map, increment the count\n        if _, ok := num_map[num]; ok {\n            num_map[num] += 1\n        } else {\n            // if the number is not in the map, add it to the map with a count of 1\n            num_map[num] = 1\n        }\n    }\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    // iterate through the map\n    for num, count := range num_map {\n        // if the number appears only once, add it to the slice of unique numbers\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // return the slice of unique numbers\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmprmt_y5z__test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmprmt_y5z__test.go:50: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmprmt_y5z__test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                } else if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpr1cu1aip_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpr1cu1aip_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return nums\n    }\n\n    var unique_nums []int\n    var num_counts = make(map[int]int)\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp5irc1apu_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp5irc1apu_test.go:44: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num := range nums {\n        if _, ok := seen[num]; !ok {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyd9738gc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyd9738gc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        if _, ok := nums_map[num]; ok {\n            nums_map[num] += 1\n        } else {\n            nums_map[num] = 1\n        }\n    }\n    unique_nums := []int{}\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpkxk6ovc__test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            var found bool\n            for _, r := range result {\n                if r == num {\n                    found = true\n                    break\n                }\n            }\n            if !found {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpwg_zq963_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpwg_zq963_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    // nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7,\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd8h8az4z_test.go:22:6: expected '(', found TestTwo_Unique_Nums\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if num != result[len(result)-1] {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpshuiek2k_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpshuiek2k_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // use a map to store the number of times a number appears in the list\n    num_counts := make(map[int]int)\n    for _, num := range nums {\n        num_counts[num] += 1\n    }\n\n    // iterate through the map and find the numbers that only appear once\n    unique_nums := make([]int, 0)\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] != num {\n            res = append(res, num)\n            break\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpa6wh_7or_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpa6wh_7or_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpa6wh_7or_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map of number to count\n    num_counts := make(map[int]int)\n    for _, num := range nums {\n        num_counts[num] += 1\n    }\n\n    // find the two unique numbers\n    var unique_nums []int\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp91fzx0ky_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp91fzx0ky_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            var found bool\n            for _, unique_num := range unique_nums {\n                if num == unique_num {\n                    found = true\n                    break\n                }\n            }\n            if !found {\n                unique_nums = append(unique_nums, num)\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpqmls_1k6_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpqmls_1k6_test.go:45: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Use a map to store the number of times each number appears.\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num] += 1\n    }\n\n    // Loop through the map and find the numbers that appear once.\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp0hgon7n9_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp0hgon7n9_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] == num {\n            res = res[1:]\n        } else {\n            res = res[:1]\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map of nums\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    // find the two unique numbers\n    var unique_nums []int\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n\n    for i := 0; i < len(nums); i++ {\n        nums_map[nums[i]] = nums_map[nums[i]] + 1\n    }\n\n    for k, v := range nums_map {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpbja9jfjr_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpgc64kmhy_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpgc64kmhy_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num := range nums {\n        if !seen[num] {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy2bpf6rc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy2bpf6rc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the count of each number\n    num_counts := make(map[int]int)\n    // map to store the index of each number\n    num_indexes := make(map[int]int)\n    // map to store the number of unique numbers\n    unique_nums := make(map[int]int)\n\n    // loop through the list of numbers\n    for i, num := range nums {\n        // increment the count of the number\n        num_counts[num]++\n        // store the index of the number\n        num_indexes[num] = i\n    }\n\n    // loop through the map of number counts\n    for num, count := range num_counts {\n        // if the count is 1, add the number to the unique numbers map\n        if count == 1 {\n            unique_nums[num] = num_indexes[num]\n        }\n    }\n\n    // sort the unique numbers map by the index of the number\n    sorted_unique_nums := sort_map_by_value(unique_nums)\n\n    // return the first two numbers in the sorted unique numbers map\n    return []int{sorted_unique_nums[0], sorted_unique_nums[1]}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphou22vpc_test.go:34:27: undefined: sort_map_by_value\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            for i, n := range result {\n                if n == num {\n                    result = append(result[:i], result[i+1:]...)\n                    break\n                }\n                if i == len(result) - 1 {\n                    result = append(result, num)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] != nums[i+1] {\n            result = append(result, nums[i])\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.two_unique_nums(...)\n\t/tmp/tmpt_0l8g03_test.go:12\ncommand-line-arguments_test.TestTwo_Unique_Nums(0xc000001380)\n\t/tmp/tmpt_0l8g03_test.go:26 +0x81f\ntesting.tRunner(0xc000001380, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // map to store the number of times each number appears\n    nums_map := make(map[int]int)\n    // map to store the index of each number\n    nums_index := make(map[int]int)\n    // slice to store the unique numbers\n    unique_nums := make([]int, 0)\n\n    // loop through the numbers\n    for i, num := range nums {\n        // if the number is not in the map, add it\n        if _, ok := nums_map[num]; !ok {\n            nums_map[num] = 1\n            nums_index[num] = i\n        } else {\n            // if the number is in the map, increment the count\n            nums_map[num] += 1\n        }\n    }\n\n    // loop through the numbers\n    for num, count := range nums_map {\n        // if the number only appears once, add it to the unique numbers slice\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    // return the unique numbers\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpvtgdneuf_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num := range nums {\n        if _, ok := seen[num]; !ok {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyd9738gc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyd9738gc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if len(unique_nums) == 0 {\n            unique_nums = append(unique_nums, num)\n        } else {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    break\n                }\n                if i == len(unique_nums) - 1 {\n                    unique_nums = append(unique_nums, num)\n                }\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpjyov520d_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpjyov520d_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the numbers\n    nums_map := make(map[int]int)\n    // iterate through the list and add the numbers to the map\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    // create a list to store the unique numbers\n    unique_nums := make([]int, 0)\n    // iterate through the map and add the unique numbers to the list\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    // return the unique numbers\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpkn09fc8z_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124194,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num := range nums {\n        if !seen[num] {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy2bpf6rc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy2bpf6rc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124194,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list\n    num_map := make(map[int]int)\n    // Create a list to store the unique numbers\n    unique_nums := make([]int, 0)\n\n    // Iterate through the list of numbers\n    for _, num := range nums {\n        // If the number is not in the map, add it to the map and the unique list\n        if _, ok := num_map[num]; !ok {\n            num_map[num] = 1\n            unique_nums = append(unique_nums, num)\n        } else {\n            // If the number is in the map, increment the number of times it appears\n            num_map[num] += 1\n        }\n    }\n\n    // Iterate through the map\n    for num, count := range num_map {\n        // If the number appears more than once, remove it from the unique list\n        if count > 1 {\n            for i, unique_num := range unique_nums {\n                if num == unique_num {\n                    unique_nums = append(unique_nums[:i], unique_nums[i+1:]...)\n                }\n            }\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num := range nums {\n        if _, ok := seen[num]; !ok {\n            seen[num] = true\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyd9738gc_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyd9738gc_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // use a map to store the numbers\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    // find the unique numbers\n    var unique_nums []int\n    for num, count := range nums_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpkzt4hhnv_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpkzt4hhnv_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    var unique_num int\n    var num_counts = make(map[int]int)\n\n    for _, num := range nums {\n        num_counts[num]++\n    }\n\n    for num, count := range num_counts {\n        if count == 1 {\n            unique_num = num\n            break\n        }\n    }\n\n    for _, num := range nums {\n        if num != unique_num {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpz9um016w_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpz9um016w_test.go:49: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpz9um016w_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] != nums[i+1] {\n            result = append(result, nums[i])\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.two_unique_nums(...)\n\t/tmp/tmpt_0l8g03_test.go:12\ncommand-line-arguments_test.TestTwo_Unique_Nums(0xc000001380)\n\t/tmp/tmpt_0l8g03_test.go:26 +0x81f\ntesting.tRunner(0xc000001380, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n    for k, v := range nums_map {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp3s43tci7_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num] += 1\n    }\n\n    var result []int\n    for num, count := range num_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if nums[i] == nums[i+1] {\n            continue\n        } else {\n            result = append(result, nums[i])\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.two_unique_nums(...)\n\t/tmp/tmph_icr9om_test.go:12\ncommand-line-arguments_test.TestTwo_Unique_Nums(0xc000182600)\n\t/tmp/tmph_icr9om_test.go:28 +0x7e5\ntesting.tRunner(0xc000182600, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            res = append(res, nums[i])\n        } else {\n            for j := 0; j < len(res); j++ {\n                if nums[i] == res[j] {\n                    break\n                }\n                if j == len(res) - 1 {\n                    res = append(res, nums[i])\n                }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp3xurkbz6_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp3xurkbz6_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var nums_map map[int]int = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpspy203ny_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpspy203ny_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpspy203ny_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Write - Your - Code\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxrg9s2lr_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxrg9s2lr_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxrg9s2lr_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var nums_map = make(map[int]int)\n    for _, num := range nums {\n        nums_map[num]++\n    }\n\n    var result []int\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpml7zg70e_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpml7zg70e_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return nums\n    }\n\n    var result []int\n    var m = make(map[int]int)\n    for _, num := range nums {\n        if _, ok := m[num]; ok {\n            m[num]++\n        } else {\n            m[num] = 1\n        }\n    }\n\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            for i, n := range result {\n                if num == n {\n                    result = append(result[:i], result[i+1:]...)\n                } else {\n                    result = append(result, num)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpuok08jmd_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpuok08jmd_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpuok08jmd_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times each number appears.\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n\n    // Create a slice to store the unique numbers.\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp5sf5gi1j_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp5sf5gi1j_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, num := range nums {\n        m[num]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6qitqguk_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6qitqguk_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp6qitqguk_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) < 2 {\n        return nums\n    }\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    result := make([]int, 0)\n    for num, count := range nums_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpgestx780_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpgestx780_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 2 {\n            break\n        }\n        if !contains(result, num) {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzyjnh19__test.go:15:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[len(result)-1] != num {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyzolsh08_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyzolsh08_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    unique := make(map[int]int)\n    for _, num := range nums {\n        unique[num] += 1\n    }\n    result := make([]int, 0)\n    for num, count := range unique {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpklie8zse_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] == num {\n            res = res[1:]\n        } else {\n            res = res[:0]\n            res = append(res, num)\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyjv0ynw0_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyjv0ynw0_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpyjv0ynw0_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if len(nums) == 1 {\n        return nums\n    }\n    if len(nums) == 2 {\n        return nums\n    }\n    var unique_nums []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            unique_nums = append(unique_nums, nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                unique_nums = append(unique_nums, nums[i])\n            }\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpqgue_2km_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpqgue_2km_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if len(nums) == 1 {\n        return nums\n    }\n    if len(nums) == 2 {\n        return nums\n    }\n    var result []int\n    var count int\n    for i := 0; i < len(nums); i++ {\n        count = 0\n        for j := 0; j < len(nums); j++ {\n            if nums[i] == nums[j] {\n                count++\n            }\n        }\n        if count == 1 {\n            result = append(result, nums[i])\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            for i, r := range result {\n                if r == num {\n                    result = append(result[:i], result[i+1:]...)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpbbbspf4i_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpbbbspf4i_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpbbbspf4i_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpmre8v1mi_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpmre8v1mi_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpmre8v1mi_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement me\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpzcctkv3a_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpzcctkv3a_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpzcctkv3a_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, num := range nums {\n        m[num]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124195,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp6qitqguk_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp6qitqguk_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp6qitqguk_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n\n    var result []int\n    var m = make(map[int]int)\n    for _, num := range nums {\n        m[num] += 1\n    }\n\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxpy2jsrt_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxpy2jsrt_test.go:44: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxpy2jsrt_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to keep track of the number of times a number appears\n    num_counts := make(map[int]int)\n    // create a slice to hold the unique numbers\n    unique_nums := make([]int, 0)\n\n    // loop through the nums slice\n    for _, num := range nums {\n        // if the number is not in the map, add it\n        if _, ok := num_counts[num]; !ok {\n            num_counts[num] = 1\n        } else {\n            // if the number is in the map, increment the count\n            num_counts[num] += 1\n        }\n    }\n\n    // loop through the num_counts map\n    for num, count := range num_counts {\n        // if the count is 1, add it to the unique_nums slice\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy9l1osd0_test.go:52: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // use a map to store the number of times a number appears in the list\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num] += 1\n    }\n\n    // iterate through the map and add the number to the result if it appears only once\n    result := []int{}\n    for num, count := range num_map {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpfpq7j7yy_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    m := make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    var ret []int\n    for k, v := range m {\n        if v == 1 {\n            ret = append(ret, k)\n        }\n    }\n    return ret\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpu0vypgf7_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpu0vypgf7_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n\n    for _, num := range nums {\n        m[num]++\n    }\n\n    for num, count := range m {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp3f2myqfc_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique []int\n    for _, num := range nums {\n        if len(unique) == 0 {\n            unique = append(unique, num)\n        } else {\n            for i, uniq := range unique {\n                if num == uniq {\n                    break\n                } else if i == len(unique) - 1 {\n                    unique = append(unique, num)\n                }\n            }\n        }\n    }\n    return unique\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpwqa0sjp9_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpwqa0sjp9_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var dict = make(map[int]int)\n    for _, num := range nums {\n        dict[num] += 1\n    }\n    for num, count := range dict {\n        if count == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpjqo14lkq_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map of the numbers\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num] += 1\n    }\n\n    // create a slice of the unique numbers\n    unique_nums := make([]int, 0)\n    for num, count := range num_map {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmptv0oqp6o_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmptv0oqp6o_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var seen = make(map[int]bool)\n    for _, num := range nums {\n        if _, ok := seen[num]; !ok {\n            result = append(result, num)\n            seen[num] = true\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp3t6dl6be_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp3t6dl6be_test.go:36: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124194,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    if len(nums) <= 1 {\n        return nums\n    }\n    var res []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            res = append(res, nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                res = append(res, nums[i])\n            }\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp7xrn8b06_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp7xrn8b06_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // O(n) time and O(1) space\n    // XOR all the numbers together\n    // The result is the XOR of the two unique numbers\n    // Find the rightmost set bit in the result\n    // This bit is set in one of the unique numbers, but not the other\n    // Divide the numbers into two groups based on this bit\n    // The two unique numbers are in these two groups\n    // XOR all the numbers in each group to get the two unique numbers\n    var xor int\n    for _, num := range nums {\n        xor ^= num\n    }\n    // Find the rightmost set bit in the result\n    var rightmost_set_bit int\n    for i := 0; i < 32; i++ {\n        if (xor & (1 << uint(i))) != 0 {\n            rightmost_set_bit = i\n            break\n        }\n    }\n    // Divide the numbers into two groups based on this bit\n    var group0, group1 int\n    for _, num := range nums {\n        if (num & (1 << uint(rightmost_set_bit))) != 0 {\n            group1 ^= num\n        } else {\n            group0 ^= num\n        }\n    }\n    return []int{group0, group1}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpgtafz_8v_test.go:57: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpgtafz_8v_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=7)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpgtafz_8v_test.go:57: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=6) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpq9pgk8sl_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    var m = make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    for k, v := range m {\n        if v == 1 {\n            result = append(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: implement\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2fysoj85_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxy1guhwc_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if num == 0 {\n            continue\n        }\n        if num == 1 {\n            result = append(result, num)\n            continue\n        }\n        if num % 2 == 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy6jmd7wl_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy6jmd7wl_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpy6jmd7wl_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] == num {\n            res = res[1:]\n        } else {\n            res = res[:1]\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpv89zlky9_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var res []int\n    for _, num := range nums {\n        if len(res) == 0 {\n            res = append(res, num)\n        } else if res[0] == num {\n            res = res[1:]\n        } else {\n            res = res[:1]\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpx2frpa72_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124194,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // create a map to store the number of times each number appears\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n    // create a slice to store the unique numbers\n    unique_nums := make([]int, 0)\n    // loop through the map and append the unique numbers to the slice\n    for k, v := range num_map {\n        if v == 1 {\n            unique_nums = append(unique_nums, k)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpjpen_t3t_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpjpen_t3t_test.go:41: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpjpen_t3t_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = result[:1]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpxr9x4s4d_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] == num {\n                result = result[1:]\n            } else {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124190,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpy94qup2j_test.go:40: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpgc64kmhy_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpgc64kmhy_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            result = result[1:]\n        } else {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp741ur6d__test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmphu641u8p_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique []int\n    for _, num := range nums {\n        if !contains(unique, num) {\n            unique = append(unique, num)\n        }\n    }\n    return unique\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc5b7hr2s_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if result[0] != num {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpyaogft27_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpyaogft27_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    // Create a map to store the number of times a number appears in the list\n    num_count := make(map[int]int)\n    // Iterate through the list and add the number to the map\n    for _, num := range nums {\n        num_count[num] += 1\n    }\n    // Create a list to store the unique numbers\n    unique_nums := make([]int, 0)\n    // Iterate through the map and add the unique numbers to the list\n    for num, count := range num_count {\n        if count == 1 {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmppt9i30e2_test.go:42: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for i := 0; i < len(nums); i++ {\n        if i == 0 {\n            result = append(result, nums[i])\n        } else {\n            for j := 0; j < len(result); j++ {\n                if nums[i] == result[j] {\n                    break\n                }\n                if j == len(result) - 1 {\n                    result = append(result, nums[i])\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124194,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmpftb31jrh_test.go:43: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    m := make(map[int]int)\n    for _, num := range nums {\n        m[num]++\n    }\n    var res []int\n    for k, v := range m {\n        if v == 1 {\n            res = append(res, k)\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmpvyda1cnk_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else if result[0] == num {\n            continue\n        } else if result[0] != num {\n            result = append(result, num)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124193,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__2 (0.00s)\n        tmp2s2bjr7v_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var unique_nums []int\n    for _, num := range nums {\n        if !contains(unique_nums, num) {\n            unique_nums = append(unique_nums, num)\n        }\n    }\n    return unique_nums\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509745,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqgp8z4cl_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    var result []int\n    for _, num := range nums {\n        if len(result) == 0 {\n            result = append(result, num)\n        } else {\n            if num != result[len(result)-1] {\n                result = append(result, num)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124191,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmp_0v7bovz_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmp_0v7bovz_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n    nums_map := make(map[int]int)\n    for _, num := range nums {\n        nums_map[num] += 1\n    }\n    var res []int\n    for num, count := range nums_map {\n        if count == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n\nfunc TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124196,
      "stdout": "--- FAIL: TestTwo_Unique_Nums (0.00s)\n    --- FAIL: TestTwo_Unique_Nums/test_num__0 (0.00s)\n        tmprlffae7j_test.go:38: expected '[%!s(int=1) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestTwo_Unique_Nums/test_num__1 (0.00s)\n        tmprlffae7j_test.go:38: expected '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5)]', got '[%!s(int=4) %!s(int=5) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}